
PRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00006792  00006826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  008001a4  008001a4  0000696a  2**0
                  ALLOC
  3 .stab         00005f64  00000000  00000000  0000696c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000200f  00000000  00000000  0000c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000e8df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000ea9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000ecaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00011339  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00012819  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00013ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  00013ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  00013fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001494c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__vector_1>
       8:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__vector_2>
       c:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__vector_10>
      2c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f7 e6       	ldi	r31, 0x67	; 103
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <main>
      8a:	0c 94 c7 33 	jmp	0x678e	; 0x678e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 33 	jmp	0x6620	; 0x6620 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e9       	ldi	r26, 0x94	; 148
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 33 	jmp	0x6658	; 0x6658 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 33 	jmp	0x6638	; 0x6638 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 33 	jmp	0x6670	; 0x6670 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 33 	jmp	0x6638	; 0x6638 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 33 	jmp	0x6670	; 0x6670 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 33 	jmp	0x6620	; 0x6620 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e9       	ldi	r24, 0x94	; 148
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 33 	jmp	0x6658	; 0x6658 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 33 	jmp	0x6630	; 0x6630 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e9       	ldi	r22, 0x94	; 148
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 34 33 	jmp	0x6668	; 0x6668 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1c 33 	jmp	0x6638	; 0x6638 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 38 33 	jmp	0x6670	; 0x6670 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1c 33 	jmp	0x6638	; 0x6638 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 38 33 	jmp	0x6670	; 0x6670 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1c 33 	jmp	0x6638	; 0x6638 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 38 33 	jmp	0x6670	; 0x6670 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1c 33 	jmp	0x6638	; 0x6638 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 38 33 	jmp	0x6670	; 0x6670 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 20 33 	jmp	0x6640	; 0x6640 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 3c 33 	jmp	0x6678	; 0x6678 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 18 33 	jmp	0x6630	; 0x6630 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 34 33 	jmp	0x6668	; 0x6668 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e4 56       	subi	r30, 0x64	; 100
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <TMR0_VoidInit>:

static void (*OVF_GPCALLBACK_PTR)(void) = NULL_PTR;
static void (*OCM_GPCALLBACK_PTR)(void) = NULL_PTR;

void TMR0_VoidInit(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,WGM01);
#elif   TIMER0_Mood==PWM_PhaseCorrect_MOOD
	SET_BIT(TCCR0,WGM00);
	CLR_BIT(TCCR0,WGM01);
#elif    TIMER0_Mood==CTC_MOOD
	CLR_BIT(TCCR0,WGM00);
     e96:	a3 e5       	ldi	r26, 0x53	; 83
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e3 e5       	ldi	r30, 0x53	; 83
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
     ea4:	a3 e5       	ldi	r26, 0x53	; 83
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e3 e5       	ldi	r30, 0x53	; 83
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 60       	ori	r24, 0x08	; 8
     eb0:	8c 93       	st	X, r24
#elif Prescaler_Mood == PRESCALER_TIMER0_256
	CLR_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#elif Prescaler_Mood == PRESCALER_TIMER0_1024
	SET_BIT(TCCR0, CS00);
     eb2:	a3 e5       	ldi	r26, 0x53	; 83
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e3 e5       	ldi	r30, 0x53	; 83
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
     ec0:	a3 e5       	ldi	r26, 0x53	; 83
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e3 e5       	ldi	r30, 0x53	; 83
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8d 7f       	andi	r24, 0xFD	; 253
     ecc:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
     ece:	a3 e5       	ldi	r26, 0x53	; 83
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e3 e5       	ldi	r30, 0x53	; 83
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	84 60       	ori	r24, 0x04	; 4
     eda:	8c 93       	st	X, r24
#else

#endif

#if OC0_MOOD == Normal_port_operation
	CLR_BIT(TCCR0, COM00);
     edc:	a3 e5       	ldi	r26, 0x53	; 83
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e3 e5       	ldi	r30, 0x53	; 83
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8f 7e       	andi	r24, 0xEF	; 239
     ee8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM01);
     eea:	a3 e5       	ldi	r26, 0x53	; 83
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e3 e5       	ldi	r30, 0x53	; 83
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 7d       	andi	r24, 0xDF	; 223
     ef6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);
#else

#endif
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <TMR0_VoidOVFInterruptEnable>:
void TMR0_VoidOVFInterruptEnable(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE0);
     f06:	a9 e5       	ldi	r26, 0x59	; 89
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e9 e5       	ldi	r30, 0x59	; 89
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	8c 93       	st	X, r24
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <TMR0_VoidOCMInterruptEnable>:
void TMR0_VoidOCMInterruptEnable(void)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE0);
     f22:	a9 e5       	ldi	r26, 0x59	; 89
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e9 e5       	ldi	r30, 0x59	; 89
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	8c 93       	st	X, r24
	SET_BIT(SREG,7);
     f30:	af e5       	ldi	r26, 0x5F	; 95
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ef e5       	ldi	r30, 0x5F	; 95
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 68       	ori	r24, 0x80	; 128
     f3c:	8c 93       	st	X, r24
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <TMR0_VoidSetPreLoad>:

void TMR0_VoidSetPreLoad(u8 A_u8PreLoading_Value)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8PreLoading_Value;
     f50:	e2 e5       	ldi	r30, 0x52	; 82
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	80 83       	st	Z, r24
}
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <TMR0_VoidSetOCMValue>:
void TMR0_VoidSetOCMValue(u8 A_u8CompareMatchValue)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	0f 92       	push	r0
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8CompareMatchValue;
     f6c:	ec e5       	ldi	r30, 0x5C	; 92
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	80 83       	st	Z, r24
}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <TMR0_VidSetDutyCycle>:

void TMR0_VidSetDutyCycle(u8 LOC_u8DutyPercentage)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	89 83       	std	Y+1, r24	; 0x01
	OCR0=(LOC_u8DutyPercentage*255)/100;
     f88:	ec e5       	ldi	r30, 0x5C	; 92
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	48 2f       	mov	r20, r24
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	ca 01       	movw	r24, r20
     f94:	9c 01       	movw	r18, r24
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	c9 01       	movw	r24, r18
     f9c:	96 95       	lsr	r25
     f9e:	98 2f       	mov	r25, r24
     fa0:	88 27       	eor	r24, r24
     fa2:	97 95       	ror	r25
     fa4:	87 95       	ror	r24
     fa6:	82 1b       	sub	r24, r18
     fa8:	93 0b       	sbc	r25, r19
     faa:	84 0f       	add	r24, r20
     fac:	95 1f       	adc	r25, r21
     fae:	24 e6       	ldi	r18, 0x64	; 100
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	b9 01       	movw	r22, r18
     fb4:	0e 94 db 32 	call	0x65b6	; 0x65b6 <__divmodhi4>
     fb8:	cb 01       	movw	r24, r22
     fba:	80 83       	st	Z, r24
}
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <TMR0_OFV_SetCallBack>:

void TMR0_OFV_SetCallBack(void(*PTR)(void))
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <TMR0_OFV_SetCallBack+0x6>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9a 83       	std	Y+2, r25	; 0x02
     fd0:	89 83       	std	Y+1, r24	; 0x01
	OVF_GPCALLBACK_PTR = PTR;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	9a 81       	ldd	r25, Y+2	; 0x02
     fd6:	90 93 a5 01 	sts	0x01A5, r25
     fda:	80 93 a4 01 	sts	0x01A4, r24
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <TMR0_OCM_SetCallBack>:
void TMR0_OCM_SetCallBack(void(*PTR)(void))
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <TMR0_OCM_SetCallBack+0x6>
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	89 83       	std	Y+1, r24	; 0x01
	OCM_GPCALLBACK_PTR = PTR;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	90 93 a7 01 	sts	0x01A7, r25
     ffe:	80 93 a6 01 	sts	0x01A6, r24
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <__vector_11>:
void __vector_11 (void)__attribute__ ((signal,used, externally_visible));\
void __vector_11 (void)
{
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	if(OVF_GPCALLBACK_PTR != NULL_PTR)
    1036:	80 91 a4 01 	lds	r24, 0x01A4
    103a:	90 91 a5 01 	lds	r25, 0x01A5
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	29 f0       	breq	.+10     	; 0x104c <__vector_11+0x40>
	{
		OVF_GPCALLBACK_PTR();
    1042:	e0 91 a4 01 	lds	r30, 0x01A4
    1046:	f0 91 a5 01 	lds	r31, 0x01A5
    104a:	09 95       	icall
	}
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <__vector_10>:

void __vector_10 (void)__attribute__ ((signal,used, externally_visible));\
void __vector_10 (void)
{
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	if(OCM_GPCALLBACK_PTR != NULL_PTR)
    109c:	80 91 a6 01 	lds	r24, 0x01A6
    10a0:	90 91 a7 01 	lds	r25, 0x01A7
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	29 f0       	breq	.+10     	; 0x10b2 <__vector_10+0x40>
	{
		OCM_GPCALLBACK_PTR();
    10a8:	e0 91 a6 01 	lds	r30, 0x01A6
    10ac:	f0 91 a7 01 	lds	r31, 0x01A7
    10b0:	09 95       	icall
	}
}
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <MGlobal_Interrupt_VoidEnable>:
#include "Global_Interrupt_private.h"
#include "Global_Interrupt_interface.h"


void MGlobal_Interrupt_VoidEnable(void)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    10e0:	af e5       	ldi	r26, 0x5F	; 95
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ef e5       	ldi	r30, 0x5F	; 95
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 68       	ori	r24, 0x80	; 128
    10ec:	8c 93       	st	X, r24
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <MGlobal_Interrupt_VoidDisable>:
void MGlobal_Interrupt_VoidDisable(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    10fc:	af e5       	ldi	r26, 0x5F	; 95
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ef e5       	ldi	r30, 0x5F	; 95
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8f 77       	andi	r24, 0x7F	; 127
    1108:	8c 93       	st	X, r24
}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <MDIO_void_SetPinDirection>:
#include"DIO_Private.h"
#include"DIO_Config.h"
#include"DIO_Interface.h"

void MDIO_void_SetPinDirection(u8 A_u8_PortNumber, u8 A_u8_PinNumber, u8 A_u8_PinDirection)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	27 97       	sbiw	r28, 0x07	; 7
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	6a 83       	std	Y+2, r22	; 0x02
    1128:	4b 83       	std	Y+3, r20	; 0x03
	if(DIO_u8_PIN_OUTPUT == A_u8_PinDirection)
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	09 f0       	breq	.+2      	; 0x1132 <MDIO_void_SetPinDirection+0x22>
    1130:	6f c0       	rjmp	.+222    	; 0x1210 <MDIO_void_SetPinDirection+0x100>
	{
		switch(A_u8_PortNumber)
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3f 83       	std	Y+7, r19	; 0x07
    113a:	2e 83       	std	Y+6, r18	; 0x06
    113c:	8e 81       	ldd	r24, Y+6	; 0x06
    113e:	9f 81       	ldd	r25, Y+7	; 0x07
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	49 f1       	breq	.+82     	; 0x1198 <MDIO_void_SetPinDirection+0x88>
    1146:	2e 81       	ldd	r18, Y+6	; 0x06
    1148:	3f 81       	ldd	r19, Y+7	; 0x07
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	2c f4       	brge	.+10     	; 0x115a <MDIO_void_SetPinDirection+0x4a>
    1150:	8e 81       	ldd	r24, Y+6	; 0x06
    1152:	9f 81       	ldd	r25, Y+7	; 0x07
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	61 f0       	breq	.+24     	; 0x1170 <MDIO_void_SetPinDirection+0x60>
    1158:	d2 c0       	rjmp	.+420    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
    115a:	2e 81       	ldd	r18, Y+6	; 0x06
    115c:	3f 81       	ldd	r19, Y+7	; 0x07
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	71 f1       	breq	.+92     	; 0x11c0 <MDIO_void_SetPinDirection+0xb0>
    1164:	8e 81       	ldd	r24, Y+6	; 0x06
    1166:	9f 81       	ldd	r25, Y+7	; 0x07
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	e9 f1       	breq	.+122    	; 0x11e8 <MDIO_void_SetPinDirection+0xd8>
    116e:	c7 c0       	rjmp	.+398    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		{
		case DIO_u8_PORTA: SET_BIT(DIO_u8_DDRA_REG,A_u8_PinNumber); break;
    1170:	aa e3       	ldi	r26, 0x3A	; 58
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ea e3       	ldi	r30, 0x3A	; 58
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <MDIO_void_SetPinDirection+0x7e>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <MDIO_void_SetPinDirection+0x7a>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	b3 c0       	rjmp	.+358    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		case DIO_u8_PORTB: SET_BIT(DIO_u8_DDRB_REG,A_u8_PinNumber); break;
    1198:	a7 e3       	ldi	r26, 0x37	; 55
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e7 e3       	ldi	r30, 0x37	; 55
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <MDIO_void_SetPinDirection+0xa6>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <MDIO_void_SetPinDirection+0xa2>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	9f c0       	rjmp	.+318    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		case DIO_u8_PORTC: SET_BIT(DIO_u8_DDRC_REG,A_u8_PinNumber); break;
    11c0:	a4 e3       	ldi	r26, 0x34	; 52
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e4 e3       	ldi	r30, 0x34	; 52
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <MDIO_void_SetPinDirection+0xce>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <MDIO_void_SetPinDirection+0xca>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	8b c0       	rjmp	.+278    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		case DIO_u8_PORTD: SET_BIT(DIO_u8_DDRD_REG,A_u8_PinNumber); break;
    11e8:	a1 e3       	ldi	r26, 0x31	; 49
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <MDIO_void_SetPinDirection+0xf6>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <MDIO_void_SetPinDirection+0xf2>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	77 c0       	rjmp	.+238    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		default: break;
		}
	}
	else if(DIO_u8_PIN_INPUT == A_u8_PinDirection)
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 23       	and	r24, r24
    1214:	09 f0       	breq	.+2      	; 0x1218 <MDIO_void_SetPinDirection+0x108>
    1216:	73 c0       	rjmp	.+230    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
	{
		switch(A_u8_PortNumber)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3d 83       	std	Y+5, r19	; 0x05
    1220:	2c 83       	std	Y+4, r18	; 0x04
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	59 f1       	breq	.+86     	; 0x1282 <MDIO_void_SetPinDirection+0x172>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	2c f4       	brge	.+10     	; 0x1240 <MDIO_void_SetPinDirection+0x130>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	69 f0       	breq	.+26     	; 0x1258 <MDIO_void_SetPinDirection+0x148>
    123e:	5f c0       	rjmp	.+190    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	89 f1       	breq	.+98     	; 0x12ac <MDIO_void_SetPinDirection+0x19c>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <MDIO_void_SetPinDirection+0x146>
    1254:	40 c0       	rjmp	.+128    	; 0x12d6 <MDIO_void_SetPinDirection+0x1c6>
    1256:	53 c0       	rjmp	.+166    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		{
		case DIO_u8_PORTA: CLR_BIT(DIO_u8_DDRA_REG,A_u8_PinNumber); break;
    1258:	aa e3       	ldi	r26, 0x3A	; 58
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ea e3       	ldi	r30, 0x3A	; 58
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <MDIO_void_SetPinDirection+0x166>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <MDIO_void_SetPinDirection+0x162>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	3e c0       	rjmp	.+124    	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		case DIO_u8_PORTB: CLR_BIT(DIO_u8_DDRB_REG,A_u8_PinNumber); break;
    1282:	a7 e3       	ldi	r26, 0x37	; 55
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e7 e3       	ldi	r30, 0x37	; 55
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <MDIO_void_SetPinDirection+0x190>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <MDIO_void_SetPinDirection+0x18c>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	29 c0       	rjmp	.+82     	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		case DIO_u8_PORTC: CLR_BIT(DIO_u8_DDRC_REG,A_u8_PinNumber); break;
    12ac:	a4 e3       	ldi	r26, 0x34	; 52
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e4 e3       	ldi	r30, 0x34	; 52
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <MDIO_void_SetPinDirection+0x1ba>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <MDIO_void_SetPinDirection+0x1b6>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <MDIO_void_SetPinDirection+0x1ee>
		case DIO_u8_PORTD: CLR_BIT(DIO_u8_DDRD_REG,A_u8_PinNumber); break;
    12d6:	a1 e3       	ldi	r26, 0x31	; 49
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e1 e3       	ldi	r30, 0x31	; 49
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <MDIO_void_SetPinDirection+0x1e4>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <MDIO_void_SetPinDirection+0x1e0>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    12fe:	27 96       	adiw	r28, 0x07	; 7
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <MDIO_void_WritePin>:
void MDIO_void_WritePin(u8 A_u8_PortNumber, u8 A_u8_PinNumber, u8 A_u8_PinValue)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	27 97       	sbiw	r28, 0x07	; 7
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	6a 83       	std	Y+2, r22	; 0x02
    1328:	4b 83       	std	Y+3, r20	; 0x03
	if(DIO_u8_HIGH == A_u8_PinValue)
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	09 f0       	breq	.+2      	; 0x1332 <MDIO_void_WritePin+0x22>
    1330:	6f c0       	rjmp	.+222    	; 0x1410 <MDIO_void_WritePin+0x100>
	{
		switch(A_u8_PortNumber)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3f 83       	std	Y+7, r19	; 0x07
    133a:	2e 83       	std	Y+6, r18	; 0x06
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	9f 81       	ldd	r25, Y+7	; 0x07
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	49 f1       	breq	.+82     	; 0x1398 <MDIO_void_WritePin+0x88>
    1346:	2e 81       	ldd	r18, Y+6	; 0x06
    1348:	3f 81       	ldd	r19, Y+7	; 0x07
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	2c f4       	brge	.+10     	; 0x135a <MDIO_void_WritePin+0x4a>
    1350:	8e 81       	ldd	r24, Y+6	; 0x06
    1352:	9f 81       	ldd	r25, Y+7	; 0x07
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	61 f0       	breq	.+24     	; 0x1370 <MDIO_void_WritePin+0x60>
    1358:	d2 c0       	rjmp	.+420    	; 0x14fe <MDIO_void_WritePin+0x1ee>
    135a:	2e 81       	ldd	r18, Y+6	; 0x06
    135c:	3f 81       	ldd	r19, Y+7	; 0x07
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	71 f1       	breq	.+92     	; 0x13c0 <MDIO_void_WritePin+0xb0>
    1364:	8e 81       	ldd	r24, Y+6	; 0x06
    1366:	9f 81       	ldd	r25, Y+7	; 0x07
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	e9 f1       	breq	.+122    	; 0x13e8 <MDIO_void_WritePin+0xd8>
    136e:	c7 c0       	rjmp	.+398    	; 0x14fe <MDIO_void_WritePin+0x1ee>
		{
		case DIO_u8_PORTA: SET_BIT(DIO_u8_PORTA_REG,A_u8_PinNumber); break;
    1370:	ab e3       	ldi	r26, 0x3B	; 59
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	eb e3       	ldi	r30, 0x3B	; 59
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <MDIO_void_WritePin+0x7e>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <MDIO_void_WritePin+0x7a>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	b3 c0       	rjmp	.+358    	; 0x14fe <MDIO_void_WritePin+0x1ee>
		case DIO_u8_PORTB: SET_BIT(DIO_u8_PORTB_REG,A_u8_PinNumber); break;
    1398:	a8 e3       	ldi	r26, 0x38	; 56
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e3       	ldi	r30, 0x38	; 56
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <MDIO_void_WritePin+0xa6>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <MDIO_void_WritePin+0xa2>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	9f c0       	rjmp	.+318    	; 0x14fe <MDIO_void_WritePin+0x1ee>
		case DIO_u8_PORTC: SET_BIT(DIO_u8_PORTC_REG,A_u8_PinNumber); break;
    13c0:	a5 e3       	ldi	r26, 0x35	; 53
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e3       	ldi	r30, 0x35	; 53
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <MDIO_void_WritePin+0xce>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <MDIO_void_WritePin+0xca>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	8b c0       	rjmp	.+278    	; 0x14fe <MDIO_void_WritePin+0x1ee>
		case DIO_u8_PORTD: SET_BIT(DIO_u8_PORTD_REG,A_u8_PinNumber); break;
    13e8:	a2 e3       	ldi	r26, 0x32	; 50
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <MDIO_void_WritePin+0xf6>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <MDIO_void_WritePin+0xf2>
    140a:	84 2b       	or	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	77 c0       	rjmp	.+238    	; 0x14fe <MDIO_void_WritePin+0x1ee>
		default: break;
		}
	}
	else if(DIO_u8_LOW == A_u8_PinValue)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 23       	and	r24, r24
    1414:	09 f0       	breq	.+2      	; 0x1418 <MDIO_void_WritePin+0x108>
    1416:	73 c0       	rjmp	.+230    	; 0x14fe <MDIO_void_WritePin+0x1ee>
	{
		switch(A_u8_PortNumber)
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	3d 83       	std	Y+5, r19	; 0x05
    1420:	2c 83       	std	Y+4, r18	; 0x04
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	59 f1       	breq	.+86     	; 0x1482 <MDIO_void_WritePin+0x172>
    142c:	2c 81       	ldd	r18, Y+4	; 0x04
    142e:	3d 81       	ldd	r19, Y+5	; 0x05
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	2c f4       	brge	.+10     	; 0x1440 <MDIO_void_WritePin+0x130>
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	69 f0       	breq	.+26     	; 0x1458 <MDIO_void_WritePin+0x148>
    143e:	5f c0       	rjmp	.+190    	; 0x14fe <MDIO_void_WritePin+0x1ee>
    1440:	2c 81       	ldd	r18, Y+4	; 0x04
    1442:	3d 81       	ldd	r19, Y+5	; 0x05
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	89 f1       	breq	.+98     	; 0x14ac <MDIO_void_WritePin+0x19c>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	91 05       	cpc	r25, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <MDIO_void_WritePin+0x146>
    1454:	40 c0       	rjmp	.+128    	; 0x14d6 <MDIO_void_WritePin+0x1c6>
    1456:	53 c0       	rjmp	.+166    	; 0x14fe <MDIO_void_WritePin+0x1ee>
		{
		case DIO_u8_PORTA: CLR_BIT(DIO_u8_PORTA_REG,A_u8_PinNumber); break;
    1458:	ab e3       	ldi	r26, 0x3B	; 59
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	eb e3       	ldi	r30, 0x3B	; 59
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <MDIO_void_WritePin+0x166>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <MDIO_void_WritePin+0x162>
    147a:	80 95       	com	r24
    147c:	84 23       	and	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	3e c0       	rjmp	.+124    	; 0x14fe <MDIO_void_WritePin+0x1ee>
		case DIO_u8_PORTB: CLR_BIT(DIO_u8_PORTB_REG,A_u8_PinNumber); break;
    1482:	a8 e3       	ldi	r26, 0x38	; 56
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e8 e3       	ldi	r30, 0x38	; 56
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <MDIO_void_WritePin+0x190>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <MDIO_void_WritePin+0x18c>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	29 c0       	rjmp	.+82     	; 0x14fe <MDIO_void_WritePin+0x1ee>
		case DIO_u8_PORTC: CLR_BIT(DIO_u8_PORTC_REG,A_u8_PinNumber); break;
    14ac:	a5 e3       	ldi	r26, 0x35	; 53
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e3       	ldi	r30, 0x35	; 53
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <MDIO_void_WritePin+0x1ba>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <MDIO_void_WritePin+0x1b6>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	14 c0       	rjmp	.+40     	; 0x14fe <MDIO_void_WritePin+0x1ee>
		case DIO_u8_PORTD: CLR_BIT(DIO_u8_PORTD_REG,A_u8_PinNumber); break;
    14d6:	a2 e3       	ldi	r26, 0x32	; 50
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e2 e3       	ldi	r30, 0x32	; 50
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <MDIO_void_WritePin+0x1e4>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <MDIO_void_WritePin+0x1e0>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    14fe:	27 96       	adiw	r28, 0x07	; 7
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <MDIO_u8_ReadPin>:
u8 MDIO_u8_ReadPin(u8 A_u8_PortNumber, u8 A_u8_PinNumber)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <MDIO_u8_ReadPin+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <MDIO_u8_ReadPin+0x8>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8a 83       	std	Y+2, r24	; 0x02
    1520:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8_BitValue = 0;
    1522:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8_PortNumber)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3d 83       	std	Y+5, r19	; 0x05
    152c:	2c 83       	std	Y+4, r18	; 0x04
    152e:	4c 81       	ldd	r20, Y+4	; 0x04
    1530:	5d 81       	ldd	r21, Y+5	; 0x05
    1532:	41 30       	cpi	r20, 0x01	; 1
    1534:	51 05       	cpc	r21, r1
    1536:	41 f1       	breq	.+80     	; 0x1588 <MDIO_u8_ReadPin+0x78>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	82 30       	cpi	r24, 0x02	; 2
    153e:	91 05       	cpc	r25, r1
    1540:	34 f4       	brge	.+12     	; 0x154e <MDIO_u8_ReadPin+0x3e>
    1542:	2c 81       	ldd	r18, Y+4	; 0x04
    1544:	3d 81       	ldd	r19, Y+5	; 0x05
    1546:	21 15       	cp	r18, r1
    1548:	31 05       	cpc	r19, r1
    154a:	61 f0       	breq	.+24     	; 0x1564 <MDIO_u8_ReadPin+0x54>
    154c:	52 c0       	rjmp	.+164    	; 0x15f2 <MDIO_u8_ReadPin+0xe2>
    154e:	4c 81       	ldd	r20, Y+4	; 0x04
    1550:	5d 81       	ldd	r21, Y+5	; 0x05
    1552:	42 30       	cpi	r20, 0x02	; 2
    1554:	51 05       	cpc	r21, r1
    1556:	51 f1       	breq	.+84     	; 0x15ac <MDIO_u8_ReadPin+0x9c>
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	91 05       	cpc	r25, r1
    1560:	b9 f1       	breq	.+110    	; 0x15d0 <MDIO_u8_ReadPin+0xc0>
    1562:	47 c0       	rjmp	.+142    	; 0x15f2 <MDIO_u8_ReadPin+0xe2>
	{
	case DIO_u8_PORTA: L_u8_BitValue = GET_BIT(DIO_u8_PINA_REG,A_u8_PinNumber); break;
    1564:	e9 e3       	ldi	r30, 0x39	; 57
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a9 01       	movw	r20, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <MDIO_u8_ReadPin+0x6c>
    1578:	55 95       	asr	r21
    157a:	47 95       	ror	r20
    157c:	8a 95       	dec	r24
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <MDIO_u8_ReadPin+0x68>
    1580:	ca 01       	movw	r24, r20
    1582:	81 70       	andi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	35 c0       	rjmp	.+106    	; 0x15f2 <MDIO_u8_ReadPin+0xe2>
	case DIO_u8_PORTB: L_u8_BitValue = GET_BIT(DIO_u8_PINB_REG,A_u8_PinNumber); break;
    1588:	e6 e3       	ldi	r30, 0x36	; 54
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a9 01       	movw	r20, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <MDIO_u8_ReadPin+0x90>
    159c:	55 95       	asr	r21
    159e:	47 95       	ror	r20
    15a0:	8a 95       	dec	r24
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <MDIO_u8_ReadPin+0x8c>
    15a4:	ca 01       	movw	r24, r20
    15a6:	81 70       	andi	r24, 0x01	; 1
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	23 c0       	rjmp	.+70     	; 0x15f2 <MDIO_u8_ReadPin+0xe2>
	case DIO_u8_PORTC: L_u8_BitValue = GET_BIT(DIO_u8_PINC_REG,A_u8_PinNumber); break;
    15ac:	e3 e3       	ldi	r30, 0x33	; 51
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a9 01       	movw	r20, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <MDIO_u8_ReadPin+0xb4>
    15c0:	55 95       	asr	r21
    15c2:	47 95       	ror	r20
    15c4:	8a 95       	dec	r24
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <MDIO_u8_ReadPin+0xb0>
    15c8:	ca 01       	movw	r24, r20
    15ca:	81 70       	andi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	11 c0       	rjmp	.+34     	; 0x15f2 <MDIO_u8_ReadPin+0xe2>
	case DIO_u8_PORTD: L_u8_BitValue = GET_BIT(DIO_u8_PIND_REG,A_u8_PinNumber); break;
    15d0:	e0 e3       	ldi	r30, 0x30	; 48
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a9 01       	movw	r20, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <MDIO_u8_ReadPin+0xd8>
    15e4:	55 95       	asr	r21
    15e6:	47 95       	ror	r20
    15e8:	8a 95       	dec	r24
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <MDIO_u8_ReadPin+0xd4>
    15ec:	ca 01       	movw	r24, r20
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01
	default: break;
	}
	return L_u8_BitValue;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <MDIO_void_TogglePin>:
void MDIO_void_TogglePin(u8 A_u8_PortNumber, u8 A_u8_PinNumber)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	00 d0       	rcall	.+0      	; 0x160a <MDIO_void_TogglePin+0x6>
    160a:	00 d0       	rcall	.+0      	; 0x160c <MDIO_void_TogglePin+0x8>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_PortNumber)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3c 83       	std	Y+4, r19	; 0x04
    161c:	2b 83       	std	Y+3, r18	; 0x03
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	49 f1       	breq	.+82     	; 0x167a <MDIO_void_TogglePin+0x76>
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <MDIO_void_TogglePin+0x38>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 f0       	breq	.+24     	; 0x1652 <MDIO_void_TogglePin+0x4e>
    163a:	5a c0       	rjmp	.+180    	; 0x16f0 <MDIO_void_TogglePin+0xec>
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	71 f1       	breq	.+92     	; 0x16a2 <MDIO_void_TogglePin+0x9e>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	e9 f1       	breq	.+122    	; 0x16ca <MDIO_void_TogglePin+0xc6>
    1650:	4f c0       	rjmp	.+158    	; 0x16f0 <MDIO_void_TogglePin+0xec>
	{
	case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG,A_u8_PinNumber); break;
    1652:	ab e3       	ldi	r26, 0x3B	; 59
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	eb e3       	ldi	r30, 0x3B	; 59
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <MDIO_void_TogglePin+0x6c>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <MDIO_void_TogglePin+0x68>
    1674:	84 27       	eor	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	3b c0       	rjmp	.+118    	; 0x16f0 <MDIO_void_TogglePin+0xec>
	case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTB_REG,A_u8_PinNumber); break;
    167a:	a8 e3       	ldi	r26, 0x38	; 56
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e8 e3       	ldi	r30, 0x38	; 56
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <MDIO_void_TogglePin+0x94>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <MDIO_void_TogglePin+0x90>
    169c:	84 27       	eor	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	27 c0       	rjmp	.+78     	; 0x16f0 <MDIO_void_TogglePin+0xec>
	case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTC_REG,A_u8_PinNumber); break;
    16a2:	a5 e3       	ldi	r26, 0x35	; 53
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <MDIO_void_TogglePin+0xbc>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <MDIO_void_TogglePin+0xb8>
    16c4:	84 27       	eor	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	13 c0       	rjmp	.+38     	; 0x16f0 <MDIO_void_TogglePin+0xec>
	case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTD_REG,A_u8_PinNumber); break;
    16ca:	a2 e3       	ldi	r26, 0x32	; 50
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e2 e3       	ldi	r30, 0x32	; 50
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <MDIO_void_TogglePin+0xe4>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <MDIO_void_TogglePin+0xe0>
    16ec:	84 27       	eor	r24, r20
    16ee:	8c 93       	st	X, r24
	default: break;
	}
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <MDIO_voidSetPortDirection>:
void MDIO_voidSetPortDirection(u8 Copy_u8PortNumber ,u8 Copy_u8PortDirection)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <MDIO_voidSetPortDirection+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <MDIO_voidSetPortDirection+0x8>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNumber)
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	3c 83       	std	Y+4, r19	; 0x04
    1716:	2b 83       	std	Y+3, r18	; 0x03
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	d1 f0       	breq	.+52     	; 0x1756 <MDIO_voidSetPortDirection+0x58>
    1722:	2b 81       	ldd	r18, Y+3	; 0x03
    1724:	3c 81       	ldd	r19, Y+4	; 0x04
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	2c f4       	brge	.+10     	; 0x1736 <MDIO_voidSetPortDirection+0x38>
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	61 f0       	breq	.+24     	; 0x174c <MDIO_voidSetPortDirection+0x4e>
    1734:	1e c0       	rjmp	.+60     	; 0x1772 <MDIO_voidSetPortDirection+0x74>
    1736:	2b 81       	ldd	r18, Y+3	; 0x03
    1738:	3c 81       	ldd	r19, Y+4	; 0x04
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	81 f0       	breq	.+32     	; 0x1760 <MDIO_voidSetPortDirection+0x62>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	91 05       	cpc	r25, r1
    1748:	81 f0       	breq	.+32     	; 0x176a <MDIO_voidSetPortDirection+0x6c>
    174a:	13 c0       	rjmp	.+38     	; 0x1772 <MDIO_voidSetPortDirection+0x74>
	{
	case DIO_u8_PORTA: DIO_u8_DDRA_REG = Copy_u8PortDirection; break;
    174c:	ea e3       	ldi	r30, 0x3A	; 58
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	80 83       	st	Z, r24
    1754:	0e c0       	rjmp	.+28     	; 0x1772 <MDIO_voidSetPortDirection+0x74>
	case DIO_u8_PORTB: DIO_u8_DDRB_REG = Copy_u8PortDirection; break;
    1756:	e7 e3       	ldi	r30, 0x37	; 55
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	80 83       	st	Z, r24
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <MDIO_voidSetPortDirection+0x74>
	case DIO_u8_PORTC: DIO_u8_DDRC_REG = Copy_u8PortDirection; break;
    1760:	e4 e3       	ldi	r30, 0x34	; 52
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	80 83       	st	Z, r24
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <MDIO_voidSetPortDirection+0x74>
	case DIO_u8_PORTD: DIO_u8_DDRD_REG = Copy_u8PortDirection; break;
    176a:	e1 e3       	ldi	r30, 0x31	; 49
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	80 83       	st	Z, r24
	}
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <MDIO_voidWritePort>:
void MDIO_voidWritePort(u8 Copy_u8PortNumber ,u8 Copy_u8PortValue)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <MDIO_voidWritePort+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <MDIO_voidWritePort+0x8>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNumber)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3c 83       	std	Y+4, r19	; 0x04
    1798:	2b 83       	std	Y+3, r18	; 0x03
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 05       	cpc	r25, r1
    17a2:	d1 f0       	breq	.+52     	; 0x17d8 <MDIO_voidWritePort+0x58>
    17a4:	2b 81       	ldd	r18, Y+3	; 0x03
    17a6:	3c 81       	ldd	r19, Y+4	; 0x04
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <MDIO_voidWritePort+0x38>
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	61 f0       	breq	.+24     	; 0x17ce <MDIO_voidWritePort+0x4e>
    17b6:	1e c0       	rjmp	.+60     	; 0x17f4 <MDIO_voidWritePort+0x74>
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	81 f0       	breq	.+32     	; 0x17e2 <MDIO_voidWritePort+0x62>
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	91 05       	cpc	r25, r1
    17ca:	81 f0       	breq	.+32     	; 0x17ec <MDIO_voidWritePort+0x6c>
    17cc:	13 c0       	rjmp	.+38     	; 0x17f4 <MDIO_voidWritePort+0x74>
	{
	case DIO_u8_PORTA: DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    17ce:	eb e3       	ldi	r30, 0x3B	; 59
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	80 83       	st	Z, r24
    17d6:	0e c0       	rjmp	.+28     	; 0x17f4 <MDIO_voidWritePort+0x74>
	case DIO_u8_PORTB: DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    17d8:	e8 e3       	ldi	r30, 0x38	; 56
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	80 83       	st	Z, r24
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <MDIO_voidWritePort+0x74>
	case DIO_u8_PORTC: DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    17e2:	e5 e3       	ldi	r30, 0x35	; 53
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	80 83       	st	Z, r24
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <MDIO_voidWritePort+0x74>
	case DIO_u8_PORTD: DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    17ec:	e2 e3       	ldi	r30, 0x32	; 50
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	80 83       	st	Z, r24

	}
}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <MUART_voidInit>:
#define F_CPU 8000000UL /*frequancy of mc*/
#include <util/delay.h>
#include <stdlib.h>

void MUART_voidInit (void)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	60 97       	sbiw	r28, 0x10	; 16
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
	/*Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	#if    BAUD_RATE == 2400   || BAUD_RATE == 4800   || BAUD_RATE == 9600   || BAUD_RATE == 14400  || \
	       BAUD_RATE == 19200  || BAUD_RATE == 28800  || BAUD_RATE == 38400  || BAUD_RATE == 57600  || \
		   BAUD_RATE == 76800  || BAUD_RATE == 115200 || BAUD_RATE == 230400 || BAUD_RATE == 250000 || \
		   BAUD_RATE == 500000 || BAUD_RATE == 1000000
	                     UBRR  = (F_CPU/(16*(u32)BAUD_RATE))-1 ;
    1816:	83 e3       	ldi	r24, 0x33	; 51
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	98 8b       	std	Y+16, r25	; 0x10
    181c:	8f 87       	std	Y+15, r24	; 0x0f
						 UBRRH = (u8)(UBRR>>8);
    181e:	e0 e4       	ldi	r30, 0x40	; 64
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	8f 85       	ldd	r24, Y+15	; 0x0f
    1824:	98 89       	ldd	r25, Y+16	; 0x10
    1826:	89 2f       	mov	r24, r25
    1828:	99 27       	eor	r25, r25
    182a:	80 83       	st	Z, r24
						 UBRRL = (u8)(UBRR);
    182c:	e9 e2       	ldi	r30, 0x29	; 41
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8f 85       	ldd	r24, Y+15	; 0x0f
    1832:	80 83       	st	Z, r24
	#else 
	     #error "select correct option of baud rate"
	#endif
	
	/*Enable USART Sender*/
	SET_BIT(UCSRB , TXEN) ;
    1834:	aa e2       	ldi	r26, 0x2A	; 42
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ea e2       	ldi	r30, 0x2A	; 42
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	88 60       	ori	r24, 0x08	; 8
    1840:	8c 93       	st	X, r24
	
	/*Enable USART Receiver*/
	SET_BIT(UCSRB , RXEN) ;
    1842:	aa e2       	ldi	r26, 0x2A	; 42
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ea e2       	ldi	r30, 0x2A	; 42
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 61       	ori	r24, 0x10	; 16
    184e:	8c 93       	st	X, r24
	#elif NUMBER_OF_DATA_BITS == 6 /*URSEL = 1 , UCSZ2 = 0 , UCSZ1 = 0 , UCSZ0 = 1*/
	        UCSRC = (1<<URSEL) | (1<<UCSZ0) ;
	#elif NUMBER_OF_DATA_BITS == 7 /*URSEL = 1 , UCSZ2 = 0 , UCSZ1 = 1 , UCSZ0 = 0*/
	        UCSRC = (1<<URSEL) | (1<<UCSZ1) ;
	#elif NUMBER_OF_DATA_BITS == 8 /*URSEL = 1 , UCSZ2 = 0 , UCSZ1 = 1 , UCSZ0 = 1*/
	        UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) ; 
    1850:	e0 e4       	ldi	r30, 0x40	; 64
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	86 e8       	ldi	r24, 0x86	; 134
    1856:	80 83       	st	Z, r24
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a6 e9       	ldi	r26, 0x96	; 150
    185e:	b3 e4       	ldi	r27, 0x43	; 67
    1860:	8b 87       	std	Y+11, r24	; 0x0b
    1862:	9c 87       	std	Y+12, r25	; 0x0c
    1864:	ad 87       	std	Y+13, r26	; 0x0d
    1866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1868:	6b 85       	ldd	r22, Y+11	; 0x0b
    186a:	7c 85       	ldd	r23, Y+12	; 0x0c
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a ef       	ldi	r20, 0xFA	; 250
    1876:	54 e4       	ldi	r21, 0x44	; 68
    1878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	8f 83       	std	Y+7, r24	; 0x07
    1882:	98 87       	std	Y+8, r25	; 0x08
    1884:	a9 87       	std	Y+9, r26	; 0x09
    1886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1888:	6f 81       	ldd	r22, Y+7	; 0x07
    188a:	78 85       	ldd	r23, Y+8	; 0x08
    188c:	89 85       	ldd	r24, Y+9	; 0x09
    188e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <MUART_voidInit+0xa8>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <MUART_voidInit+0x126>
	else if (__tmp > 65535)
    18aa:	6f 81       	ldd	r22, Y+7	; 0x07
    18ac:	78 85       	ldd	r23, Y+8	; 0x08
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	57 e4       	ldi	r21, 0x47	; 71
    18ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	4c f5       	brge	.+82     	; 0x1914 <MUART_voidInit+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <MUART_voidInit+0x108>
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <MUART_voidInit+0xf6>
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	8d 81       	ldd	r24, Y+5	; 0x05
    1902:	9e 81       	ldd	r25, Y+6	; 0x06
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	69 f7       	brne	.-38     	; 0x18ec <MUART_voidInit+0xea>
    1912:	14 c0       	rjmp	.+40     	; 0x193c <MUART_voidInit+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9e 83       	std	Y+6, r25	; 0x06
    1926:	8d 83       	std	Y+5, r24	; 0x05
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
    192a:	9e 81       	ldd	r25, Y+6	; 0x06
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <MUART_voidInit+0x132>
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
	     #error "select correct option of NUMBER_OF_DATA_BITS "
	#endif
	
	/*wait until all other peripherals be initialized*/
	_delay_ms(300) ;
}
    193c:	60 96       	adiw	r28, 0x10	; 16
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <MUART_voidSendData>:

void MUART_voidSendData(u8 A_u8Data)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	0f 92       	push	r0
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
    195a:	eb e2       	ldi	r30, 0x2B	; 43
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	80 72       	andi	r24, 0x20	; 32
    1966:	90 70       	andi	r25, 0x00	; 0
    1968:	95 95       	asr	r25
    196a:	87 95       	ror	r24
    196c:	95 95       	asr	r25
    196e:	87 95       	ror	r24
    1970:	95 95       	asr	r25
    1972:	87 95       	ror	r24
    1974:	95 95       	asr	r25
    1976:	87 95       	ror	r24
    1978:	95 95       	asr	r25
    197a:	87 95       	ror	r24
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f3       	breq	.-38     	; 0x195a <MUART_voidSendData+0xc>
	
	/*Put data to UDR transmit buffer transmit*/
	UDR=A_u8Data ;
    1980:	ec e2       	ldi	r30, 0x2C	; 44
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	80 83       	st	Z, r24
}
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <MUART_voidSendString>:

void MUART_voidSendString(u8* A_pu8Str)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <MUART_voidSendString+0x6>
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	0a c0       	rjmp	.+20     	; 0x19b4 <MUART_voidSendString+0x24>
	while(*A_pu8Str != '\0')
	{
		MUART_voidSendData(*A_pu8Str);
    19a0:	e9 81       	ldd	r30, Y+1	; 0x01
    19a2:	fa 81       	ldd	r31, Y+2	; 0x02
    19a4:	80 81       	ld	r24, Z
    19a6:	0e 94 a7 0c 	call	0x194e	; 0x194e <MUART_voidSendData>
		A_pu8Str++ ;
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
	UDR=A_u8Data ;
}

void MUART_voidSendString(u8* A_pu8Str)
{
	while(*A_pu8Str != '\0')
    19b4:	e9 81       	ldd	r30, Y+1	; 0x01
    19b6:	fa 81       	ldd	r31, Y+2	; 0x02
    19b8:	80 81       	ld	r24, Z
    19ba:	88 23       	and	r24, r24
    19bc:	89 f7       	brne	.-30     	; 0x19a0 <MUART_voidSendString+0x10>
	{
		MUART_voidSendData(*A_pu8Str);
		A_pu8Str++ ;
	}
	MUART_voidSendData('\n');
    19be:	8a e0       	ldi	r24, 0x0A	; 10
    19c0:	0e 94 a7 0c 	call	0x194e	; 0x194e <MUART_voidSendData>
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <MUART_voidSendIntNumber>:

void MUART_voidSendIntNumber(u32 A_u32Number)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	a4 97       	sbiw	r28, 0x24	; 36
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	69 a3       	std	Y+33, r22	; 0x21
    19e4:	7a a3       	std	Y+34, r23	; 0x22
    19e6:	8b a3       	std	Y+35, r24	; 0x23
    19e8:	9c a3       	std	Y+36, r25	; 0x24
	/**array to stored conversion character*/
	s8* L_Ps8String [16] = {0} ;
    19ea:	80 e2       	ldi	r24, 0x20	; 32
    19ec:	fe 01       	movw	r30, r28
    19ee:	31 96       	adiw	r30, 0x01	; 1
    19f0:	df 01       	movw	r26, r30
    19f2:	98 2f       	mov	r25, r24
    19f4:	1d 92       	st	X+, r1
    19f6:	9a 95       	dec	r25
    19f8:	e9 f7       	brne	.-6      	; 0x19f4 <MUART_voidSendIntNumber+0x26>

	/** convert integer to string*/
	ltoa (A_u32Number , (s8*)L_Ps8String , 10) ;
    19fa:	89 a1       	ldd	r24, Y+33	; 0x21
    19fc:	9a a1       	ldd	r25, Y+34	; 0x22
    19fe:	ab a1       	ldd	r26, Y+35	; 0x23
    1a00:	bc a1       	ldd	r27, Y+36	; 0x24
    1a02:	9e 01       	movw	r18, r28
    1a04:	2f 5f       	subi	r18, 0xFF	; 255
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	2a e0       	ldi	r18, 0x0A	; 10
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	0e 94 6e 33 	call	0x66dc	; 0x66dc <ltoa>

	/**display number after convesion*/
	MUART_voidSendString ((u8*)L_Ps8String) ;
    1a16:	ce 01       	movw	r24, r28
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <MUART_voidSendString>
}
    1a1e:	a4 96       	adiw	r28, 0x24	; 36
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <MUART_u8ReceiveData>:

u8 MUART_u8ReceiveData(void)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
    1a38:	eb e2       	ldi	r30, 0x2B	; 43
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 1f       	adc	r24, r24
    1a40:	88 27       	eor	r24, r24
    1a42:	88 1f       	adc	r24, r24
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	90 70       	andi	r25, 0x00	; 0
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	a9 f3       	breq	.-22     	; 0x1a38 <MUART_u8ReceiveData+0x8>
	
	/*Receive data from UDR receive buffer*/
	return UDR ;
    1a4e:	ec e2       	ldi	r30, 0x2C	; 44
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <MUART_voidReceiveString>:

void MUART_voidReceiveString(u8 A_u8Str[])
{
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <MUART_voidReceiveString+0xa>
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <MUART_voidReceiveString+0xc>
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <MUART_voidReceiveString+0xe>
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
	u32 L_u32Index = 0 ;
    1a70:	19 82       	std	Y+1, r1	; 0x01
    1a72:	1a 82       	std	Y+2, r1	; 0x02
    1a74:	1b 82       	std	Y+3, r1	; 0x03
    1a76:	1c 82       	std	Y+4, r1	; 0x04
	while (1)
	{
		A_u8Str[L_u32Index]=MUART_u8ReceiveData();
    1a78:	29 81       	ldd	r18, Y+1	; 0x01
    1a7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	8c 01       	movw	r16, r24
    1a82:	02 0f       	add	r16, r18
    1a84:	13 1f       	adc	r17, r19
    1a86:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <MUART_u8ReceiveData>
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	80 83       	st	Z, r24
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
    1a8e:	29 81       	ldd	r18, Y+1	; 0x01
    1a90:	3a 81       	ldd	r19, Y+2	; 0x02
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	fc 01       	movw	r30, r24
    1a98:	e2 0f       	add	r30, r18
    1a9a:	f3 1f       	adc	r31, r19
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8a 30       	cpi	r24, 0x0A	; 10
    1aa0:	51 f0       	breq	.+20     	; 0x1ab6 <MUART_voidReceiveString+0x5c>
    1aa2:	29 81       	ldd	r18, Y+1	; 0x01
    1aa4:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	fc 01       	movw	r30, r24
    1aac:	e2 0f       	add	r30, r18
    1aae:	f3 1f       	adc	r31, r19
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8d 30       	cpi	r24, 0x0D	; 13
    1ab4:	99 f4       	brne	.+38     	; 0x1adc <MUART_voidReceiveString+0x82>
		{
			A_u8Str[L_u32Index]='\0';
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aba:	2d 81       	ldd	r18, Y+5	; 0x05
    1abc:	3e 81       	ldd	r19, Y+6	; 0x06
    1abe:	f9 01       	movw	r30, r18
    1ac0:	e8 0f       	add	r30, r24
    1ac2:	f9 1f       	adc	r31, r25
    1ac4:	10 82       	st	Z, r1
			break;
		}
		L_u32Index ++ ;
	}
}
    1ac6:	26 96       	adiw	r28, 0x06	; 6
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
		{
			A_u8Str[L_u32Index]='\0';
			break;
		}
		L_u32Index ++ ;
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ae2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	a1 1d       	adc	r26, r1
    1ae8:	b1 1d       	adc	r27, r1
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	ab 83       	std	Y+3, r26	; 0x03
    1af0:	bc 83       	std	Y+4, r27	; 0x04
    1af2:	c2 cf       	rjmp	.-124    	; 0x1a78 <MUART_voidReceiveString+0x1e>

00001af4 <MUART_voidReciveIntNumber>:
	}
}

u32 MUART_voidReciveIntNumber(void) 
{
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	cc 56       	subi	r28, 0x6C	; 108
    1b06:	d0 40       	sbci	r29, 0x00	; 0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
	u32 L_u32Index = 0 ;
    1b12:	1d 82       	std	Y+5, r1	; 0x05
    1b14:	1e 82       	std	Y+6, r1	; 0x06
    1b16:	1f 82       	std	Y+7, r1	; 0x07
    1b18:	18 86       	std	Y+8, r1	; 0x08
	u32 A_u32Number ;
	u8  A_u8Str [100] ;
	while (1)
	{
		A_u8Str[L_u32Index]=MUART_u8ReceiveData();
    1b1a:	ed 80       	ldd	r14, Y+5	; 0x05
    1b1c:	fe 80       	ldd	r15, Y+6	; 0x06
    1b1e:	0f 81       	ldd	r16, Y+7	; 0x07
    1b20:	18 85       	ldd	r17, Y+8	; 0x08
    1b22:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <MUART_u8ReceiveData>
    1b26:	28 2f       	mov	r18, r24
    1b28:	ce 01       	movw	r24, r28
    1b2a:	09 96       	adiw	r24, 0x09	; 9
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	ee 0d       	add	r30, r14
    1b30:	ff 1d       	adc	r31, r15
    1b32:	20 83       	st	Z, r18
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	af 81       	ldd	r26, Y+7	; 0x07
    1b3a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b3c:	9e 01       	movw	r18, r28
    1b3e:	27 5f       	subi	r18, 0xF7	; 247
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
    1b42:	f9 01       	movw	r30, r18
    1b44:	e8 0f       	add	r30, r24
    1b46:	f9 1f       	adc	r31, r25
    1b48:	80 81       	ld	r24, Z
    1b4a:	8a 30       	cpi	r24, 0x0A	; 10
    1b4c:	69 f0       	breq	.+26     	; 0x1b68 <MUART_voidReciveIntNumber+0x74>
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	af 81       	ldd	r26, Y+7	; 0x07
    1b54:	b8 85       	ldd	r27, Y+8	; 0x08
    1b56:	9e 01       	movw	r18, r28
    1b58:	27 5f       	subi	r18, 0xF7	; 247
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	e8 0f       	add	r30, r24
    1b60:	f9 1f       	adc	r31, r25
    1b62:	80 81       	ld	r24, Z
    1b64:	8d 30       	cpi	r24, 0x0D	; 13
    1b66:	49 f5       	brne	.+82     	; 0x1bba <MUART_voidReciveIntNumber+0xc6>
		{
			A_u8Str[L_u32Index]='\0';
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	af 81       	ldd	r26, Y+7	; 0x07
    1b6e:	b8 85       	ldd	r27, Y+8	; 0x08
    1b70:	9e 01       	movw	r18, r28
    1b72:	27 5f       	subi	r18, 0xF7	; 247
    1b74:	3f 4f       	sbci	r19, 0xFF	; 255
    1b76:	f9 01       	movw	r30, r18
    1b78:	e8 0f       	add	r30, r24
    1b7a:	f9 1f       	adc	r31, r25
    1b7c:	10 82       	st	Z, r1
			break;
		}
		L_u32Index ++ ;
	}
	A_u32Number = atol(A_u8Str) ;
    1b7e:	ce 01       	movw	r24, r28
    1b80:	09 96       	adiw	r24, 0x09	; 9
    1b82:	0e 94 47 33 	call	0x668e	; 0x668e <atol>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	9a 83       	std	Y+2, r25	; 0x02
    1b8e:	ab 83       	std	Y+3, r26	; 0x03
    1b90:	bc 83       	std	Y+4, r27	; 0x04
	return A_u32Number ;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	ab 81       	ldd	r26, Y+3	; 0x03
    1b98:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	c4 59       	subi	r28, 0x94	; 148
    1ba0:	df 4f       	sbci	r29, 0xFF	; 255
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	08 95       	ret
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
		{
			A_u8Str[L_u32Index]='\0';
			break;
		}
		L_u32Index ++ ;
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	af 81       	ldd	r26, Y+7	; 0x07
    1bc0:	b8 85       	ldd	r27, Y+8	; 0x08
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	a1 1d       	adc	r26, r1
    1bc6:	b1 1d       	adc	r27, r1
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	af 83       	std	Y+7, r26	; 0x07
    1bce:	b8 87       	std	Y+8, r27	; 0x08
    1bd0:	a4 cf       	rjmp	.-184    	; 0x1b1a <MUART_voidReciveIntNumber+0x26>

00001bd2 <MTimer_voidInt>:
static u32 LS_u32Counter = 0	;
static u16 L_u16PreloadValue	;
u8 G_u8Timer2Flag				;

void MTimer_voidInt (void)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62

	/** Enable global interrupt flag */
	    SET_BIT(SREG, I_BIT);
    1bda:	af e5       	ldi	r26, 0x5F	; 95
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ef e5       	ldi	r30, 0x5F	; 95
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	80 68       	ori	r24, 0x80	; 128
    1be6:	8c 93       	st	X, r24
			#error "select correct mode of TIMER0_MODE"
		#endif

	#elif TIMER0 == DISABLE0
	/** NO clk source (Timer0 stopped) */
	    CLR_BIT(TCCR0 , CS00) ;
    1be8:	a3 e5       	ldi	r26, 0x53	; 83
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e3 e5       	ldi	r30, 0x53	; 83
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8e 7f       	andi	r24, 0xFE	; 254
    1bf4:	8c 93       	st	X, r24
	    CLR_BIT(TCCR0 , CS01) ;
    1bf6:	a3 e5       	ldi	r26, 0x53	; 83
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e3 e5       	ldi	r30, 0x53	; 83
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8d 7f       	andi	r24, 0xFD	; 253
    1c02:	8c 93       	st	X, r24
	    CLR_BIT(TCCR0 , CS02) ;
    1c04:	a3 e5       	ldi	r26, 0x53	; 83
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e3 e5       	ldi	r30, 0x53	; 83
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8b 7f       	andi	r24, 0xFB	; 251
    1c10:	8c 93       	st	X, r24
	    #if   TIMER2_PRESCALER == CLK_PS_1          /**clk = 8MHZ    */
		    SET_BIT(TCCR2 , CS20) ;
	        CLR_BIT(TCCR2 , CS21) ;
	        CLR_BIT(TCCR2 , CS22) ;
	    #elif TIMER2_PRESCALER == CLK_PS_8          /**clk = 1MHZ    */
			CLR_BIT(TCCR2 , CS20) ;
    1c12:	a5 e4       	ldi	r26, 0x45	; 69
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e5 e4       	ldi	r30, 0x45	; 69
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8e 7f       	andi	r24, 0xFE	; 254
    1c1e:	8c 93       	st	X, r24
	        SET_BIT(TCCR2 , CS21) ;
    1c20:	a5 e4       	ldi	r26, 0x45	; 69
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e5 e4       	ldi	r30, 0x45	; 69
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	82 60       	ori	r24, 0x02	; 2
    1c2c:	8c 93       	st	X, r24
	        CLR_BIT(TCCR2 , CS22) ;
    1c2e:	a5 e4       	ldi	r26, 0x45	; 69
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e4       	ldi	r30, 0x45	; 69
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8b 7f       	andi	r24, 0xFB	; 251
    1c3a:	8c 93       	st	X, r24
			#error "select correct options of TIMER2_PRESCALER"
		#endif

		/**Timer/counter2 mode*/
		#if   TIMER2_MODE == NORMAL_MODE
		    CLR_BIT(TCCR2 , WGM20) ;/*Normal mode (over flow mode)*/
    1c3c:	a5 e4       	ldi	r26, 0x45	; 69
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e5 e4       	ldi	r30, 0x45	; 69
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 7b       	andi	r24, 0xBF	; 191
    1c48:	8c 93       	st	X, r24
		    CLR_BIT(TCCR2 , WGM21) ;
    1c4a:	a5 e4       	ldi	r26, 0x45	; 69
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e5 e4       	ldi	r30, 0x45	; 69
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	87 7f       	andi	r24, 0xF7	; 247
    1c56:	8c 93       	st	X, r24
			SET_BIT(TIMSK , TOIE2);/*Enable interrupt of over flow mode*/
    1c58:	a9 e5       	ldi	r26, 0x59	; 89
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e9 e5       	ldi	r30, 0x59	; 89
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 64       	ori	r24, 0x40	; 64
    1c64:	8c 93       	st	X, r24
        /*                         TIMER1                               */
        /****************************************************************/
	#if   TIMER1 == ENABLE1
	    /**set prescaller of Timer clk*/
	    #if   TIMER1_PRESCALER == CLK_PS_1          /**clk = 8MHZ    */
		    SET_BIT(TCCR1B , CS10) ;
    1c66:	ae e4       	ldi	r26, 0x4E	; 78
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ee e4       	ldi	r30, 0x4E	; 78
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	81 60       	ori	r24, 0x01	; 1
    1c72:	8c 93       	st	X, r24
	        CLR_BIT(TCCR1B , CS11) ;
    1c74:	ae e4       	ldi	r26, 0x4E	; 78
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ee e4       	ldi	r30, 0x4E	; 78
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8d 7f       	andi	r24, 0xFD	; 253
    1c80:	8c 93       	st	X, r24
	        CLR_BIT(TCCR1B , CS12) ;
    1c82:	ae e4       	ldi	r26, 0x4E	; 78
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ee e4       	ldi	r30, 0x4E	; 78
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	8b 7f       	andi	r24, 0xFB	; 251
    1c8e:	8c 93       	st	X, r24
			#error "select correct options of TIMER1_PRESCALER"
		#endif

		/**Timer/counter1 mode*/
		#if   TIMER1_MODE == NORMAL_MODE
		    CLR_BIT(TCCR1A , WGM10) ;/*Normal mode (over flow mode)*/
    1c90:	af e4       	ldi	r26, 0x4F	; 79
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ef e4       	ldi	r30, 0x4F	; 79
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	8e 7f       	andi	r24, 0xFE	; 254
    1c9c:	8c 93       	st	X, r24
		    CLR_BIT(TCCR1A , WGM11) ;
    1c9e:	af e4       	ldi	r26, 0x4F	; 79
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ef e4       	ldi	r30, 0x4F	; 79
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8d 7f       	andi	r24, 0xFD	; 253
    1caa:	8c 93       	st	X, r24
		    CLR_BIT(TCCR1B , WGM12) ;
    1cac:	ae e4       	ldi	r26, 0x4E	; 78
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ee e4       	ldi	r30, 0x4E	; 78
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	87 7f       	andi	r24, 0xF7	; 247
    1cb8:	8c 93       	st	X, r24
		    CLR_BIT(TCCR1B , WGM13) ;
    1cba:	ae e4       	ldi	r26, 0x4E	; 78
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	ee e4       	ldi	r30, 0x4E	; 78
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8f 7e       	andi	r24, 0xEF	; 239
    1cc6:	8c 93       	st	X, r24
			SET_BIT(TIMSK  , TOIE1) ;/*Enable interrupt of over flow mode*/
    1cc8:	a9 e5       	ldi	r26, 0x59	; 89
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e9 e5       	ldi	r30, 0x59	; 89
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	84 60       	ori	r24, 0x04	; 4
    1cd4:	8c 93       	st	X, r24
			#if ICU_ENABLE == ENABLE_ICU
				SET_BIT(TCCR1B , ICNC1) ;/*input capture noise cancler*/
    1cd6:	ae e4       	ldi	r26, 0x4E	; 78
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	ee e4       	ldi	r30, 0x4E	; 78
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 68       	ori	r24, 0x80	; 128
    1ce2:	8c 93       	st	X, r24
	    CLR_BIT(TCCR1B , CS11) ;
	    CLR_BIT(TCCR1B , CS12) ;
	#else
		#error "TIMER1 must be ENABLE1 or DISABLE1"
	#endif
}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <MTimer_voidSetDisiredTime>:

void MTimer_voidSetDisiredTime (u8 A_u8TimerID , f32 A_f32DisiredTime , void (*A_fptr)(void) )
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	a9 97       	sbiw	r28, 0x29	; 41
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	8b a3       	std	Y+35, r24	; 0x23
    1d00:	4c a3       	std	Y+36, r20	; 0x24
    1d02:	5d a3       	std	Y+37, r21	; 0x25
    1d04:	6e a3       	std	Y+38, r22	; 0x26
    1d06:	7f a3       	std	Y+39, r23	; 0x27
    1d08:	39 a7       	std	Y+41, r19	; 0x29
    1d0a:	28 a7       	std	Y+40, r18	; 0x28
	if (A_u8TimerID == TIMER0)
    1d0c:	8b a1       	ldd	r24, Y+35	; 0x23
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <MTimer_voidSetDisiredTime+0x2a>
    1d12:	27 c1       	rjmp	.+590    	; 0x1f62 <MTimer_voidSetDisiredTime+0x278>
			  ** OverFlowTime       = (2^resolution) * Prescaller / system frequancy
			  ** OverFlowCount      = DisiredTime / OverFlowTime
			  ** NumberOfTimerCount = OverFlowCount * (2^resolution)
			  ** PreloadValue       = (2^resolution) - NumberOfTimerCount
			*/
		    f32 L_f32OverFlowTime        = 256 ;
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a0 e8       	ldi	r26, 0x80	; 128
    1d1a:	b3 e4       	ldi	r27, 0x43	; 67
    1d1c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d1e:	98 a3       	std	Y+32, r25	; 0x20
    1d20:	a9 a3       	std	Y+33, r26	; 0x21
    1d22:	ba a3       	std	Y+34, r27	; 0x22
	        f32 L_f32OverFlowCount       = 0 ;
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a0 e0       	ldi	r26, 0x00	; 0
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	8b 8f       	std	Y+27, r24	; 0x1b
    1d2e:	9c 8f       	std	Y+28, r25	; 0x1c
    1d30:	ad 8f       	std	Y+29, r26	; 0x1d
    1d32:	be 8f       	std	Y+30, r27	; 0x1e
	        u16  L_u16NumberOfTimerCount = 256 ;
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	9a 8f       	std	Y+26, r25	; 0x1a
    1d3a:	89 8f       	std	Y+25, r24	; 0x19
	        u16  L_u16PreloadValue       = 0 ;
    1d3c:	18 8e       	std	Y+24, r1	; 0x18
    1d3e:	1f 8a       	std	Y+23, r1	; 0x17

	        L_f32OverFlowTime  = L_f32OverFlowTime * TIMER0_PRESCALER ;
    1d40:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d42:	78 a1       	ldd	r23, Y+32	; 0x20
    1d44:	89 a1       	ldd	r24, Y+33	; 0x21
    1d46:	9a a1       	ldd	r25, Y+34	; 0x22
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8f 8f       	std	Y+31, r24	; 0x1f
    1d5a:	98 a3       	std	Y+32, r25	; 0x20
    1d5c:	a9 a3       	std	Y+33, r26	; 0x21
    1d5e:	ba a3       	std	Y+34, r27	; 0x22
            L_f32OverFlowTime  = L_f32OverFlowTime / CLOK_SYSTEM ;
    1d60:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d62:	78 a1       	ldd	r23, Y+32	; 0x20
    1d64:	89 a1       	ldd	r24, Y+33	; 0x21
    1d66:	9a a1       	ldd	r25, Y+34	; 0x22
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	34 e2       	ldi	r19, 0x24	; 36
    1d6c:	44 ef       	ldi	r20, 0xF4	; 244
    1d6e:	5a e4       	ldi	r21, 0x4A	; 74
    1d70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8f 8f       	std	Y+31, r24	; 0x1f
    1d7a:	98 a3       	std	Y+32, r25	; 0x20
    1d7c:	a9 a3       	std	Y+33, r26	; 0x21
    1d7e:	ba a3       	std	Y+34, r27	; 0x22
			L_f32OverFlowCount = A_f32DisiredTime / L_f32OverFlowTime ;
    1d80:	6c a1       	ldd	r22, Y+36	; 0x24
    1d82:	7d a1       	ldd	r23, Y+37	; 0x25
    1d84:	8e a1       	ldd	r24, Y+38	; 0x26
    1d86:	9f a1       	ldd	r25, Y+39	; 0x27
    1d88:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1d8a:	38 a1       	ldd	r19, Y+32	; 0x20
    1d8c:	49 a1       	ldd	r20, Y+33	; 0x21
    1d8e:	5a a1       	ldd	r21, Y+34	; 0x22
    1d90:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8b 8f       	std	Y+27, r24	; 0x1b
    1d9a:	9c 8f       	std	Y+28, r25	; 0x1c
    1d9c:	ad 8f       	std	Y+29, r26	; 0x1d
    1d9e:	be 8f       	std	Y+30, r27	; 0x1e
			Timer0_Overflow_CallBack = A_fptr ;
    1da0:	88 a5       	ldd	r24, Y+40	; 0x28
    1da2:	99 a5       	ldd	r25, Y+41	; 0x29
    1da4:	90 93 e1 01 	sts	0x01E1, r25
    1da8:	80 93 e0 01 	sts	0x01E0, r24
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount * A_f32DisiredTime ;
    1dac:	89 8d       	ldd	r24, Y+25	; 0x19
    1dae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1db0:	cc 01       	movw	r24, r24
    1db2:	a0 e0       	ldi	r26, 0x00	; 0
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	2c a1       	ldd	r18, Y+36	; 0x24
    1dc8:	3d a1       	ldd	r19, Y+37	; 0x25
    1dca:	4e a1       	ldd	r20, Y+38	; 0x26
    1dcc:	5f a1       	ldd	r21, Y+39	; 0x27
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9a 8f       	std	Y+26, r25	; 0x1a
    1de4:	89 8f       	std	Y+25, r24	; 0x19
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount / L_f32OverFlowTime ;
    1de6:	89 8d       	ldd	r24, Y+25	; 0x19
    1de8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dea:	cc 01       	movw	r24, r24
    1dec:	a0 e0       	ldi	r26, 0x00	; 0
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1e02:	38 a1       	ldd	r19, Y+32	; 0x20
    1e04:	49 a1       	ldd	r20, Y+33	; 0x21
    1e06:	5a a1       	ldd	r21, Y+34	; 0x22
    1e08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e1e:	89 8f       	std	Y+25, r24	; 0x19
			if (L_f32OverFlowCount < 1.0)
    1e20:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1e22:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1e24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	dc f4       	brge	.+54     	; 0x1e6e <MTimer_voidSetDisiredTime+0x184>
			{
				L_u16PreloadValue       = 256 - L_u16NumberOfTimerCount ;
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	31 e0       	ldi	r19, 0x01	; 1
    1e3c:	89 8d       	ldd	r24, Y+25	; 0x19
    1e3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e40:	a9 01       	movw	r20, r18
    1e42:	48 1b       	sub	r20, r24
    1e44:	59 0b       	sbc	r21, r25
    1e46:	ca 01       	movw	r24, r20
    1e48:	98 8f       	std	Y+24, r25	; 0x18
    1e4a:	8f 8b       	std	Y+23, r24	; 0x17
				TCNT0 = L_u16PreloadValue ;
    1e4c:	e2 e5       	ldi	r30, 0x52	; 82
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	8f 89       	ldd	r24, Y+23	; 0x17
    1e52:	80 83       	st	Z, r24
				G_u32Timer0IntervalCount = 1 ;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e0       	ldi	r26, 0x00	; 0
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	80 93 a8 01 	sts	0x01A8, r24
    1e60:	90 93 a9 01 	sts	0x01A9, r25
    1e64:	a0 93 aa 01 	sts	0x01AA, r26
    1e68:	b0 93 ab 01 	sts	0x01AB, r27
    1e6c:	c1 c2       	rjmp	.+1410   	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
			}
			else
			{
				G_u32Timer0IntervalCount = (u32)L_f32OverFlowCount ;
    1e6e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1e70:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1e72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	80 93 a8 01 	sts	0x01A8, r24
    1e82:	90 93 a9 01 	sts	0x01A9, r25
    1e86:	a0 93 aa 01 	sts	0x01AA, r26
    1e8a:	b0 93 ab 01 	sts	0x01AB, r27
				if (L_f32OverFlowCount - (u32)L_f32OverFlowCount != 0.0)
    1e8e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1e90:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1ea6:	9b 01       	movw	r18, r22
    1ea8:	ac 01       	movw	r20, r24
    1eaa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1eac:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eb2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <MTimer_voidSetDisiredTime+0x1e6>
    1ece:	90 c2       	rjmp	.+1312   	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
				{
					L_u16NumberOfTimerCount = (u16)((L_u16NumberOfTimerCount / 256.0) * 256) ;
    1ed0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ed2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ed4:	cc 01       	movw	r24, r24
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	53 e4       	ldi	r21, 0x43	; 67
    1ef2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	53 e4       	ldi	r21, 0x43	; 67
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f1c:	89 8f       	std	Y+25, r24	; 0x19
				    L_u16PreloadValue    = 256 - L_u16NumberOfTimerCount ;
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	31 e0       	ldi	r19, 0x01	; 1
    1f22:	89 8d       	ldd	r24, Y+25	; 0x19
    1f24:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f26:	a9 01       	movw	r20, r18
    1f28:	48 1b       	sub	r20, r24
    1f2a:	59 0b       	sbc	r21, r25
    1f2c:	ca 01       	movw	r24, r20
    1f2e:	98 8f       	std	Y+24, r25	; 0x18
    1f30:	8f 8b       	std	Y+23, r24	; 0x17
				    TCNT0 = L_u16PreloadValue ;
    1f32:	e2 e5       	ldi	r30, 0x52	; 82
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	80 83       	st	Z, r24
					G_u32Timer0IntervalCount ++ ;
    1f3a:	80 91 a8 01 	lds	r24, 0x01A8
    1f3e:	90 91 a9 01 	lds	r25, 0x01A9
    1f42:	a0 91 aa 01 	lds	r26, 0x01AA
    1f46:	b0 91 ab 01 	lds	r27, 0x01AB
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	a1 1d       	adc	r26, r1
    1f4e:	b1 1d       	adc	r27, r1
    1f50:	80 93 a8 01 	sts	0x01A8, r24
    1f54:	90 93 a9 01 	sts	0x01A9, r25
    1f58:	a0 93 aa 01 	sts	0x01AA, r26
    1f5c:	b0 93 ab 01 	sts	0x01AB, r27
    1f60:	47 c2       	rjmp	.+1166   	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
				}
			}
	    #endif
	}
	else if (A_u8TimerID == TIMER2)
    1f62:	8b a1       	ldd	r24, Y+35	; 0x23
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <MTimer_voidSetDisiredTime+0x280>
    1f68:	27 c1       	rjmp	.+590    	; 0x21b8 <MTimer_voidSetDisiredTime+0x4ce>
			  ** OverFlowTime       = (2^resolution) * Prescaller / system frequancy
			  ** OverFlowCount      = DisiredTime / OverFlowTime
			  ** NumberOfTimerCount = OverFlowCount * (2^resolution)
			  ** PreloadValue       = (2^resolution) - NumberOfTimerCount
			*/
		    f32 L_f32OverFlowTime        = 256 ;
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e8       	ldi	r26, 0x80	; 128
    1f70:	b3 e4       	ldi	r27, 0x43	; 67
    1f72:	8b 8b       	std	Y+19, r24	; 0x13
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	ad 8b       	std	Y+21, r26	; 0x15
    1f78:	be 8b       	std	Y+22, r27	; 0x16
	        f32 L_f32OverFlowCount       = 0 ;
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e0       	ldi	r26, 0x00	; 0
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	8f 87       	std	Y+15, r24	; 0x0f
    1f84:	98 8b       	std	Y+16, r25	; 0x10
    1f86:	a9 8b       	std	Y+17, r26	; 0x11
    1f88:	ba 8b       	std	Y+18, r27	; 0x12
	        u16  L_u16NumberOfTimerCount = 256 ;
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	9e 87       	std	Y+14, r25	; 0x0e
    1f90:	8d 87       	std	Y+13, r24	; 0x0d
	        u16  L_u16PreloadValue       = 0 ;
    1f92:	1c 86       	std	Y+12, r1	; 0x0c
    1f94:	1b 86       	std	Y+11, r1	; 0x0b

	        L_f32OverFlowTime  = L_f32OverFlowTime * TIMER0_PRESCALER ;
    1f96:	6b 89       	ldd	r22, Y+19	; 0x13
    1f98:	7c 89       	ldd	r23, Y+20	; 0x14
    1f9a:	8d 89       	ldd	r24, Y+21	; 0x15
    1f9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	51 e4       	ldi	r21, 0x41	; 65
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
    1fb0:	9c 8b       	std	Y+20, r25	; 0x14
    1fb2:	ad 8b       	std	Y+21, r26	; 0x15
    1fb4:	be 8b       	std	Y+22, r27	; 0x16
            L_f32OverFlowTime  = L_f32OverFlowTime / CLOK_SYSTEM ;
    1fb6:	6b 89       	ldd	r22, Y+19	; 0x13
    1fb8:	7c 89       	ldd	r23, Y+20	; 0x14
    1fba:	8d 89       	ldd	r24, Y+21	; 0x15
    1fbc:	9e 89       	ldd	r25, Y+22	; 0x16
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	34 e2       	ldi	r19, 0x24	; 36
    1fc2:	44 ef       	ldi	r20, 0xF4	; 244
    1fc4:	5a e4       	ldi	r21, 0x4A	; 74
    1fc6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8b 8b       	std	Y+19, r24	; 0x13
    1fd0:	9c 8b       	std	Y+20, r25	; 0x14
    1fd2:	ad 8b       	std	Y+21, r26	; 0x15
    1fd4:	be 8b       	std	Y+22, r27	; 0x16
			L_f32OverFlowCount = A_f32DisiredTime / L_f32OverFlowTime ;
    1fd6:	6c a1       	ldd	r22, Y+36	; 0x24
    1fd8:	7d a1       	ldd	r23, Y+37	; 0x25
    1fda:	8e a1       	ldd	r24, Y+38	; 0x26
    1fdc:	9f a1       	ldd	r25, Y+39	; 0x27
    1fde:	2b 89       	ldd	r18, Y+19	; 0x13
    1fe0:	3c 89       	ldd	r19, Y+20	; 0x14
    1fe2:	4d 89       	ldd	r20, Y+21	; 0x15
    1fe4:	5e 89       	ldd	r21, Y+22	; 0x16
    1fe6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8f 87       	std	Y+15, r24	; 0x0f
    1ff0:	98 8b       	std	Y+16, r25	; 0x10
    1ff2:	a9 8b       	std	Y+17, r26	; 0x11
    1ff4:	ba 8b       	std	Y+18, r27	; 0x12
			Timer2_Overflow_CallBack = A_fptr ;
    1ff6:	88 a5       	ldd	r24, Y+40	; 0x28
    1ff8:	99 a5       	ldd	r25, Y+41	; 0x29
    1ffa:	90 93 e5 01 	sts	0x01E5, r25
    1ffe:	80 93 e4 01 	sts	0x01E4, r24
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount * A_f32DisiredTime ;
    2002:	8d 85       	ldd	r24, Y+13	; 0x0d
    2004:	9e 85       	ldd	r25, Y+14	; 0x0e
    2006:	cc 01       	movw	r24, r24
    2008:	a0 e0       	ldi	r26, 0x00	; 0
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	2c a1       	ldd	r18, Y+36	; 0x24
    201e:	3d a1       	ldd	r19, Y+37	; 0x25
    2020:	4e a1       	ldd	r20, Y+38	; 0x26
    2022:	5f a1       	ldd	r21, Y+39	; 0x27
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9e 87       	std	Y+14, r25	; 0x0e
    203a:	8d 87       	std	Y+13, r24	; 0x0d
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount / L_f32OverFlowTime ;
    203c:	8d 85       	ldd	r24, Y+13	; 0x0d
    203e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2040:	cc 01       	movw	r24, r24
    2042:	a0 e0       	ldi	r26, 0x00	; 0
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	2b 89       	ldd	r18, Y+19	; 0x13
    2058:	3c 89       	ldd	r19, Y+20	; 0x14
    205a:	4d 89       	ldd	r20, Y+21	; 0x15
    205c:	5e 89       	ldd	r21, Y+22	; 0x16
    205e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9e 87       	std	Y+14, r25	; 0x0e
    2074:	8d 87       	std	Y+13, r24	; 0x0d
			if (L_f32OverFlowCount < 1.0)
    2076:	6f 85       	ldd	r22, Y+15	; 0x0f
    2078:	78 89       	ldd	r23, Y+16	; 0x10
    207a:	89 89       	ldd	r24, Y+17	; 0x11
    207c:	9a 89       	ldd	r25, Y+18	; 0x12
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	dc f4       	brge	.+54     	; 0x20c4 <MTimer_voidSetDisiredTime+0x3da>
			{
				L_u16PreloadValue       = 256 - L_u16NumberOfTimerCount ;
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	31 e0       	ldi	r19, 0x01	; 1
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	a9 01       	movw	r20, r18
    2098:	48 1b       	sub	r20, r24
    209a:	59 0b       	sbc	r21, r25
    209c:	ca 01       	movw	r24, r20
    209e:	9c 87       	std	Y+12, r25	; 0x0c
    20a0:	8b 87       	std	Y+11, r24	; 0x0b
				TCNT2 = L_u16PreloadValue ;
    20a2:	e4 e4       	ldi	r30, 0x44	; 68
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a8:	80 83       	st	Z, r24
				G_u32Timer2IntervalCount = 1 ;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e0       	ldi	r26, 0x00	; 0
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	80 93 b0 01 	sts	0x01B0, r24
    20b6:	90 93 b1 01 	sts	0x01B1, r25
    20ba:	a0 93 b2 01 	sts	0x01B2, r26
    20be:	b0 93 b3 01 	sts	0x01B3, r27
    20c2:	96 c1       	rjmp	.+812    	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
			}
			else
			{
				G_u32Timer2IntervalCount = (u32)L_f32OverFlowCount ;
    20c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    20c6:	78 89       	ldd	r23, Y+16	; 0x10
    20c8:	89 89       	ldd	r24, Y+17	; 0x11
    20ca:	9a 89       	ldd	r25, Y+18	; 0x12
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	80 93 b0 01 	sts	0x01B0, r24
    20d8:	90 93 b1 01 	sts	0x01B1, r25
    20dc:	a0 93 b2 01 	sts	0x01B2, r26
    20e0:	b0 93 b3 01 	sts	0x01B3, r27
				if (L_f32OverFlowCount - (u32)L_f32OverFlowCount != 0.0)
    20e4:	6f 85       	ldd	r22, Y+15	; 0x0f
    20e6:	78 89       	ldd	r23, Y+16	; 0x10
    20e8:	89 89       	ldd	r24, Y+17	; 0x11
    20ea:	9a 89       	ldd	r25, Y+18	; 0x12
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    20fc:	9b 01       	movw	r18, r22
    20fe:	ac 01       	movw	r20, r24
    2100:	6f 85       	ldd	r22, Y+15	; 0x0f
    2102:	78 89       	ldd	r23, Y+16	; 0x10
    2104:	89 89       	ldd	r24, Y+17	; 0x11
    2106:	9a 89       	ldd	r25, Y+18	; 0x12
    2108:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2120:	88 23       	and	r24, r24
    2122:	09 f4       	brne	.+2      	; 0x2126 <MTimer_voidSetDisiredTime+0x43c>
    2124:	65 c1       	rjmp	.+714    	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
				{
					L_u16NumberOfTimerCount = (u16)((L_u16NumberOfTimerCount / 256.0) * 256) ;
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	cc 01       	movw	r24, r24
    212c:	a0 e0       	ldi	r26, 0x00	; 0
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e8       	ldi	r20, 0x80	; 128
    2146:	53 e4       	ldi	r21, 0x43	; 67
    2148:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e8       	ldi	r20, 0x80	; 128
    215a:	53 e4       	ldi	r21, 0x43	; 67
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e 87       	std	Y+14, r25	; 0x0e
    2172:	8d 87       	std	Y+13, r24	; 0x0d
				    L_u16PreloadValue    = 256 - L_u16NumberOfTimerCount ;
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	31 e0       	ldi	r19, 0x01	; 1
    2178:	8d 85       	ldd	r24, Y+13	; 0x0d
    217a:	9e 85       	ldd	r25, Y+14	; 0x0e
    217c:	a9 01       	movw	r20, r18
    217e:	48 1b       	sub	r20, r24
    2180:	59 0b       	sbc	r21, r25
    2182:	ca 01       	movw	r24, r20
    2184:	9c 87       	std	Y+12, r25	; 0x0c
    2186:	8b 87       	std	Y+11, r24	; 0x0b
				    TCNT2 = L_u16PreloadValue ;
    2188:	e4 e4       	ldi	r30, 0x44	; 68
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	8b 85       	ldd	r24, Y+11	; 0x0b
    218e:	80 83       	st	Z, r24
					G_u32Timer2IntervalCount ++ ;
    2190:	80 91 b0 01 	lds	r24, 0x01B0
    2194:	90 91 b1 01 	lds	r25, 0x01B1
    2198:	a0 91 b2 01 	lds	r26, 0x01B2
    219c:	b0 91 b3 01 	lds	r27, 0x01B3
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	a1 1d       	adc	r26, r1
    21a4:	b1 1d       	adc	r27, r1
    21a6:	80 93 b0 01 	sts	0x01B0, r24
    21aa:	90 93 b1 01 	sts	0x01B1, r25
    21ae:	a0 93 b2 01 	sts	0x01B2, r26
    21b2:	b0 93 b3 01 	sts	0x01B3, r27
    21b6:	1c c1       	rjmp	.+568    	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
				}
			}
	    #endif
	}
	else if (A_u8TimerID == TIMER1)
    21b8:	8b a1       	ldd	r24, Y+35	; 0x23
    21ba:	85 30       	cpi	r24, 0x05	; 5
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <MTimer_voidSetDisiredTime+0x4d6>
    21be:	18 c1       	rjmp	.+560    	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
			  ** OverFlowTime       = (2^resolution) * Prescaller / system frequancy
			  ** OverFlowCount      = DisiredTime / OverFlowTime
			  ** NumberOfTimerCount = OverFlowCount * (2^resolution)
			  ** PreloadValue       = (2^resolution) - NumberOfTimerCount
			*/
		    f32 L_f32OverFlowTime        = 65535 ;
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	9f ef       	ldi	r25, 0xFF	; 255
    21c4:	af e7       	ldi	r26, 0x7F	; 127
    21c6:	b7 e4       	ldi	r27, 0x47	; 71
    21c8:	8f 83       	std	Y+7, r24	; 0x07
    21ca:	98 87       	std	Y+8, r25	; 0x08
    21cc:	a9 87       	std	Y+9, r26	; 0x09
    21ce:	ba 87       	std	Y+10, r27	; 0x0a
	        f32 L_f32OverFlowCount       = 0 ;
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    21da:	9c 83       	std	Y+4, r25	; 0x04
    21dc:	ad 83       	std	Y+5, r26	; 0x05
    21de:	be 83       	std	Y+6, r27	; 0x06
	        u16  L_u16NumberOfTimerCount = 65535 ;
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	9f ef       	ldi	r25, 0xFF	; 255
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01


	        L_f32OverFlowTime  = L_f32OverFlowTime * TIMER1_PRESCALER ;
            L_f32OverFlowTime  = L_f32OverFlowTime / CLOK_SYSTEM ;
    21e8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ea:	78 85       	ldd	r23, Y+8	; 0x08
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	34 e2       	ldi	r19, 0x24	; 36
    21f4:	44 ef       	ldi	r20, 0xF4	; 244
    21f6:	5a e4       	ldi	r21, 0x4A	; 74
    21f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8f 83       	std	Y+7, r24	; 0x07
    2202:	98 87       	std	Y+8, r25	; 0x08
    2204:	a9 87       	std	Y+9, r26	; 0x09
    2206:	ba 87       	std	Y+10, r27	; 0x0a
			L_f32OverFlowCount = A_f32DisiredTime / L_f32OverFlowTime ;
    2208:	6c a1       	ldd	r22, Y+36	; 0x24
    220a:	7d a1       	ldd	r23, Y+37	; 0x25
    220c:	8e a1       	ldd	r24, Y+38	; 0x26
    220e:	9f a1       	ldd	r25, Y+39	; 0x27
    2210:	2f 81       	ldd	r18, Y+7	; 0x07
    2212:	38 85       	ldd	r19, Y+8	; 0x08
    2214:	49 85       	ldd	r20, Y+9	; 0x09
    2216:	5a 85       	ldd	r21, Y+10	; 0x0a
    2218:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8b 83       	std	Y+3, r24	; 0x03
    2222:	9c 83       	std	Y+4, r25	; 0x04
    2224:	ad 83       	std	Y+5, r26	; 0x05
    2226:	be 83       	std	Y+6, r27	; 0x06
			Timer1_Overflow_CallBack = A_fptr ;
    2228:	88 a5       	ldd	r24, Y+40	; 0x28
    222a:	99 a5       	ldd	r25, Y+41	; 0x29
    222c:	90 93 e3 01 	sts	0x01E3, r25
    2230:	80 93 e2 01 	sts	0x01E2, r24
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount * A_f32DisiredTime ;
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	cc 01       	movw	r24, r24
    223a:	a0 e0       	ldi	r26, 0x00	; 0
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	2c a1       	ldd	r18, Y+36	; 0x24
    2250:	3d a1       	ldd	r19, Y+37	; 0x25
    2252:	4e a1       	ldd	r20, Y+38	; 0x26
    2254:	5f a1       	ldd	r21, Y+39	; 0x27
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount / L_f32OverFlowTime ;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	cc 01       	movw	r24, r24
    2274:	a0 e0       	ldi	r26, 0x00	; 0
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	2f 81       	ldd	r18, Y+7	; 0x07
    228a:	38 85       	ldd	r19, Y+8	; 0x08
    228c:	49 85       	ldd	r20, Y+9	; 0x09
    228e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2290:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
			if (L_f32OverFlowCount < 1.0)
    22a8:	6b 81       	ldd	r22, Y+3	; 0x03
    22aa:	7c 81       	ldd	r23, Y+4	; 0x04
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	9e 81       	ldd	r25, Y+6	; 0x06
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	ec f4       	brge	.+58     	; 0x22fa <MTimer_voidSetDisiredTime+0x610>
			{
				L_u16PreloadValue       = 65535 - L_u16NumberOfTimerCount ;
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	80 95       	com	r24
    22c6:	90 95       	com	r25
    22c8:	90 93 ef 01 	sts	0x01EF, r25
    22cc:	80 93 ee 01 	sts	0x01EE, r24
				TCNT1 = L_u16PreloadValue ;
    22d0:	ec e4       	ldi	r30, 0x4C	; 76
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 91 ee 01 	lds	r24, 0x01EE
    22d8:	90 91 ef 01 	lds	r25, 0x01EF
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
				G_u32Timer1IntervalCount = 1 ;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a0 e0       	ldi	r26, 0x00	; 0
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	80 93 c0 01 	sts	0x01C0, r24
    22ec:	90 93 c1 01 	sts	0x01C1, r25
    22f0:	a0 93 c2 01 	sts	0x01C2, r26
    22f4:	b0 93 c3 01 	sts	0x01C3, r27
    22f8:	7b c0       	rjmp	.+246    	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
			}
			else
			{
				G_u32Timer1IntervalCount = (u32)L_f32OverFlowCount ;
    22fa:	6b 81       	ldd	r22, Y+3	; 0x03
    22fc:	7c 81       	ldd	r23, Y+4	; 0x04
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	80 93 c0 01 	sts	0x01C0, r24
    230e:	90 93 c1 01 	sts	0x01C1, r25
    2312:	a0 93 c2 01 	sts	0x01C2, r26
    2316:	b0 93 c3 01 	sts	0x01C3, r27
				if (L_f32OverFlowCount - (u32)L_f32OverFlowCount != 0.0)
    231a:	6b 81       	ldd	r22, Y+3	; 0x03
    231c:	7c 81       	ldd	r23, Y+4	; 0x04
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	6b 81       	ldd	r22, Y+3	; 0x03
    2338:	7c 81       	ldd	r23, Y+4	; 0x04
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2356:	88 23       	and	r24, r24
    2358:	09 f4       	brne	.+2      	; 0x235c <MTimer_voidSetDisiredTime+0x672>
    235a:	4a c0       	rjmp	.+148    	; 0x23f0 <MTimer_voidSetDisiredTime+0x706>
				{
					L_u16NumberOfTimerCount = (u16)((L_u16NumberOfTimerCount / 65535.0) * 65535) ;
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	cc 01       	movw	r24, r24
    2362:	a0 e0       	ldi	r26, 0x00	; 0
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	57 e4       	ldi	r21, 0x47	; 71
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
				    L_u16PreloadValue    = 65535 - L_u16NumberOfTimerCount ;
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	80 95       	com	r24
    23b0:	90 95       	com	r25
    23b2:	90 93 ef 01 	sts	0x01EF, r25
    23b6:	80 93 ee 01 	sts	0x01EE, r24
				    TCNT1 = L_u16PreloadValue ;
    23ba:	ec e4       	ldi	r30, 0x4C	; 76
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 91 ee 01 	lds	r24, 0x01EE
    23c2:	90 91 ef 01 	lds	r25, 0x01EF
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
					G_u32Timer1IntervalCount ++ ;
    23ca:	80 91 c0 01 	lds	r24, 0x01C0
    23ce:	90 91 c1 01 	lds	r25, 0x01C1
    23d2:	a0 91 c2 01 	lds	r26, 0x01C2
    23d6:	b0 91 c3 01 	lds	r27, 0x01C3
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	a1 1d       	adc	r26, r1
    23de:	b1 1d       	adc	r27, r1
    23e0:	80 93 c0 01 	sts	0x01C0, r24
    23e4:	90 93 c1 01 	sts	0x01C1, r25
    23e8:	a0 93 c2 01 	sts	0x01C2, r26
    23ec:	b0 93 c3 01 	sts	0x01C3, r27
				}
			}
	    #endif
	}
}
    23f0:	a9 96       	adiw	r28, 0x29	; 41
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <MTimer_voidCtcCallBack>:

void MTimer_voidCtcCallBack (u8  A_u8TimerID , void (*A_fptr1)(void) , void (*A_fptr2)(void))
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	00 d0       	rcall	.+0      	; 0x2408 <MTimer_voidCtcCallBack+0x6>
    2408:	00 d0       	rcall	.+0      	; 0x240a <MTimer_voidCtcCallBack+0x8>
    240a:	0f 92       	push	r0
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	7b 83       	std	Y+3, r23	; 0x03
    2414:	6a 83       	std	Y+2, r22	; 0x02
    2416:	5d 83       	std	Y+5, r21	; 0x05
    2418:	4c 83       	std	Y+4, r20	; 0x04
	if (A_u8TimerID == TIMER0)
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	39 f4       	brne	.+14     	; 0x242e <MTimer_voidCtcCallBack+0x2c>
	{
        Timer0_CTC_CallBack = A_fptr1 ;
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	9b 81       	ldd	r25, Y+3	; 0x03
    2424:	90 93 e7 01 	sts	0x01E7, r25
    2428:	80 93 e6 01 	sts	0x01E6, r24
    242c:	19 c0       	rjmp	.+50     	; 0x2460 <MTimer_voidCtcCallBack+0x5e>
	}
	else if (A_u8TimerID == TIMER2)
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	83 30       	cpi	r24, 0x03	; 3
    2432:	39 f4       	brne	.+14     	; 0x2442 <MTimer_voidCtcCallBack+0x40>
	{
		Timer2_CTC_CallBack = A_fptr1 ;
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	9b 81       	ldd	r25, Y+3	; 0x03
    2438:	90 93 e9 01 	sts	0x01E9, r25
    243c:	80 93 e8 01 	sts	0x01E8, r24
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <MTimer_voidCtcCallBack+0x5e>
	}
	else if (A_u8TimerID == TIMER1)
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	85 30       	cpi	r24, 0x05	; 5
    2446:	61 f4       	brne	.+24     	; 0x2460 <MTimer_voidCtcCallBack+0x5e>
		#if   COMPARE_TYPE == COMPARE_A
		    Timer1_CTC_A_CallBack = A_fptr1 ;
		#elif COMPARE_TYPE == COMPARE_B
		    Timer1_CTC_B_CallBack = A_fptr2 ;
		#elif COMPARE_TYPE == COMPARE_BOTH
		    Timer1_CTC_A_CallBack = A_fptr1 ;
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	9b 81       	ldd	r25, Y+3	; 0x03
    244c:	90 93 eb 01 	sts	0x01EB, r25
    2450:	80 93 ea 01 	sts	0x01EA, r24
			Timer1_CTC_B_CallBack = A_fptr2 ;
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	9d 81       	ldd	r25, Y+5	; 0x05
    2458:	90 93 ed 01 	sts	0x01ED, r25
    245c:	80 93 ec 01 	sts	0x01EC, r24
		#endif
	}
}
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <MTimer_voidSetPWM>:

void MTimer_voidSetPWM (u8  A_u8TimerID , u16 A_u16CompareValueA , u16 A_u16CompareValueB)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <MTimer_voidSetPWM+0x6>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <MTimer_voidSetPWM+0x8>
    2478:	0f 92       	push	r0
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	7b 83       	std	Y+3, r23	; 0x03
    2482:	6a 83       	std	Y+2, r22	; 0x02
    2484:	5d 83       	std	Y+5, r21	; 0x05
    2486:	4c 83       	std	Y+4, r20	; 0x04
			      OCR1A = A_u16CompareValueA ;
			      OCR1B = A_u16CompareValueB ;
		    #endif
		#endif
	}
}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <MTimerCalcFreqofTon>:

u32 MTimerCalcFreqofTon (void)
{
    2498:	ef 92       	push	r14
    249a:	ff 92       	push	r15
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <MTimerCalcFreqofTon+0xe>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <MTimerCalcFreqofTon+0x10>
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
	u32 L_u32Period = 0 ;
    24ac:	19 82       	std	Y+1, r1	; 0x01
    24ae:	1a 82       	std	Y+2, r1	; 0x02
    24b0:	1b 82       	std	Y+3, r1	; 0x03
    24b2:	1c 82       	std	Y+4, r1	; 0x04
	G_u32OverFlowCounts = 0 ;
    24b4:	10 92 c4 01 	sts	0x01C4, r1
    24b8:	10 92 c5 01 	sts	0x01C5, r1
    24bc:	10 92 c6 01 	sts	0x01C6, r1
    24c0:	10 92 c7 01 	sts	0x01C7, r1

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    24c4:	a8 e5       	ldi	r26, 0x58	; 88
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e8 e5       	ldi	r30, 0x58	; 88
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	80 62       	ori	r24, 0x20	; 32
    24d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    24d2:	ae e4       	ldi	r26, 0x4E	; 78
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ee e4       	ldi	r30, 0x4E	; 78
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	80 64       	ori	r24, 0x40	; 64
    24de:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    24e0:	e8 e5       	ldi	r30, 0x58	; 88
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	80 72       	andi	r24, 0x20	; 32
    24ec:	90 70       	andi	r25, 0x00	; 0
    24ee:	95 95       	asr	r25
    24f0:	87 95       	ror	r24
    24f2:	95 95       	asr	r25
    24f4:	87 95       	ror	r24
    24f6:	95 95       	asr	r25
    24f8:	87 95       	ror	r24
    24fa:	95 95       	asr	r25
    24fc:	87 95       	ror	r24
    24fe:	95 95       	asr	r25
    2500:	87 95       	ror	r24
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	69 f3       	breq	.-38     	; 0x24e0 <MTimerCalcFreqofTon+0x48>
	G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    2506:	e6 e4       	ldi	r30, 0x46	; 70
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	7c 01       	movw	r14, r24
    2510:	00 e0       	ldi	r16, 0x00	; 0
    2512:	10 e0       	ldi	r17, 0x00	; 0
    2514:	80 91 c4 01 	lds	r24, 0x01C4
    2518:	90 91 c5 01 	lds	r25, 0x01C5
    251c:	a0 91 c6 01 	lds	r26, 0x01C6
    2520:	b0 91 c7 01 	lds	r27, 0x01C7
    2524:	2f ef       	ldi	r18, 0xFF	; 255
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8e 0d       	add	r24, r14
    253a:	9f 1d       	adc	r25, r15
    253c:	a0 1f       	adc	r26, r16
    253e:	b1 1f       	adc	r27, r17
    2540:	80 93 c8 01 	sts	0x01C8, r24
    2544:	90 93 c9 01 	sts	0x01C9, r25
    2548:	a0 93 ca 01 	sts	0x01CA, r26
    254c:	b0 93 cb 01 	sts	0x01CB, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    2550:	a8 e5       	ldi	r26, 0x58	; 88
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e8 e5       	ldi	r30, 0x58	; 88
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	80 62       	ori	r24, 0x20	; 32
    255c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect falling edge*/
    255e:	ae e4       	ldi	r26, 0x4E	; 78
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	ee e4       	ldi	r30, 0x4E	; 78
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8f 7b       	andi	r24, 0xBF	; 191
    256a:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    256c:	e8 e5       	ldi	r30, 0x58	; 88
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	80 72       	andi	r24, 0x20	; 32
    2578:	90 70       	andi	r25, 0x00	; 0
    257a:	95 95       	asr	r25
    257c:	87 95       	ror	r24
    257e:	95 95       	asr	r25
    2580:	87 95       	ror	r24
    2582:	95 95       	asr	r25
    2584:	87 95       	ror	r24
    2586:	95 95       	asr	r25
    2588:	87 95       	ror	r24
    258a:	95 95       	asr	r25
    258c:	87 95       	ror	r24
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	69 f3       	breq	.-38     	; 0x256c <MTimerCalcFreqofTon+0xd4>
	G_u32CountsForFirstFaling = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    2592:	e6 e4       	ldi	r30, 0x46	; 70
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	7c 01       	movw	r14, r24
    259c:	00 e0       	ldi	r16, 0x00	; 0
    259e:	10 e0       	ldi	r17, 0x00	; 0
    25a0:	80 91 c4 01 	lds	r24, 0x01C4
    25a4:	90 91 c5 01 	lds	r25, 0x01C5
    25a8:	a0 91 c6 01 	lds	r26, 0x01C6
    25ac:	b0 91 c7 01 	lds	r27, 0x01C7
    25b0:	2f ef       	ldi	r18, 0xFF	; 255
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8e 0d       	add	r24, r14
    25c6:	9f 1d       	adc	r25, r15
    25c8:	a0 1f       	adc	r26, r16
    25ca:	b1 1f       	adc	r27, r17
    25cc:	80 93 cc 01 	sts	0x01CC, r24
    25d0:	90 93 cd 01 	sts	0x01CD, r25
    25d4:	a0 93 ce 01 	sts	0x01CE, r26
    25d8:	b0 93 cf 01 	sts	0x01CF, r27

	G_u32OverFlowCounts = 0 ;
    25dc:	10 92 c4 01 	sts	0x01C4, r1
    25e0:	10 92 c5 01 	sts	0x01C5, r1
    25e4:	10 92 c6 01 	sts	0x01C6, r1
    25e8:	10 92 c7 01 	sts	0x01C7, r1

	L_u32Period = G_u32CountsForFirstFaling - G_u32CountsForFirstRising ;
    25ec:	20 91 cc 01 	lds	r18, 0x01CC
    25f0:	30 91 cd 01 	lds	r19, 0x01CD
    25f4:	40 91 ce 01 	lds	r20, 0x01CE
    25f8:	50 91 cf 01 	lds	r21, 0x01CF
    25fc:	80 91 c8 01 	lds	r24, 0x01C8
    2600:	90 91 c9 01 	lds	r25, 0x01C9
    2604:	a0 91 ca 01 	lds	r26, 0x01CA
    2608:	b0 91 cb 01 	lds	r27, 0x01CB
    260c:	79 01       	movw	r14, r18
    260e:	8a 01       	movw	r16, r20
    2610:	e8 1a       	sub	r14, r24
    2612:	f9 0a       	sbc	r15, r25
    2614:	0a 0b       	sbc	r16, r26
    2616:	1b 0b       	sbc	r17, r27
    2618:	d8 01       	movw	r26, r16
    261a:	c7 01       	movw	r24, r14
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	ab 83       	std	Y+3, r26	; 0x03
    2622:	bc 83       	std	Y+4, r27	; 0x04

	G_u32FrequancyOfTimeOn = CLOK_SYSTEM / (L_u32Period * (u32)TIMER1_PRESCALER) ;
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	92 e1       	ldi	r25, 0x12	; 18
    2628:	aa e7       	ldi	r26, 0x7A	; 122
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	29 81       	ldd	r18, Y+1	; 0x01
    262e:	3a 81       	ldd	r19, Y+2	; 0x02
    2630:	4b 81       	ldd	r20, Y+3	; 0x03
    2632:	5c 81       	ldd	r21, Y+4	; 0x04
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
    263c:	da 01       	movw	r26, r20
    263e:	c9 01       	movw	r24, r18
    2640:	80 93 d4 01 	sts	0x01D4, r24
    2644:	90 93 d5 01 	sts	0x01D5, r25
    2648:	a0 93 d6 01 	sts	0x01D6, r26
    264c:	b0 93 d7 01 	sts	0x01D7, r27
	return G_u32FrequancyOfTimeOn ;
    2650:	80 91 d4 01 	lds	r24, 0x01D4
    2654:	90 91 d5 01 	lds	r25, 0x01D5
    2658:	a0 91 d6 01 	lds	r26, 0x01D6
    265c:	b0 91 d7 01 	lds	r27, 0x01D7

}
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	1f 91       	pop	r17
    2672:	0f 91       	pop	r16
    2674:	ff 90       	pop	r15
    2676:	ef 90       	pop	r14
    2678:	08 95       	ret

0000267a <MTimerCalcDutyCycle>:

f32 MTimerCalcDutyCycle (void)
{
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	2c 97       	sbiw	r28, 0x0c	; 12
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
	u32 L_u32Period = 0 ;
    2696:	19 86       	std	Y+9, r1	; 0x09
    2698:	1a 86       	std	Y+10, r1	; 0x0a
    269a:	1b 86       	std	Y+11, r1	; 0x0b
    269c:	1c 86       	std	Y+12, r1	; 0x0c
	u32 L_u32High  = 0 ;
    269e:	1d 82       	std	Y+5, r1	; 0x05
    26a0:	1e 82       	std	Y+6, r1	; 0x06
    26a2:	1f 82       	std	Y+7, r1	; 0x07
    26a4:	18 86       	std	Y+8, r1	; 0x08
	f32  L_f32Duty = 0.0 ;
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a0 e0       	ldi	r26, 0x00	; 0
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	ab 83       	std	Y+3, r26	; 0x03
    26b4:	bc 83       	std	Y+4, r27	; 0x04
	G_u32OverFlowCounts = 0 ;
    26b6:	10 92 c4 01 	sts	0x01C4, r1
    26ba:	10 92 c5 01 	sts	0x01C5, r1
    26be:	10 92 c6 01 	sts	0x01C6, r1
    26c2:	10 92 c7 01 	sts	0x01C7, r1

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    26c6:	a8 e5       	ldi	r26, 0x58	; 88
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e8 e5       	ldi	r30, 0x58	; 88
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	80 62       	ori	r24, 0x20	; 32
    26d2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    26d4:	ae e4       	ldi	r26, 0x4E	; 78
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	ee e4       	ldi	r30, 0x4E	; 78
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 64       	ori	r24, 0x40	; 64
    26e0:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    26e2:	e8 e5       	ldi	r30, 0x58	; 88
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	88 2f       	mov	r24, r24
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	80 72       	andi	r24, 0x20	; 32
    26ee:	90 70       	andi	r25, 0x00	; 0
    26f0:	95 95       	asr	r25
    26f2:	87 95       	ror	r24
    26f4:	95 95       	asr	r25
    26f6:	87 95       	ror	r24
    26f8:	95 95       	asr	r25
    26fa:	87 95       	ror	r24
    26fc:	95 95       	asr	r25
    26fe:	87 95       	ror	r24
    2700:	95 95       	asr	r25
    2702:	87 95       	ror	r24
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f3       	breq	.-38     	; 0x26e2 <MTimerCalcDutyCycle+0x68>
	G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    2708:	e6 e4       	ldi	r30, 0x46	; 70
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	7c 01       	movw	r14, r24
    2712:	00 e0       	ldi	r16, 0x00	; 0
    2714:	10 e0       	ldi	r17, 0x00	; 0
    2716:	80 91 c4 01 	lds	r24, 0x01C4
    271a:	90 91 c5 01 	lds	r25, 0x01C5
    271e:	a0 91 c6 01 	lds	r26, 0x01C6
    2722:	b0 91 c7 01 	lds	r27, 0x01C7
    2726:	2f ef       	ldi	r18, 0xFF	; 255
    2728:	3f ef       	ldi	r19, 0xFF	; 255
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8e 0d       	add	r24, r14
    273c:	9f 1d       	adc	r25, r15
    273e:	a0 1f       	adc	r26, r16
    2740:	b1 1f       	adc	r27, r17
    2742:	80 93 c8 01 	sts	0x01C8, r24
    2746:	90 93 c9 01 	sts	0x01C9, r25
    274a:	a0 93 ca 01 	sts	0x01CA, r26
    274e:	b0 93 cb 01 	sts	0x01CB, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    2752:	a8 e5       	ldi	r26, 0x58	; 88
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e8 e5       	ldi	r30, 0x58	; 88
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 62       	ori	r24, 0x20	; 32
    275e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect falling edge*/
    2760:	ae e4       	ldi	r26, 0x4E	; 78
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ee e4       	ldi	r30, 0x4E	; 78
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	8f 7b       	andi	r24, 0xBF	; 191
    276c:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    276e:	e8 e5       	ldi	r30, 0x58	; 88
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	80 72       	andi	r24, 0x20	; 32
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	95 95       	asr	r25
    277e:	87 95       	ror	r24
    2780:	95 95       	asr	r25
    2782:	87 95       	ror	r24
    2784:	95 95       	asr	r25
    2786:	87 95       	ror	r24
    2788:	95 95       	asr	r25
    278a:	87 95       	ror	r24
    278c:	95 95       	asr	r25
    278e:	87 95       	ror	r24
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f3       	breq	.-38     	; 0x276e <MTimerCalcDutyCycle+0xf4>
	G_u32CountsForFirstFaling = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    2794:	e6 e4       	ldi	r30, 0x46	; 70
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	91 81       	ldd	r25, Z+1	; 0x01
    279c:	7c 01       	movw	r14, r24
    279e:	00 e0       	ldi	r16, 0x00	; 0
    27a0:	10 e0       	ldi	r17, 0x00	; 0
    27a2:	80 91 c4 01 	lds	r24, 0x01C4
    27a6:	90 91 c5 01 	lds	r25, 0x01C5
    27aa:	a0 91 c6 01 	lds	r26, 0x01C6
    27ae:	b0 91 c7 01 	lds	r27, 0x01C7
    27b2:	2f ef       	ldi	r18, 0xFF	; 255
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8e 0d       	add	r24, r14
    27c8:	9f 1d       	adc	r25, r15
    27ca:	a0 1f       	adc	r26, r16
    27cc:	b1 1f       	adc	r27, r17
    27ce:	80 93 cc 01 	sts	0x01CC, r24
    27d2:	90 93 cd 01 	sts	0x01CD, r25
    27d6:	a0 93 ce 01 	sts	0x01CE, r26
    27da:	b0 93 cf 01 	sts	0x01CF, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    27de:	a8 e5       	ldi	r26, 0x58	; 88
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e8 e5       	ldi	r30, 0x58	; 88
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	80 62       	ori	r24, 0x20	; 32
    27ea:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    27ec:	ae e4       	ldi	r26, 0x4E	; 78
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ee e4       	ldi	r30, 0x4E	; 78
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 64       	ori	r24, 0x40	; 64
    27f8:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    27fa:	e8 e5       	ldi	r30, 0x58	; 88
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	80 72       	andi	r24, 0x20	; 32
    2806:	90 70       	andi	r25, 0x00	; 0
    2808:	95 95       	asr	r25
    280a:	87 95       	ror	r24
    280c:	95 95       	asr	r25
    280e:	87 95       	ror	r24
    2810:	95 95       	asr	r25
    2812:	87 95       	ror	r24
    2814:	95 95       	asr	r25
    2816:	87 95       	ror	r24
    2818:	95 95       	asr	r25
    281a:	87 95       	ror	r24
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	69 f3       	breq	.-38     	; 0x27fa <MTimerCalcDutyCycle+0x180>
	G_u32CountsForSecondRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    2820:	e6 e4       	ldi	r30, 0x46	; 70
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	7c 01       	movw	r14, r24
    282a:	00 e0       	ldi	r16, 0x00	; 0
    282c:	10 e0       	ldi	r17, 0x00	; 0
    282e:	80 91 c4 01 	lds	r24, 0x01C4
    2832:	90 91 c5 01 	lds	r25, 0x01C5
    2836:	a0 91 c6 01 	lds	r26, 0x01C6
    283a:	b0 91 c7 01 	lds	r27, 0x01C7
    283e:	2f ef       	ldi	r18, 0xFF	; 255
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	8e 0d       	add	r24, r14
    2854:	9f 1d       	adc	r25, r15
    2856:	a0 1f       	adc	r26, r16
    2858:	b1 1f       	adc	r27, r17
    285a:	80 93 d0 01 	sts	0x01D0, r24
    285e:	90 93 d1 01 	sts	0x01D1, r25
    2862:	a0 93 d2 01 	sts	0x01D2, r26
    2866:	b0 93 d3 01 	sts	0x01D3, r27
	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    286a:	a8 e5       	ldi	r26, 0x58	; 88
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e8 e5       	ldi	r30, 0x58	; 88
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	80 62       	ori	r24, 0x20	; 32
    2876:	8c 93       	st	X, r24

	G_u32OverFlowCounts = 0 ;
    2878:	10 92 c4 01 	sts	0x01C4, r1
    287c:	10 92 c5 01 	sts	0x01C5, r1
    2880:	10 92 c6 01 	sts	0x01C6, r1
    2884:	10 92 c7 01 	sts	0x01C7, r1

	L_u32High   = G_u32CountsForFirstFaling - G_u32CountsForFirstRising ;
    2888:	20 91 cc 01 	lds	r18, 0x01CC
    288c:	30 91 cd 01 	lds	r19, 0x01CD
    2890:	40 91 ce 01 	lds	r20, 0x01CE
    2894:	50 91 cf 01 	lds	r21, 0x01CF
    2898:	80 91 c8 01 	lds	r24, 0x01C8
    289c:	90 91 c9 01 	lds	r25, 0x01C9
    28a0:	a0 91 ca 01 	lds	r26, 0x01CA
    28a4:	b0 91 cb 01 	lds	r27, 0x01CB
    28a8:	79 01       	movw	r14, r18
    28aa:	8a 01       	movw	r16, r20
    28ac:	e8 1a       	sub	r14, r24
    28ae:	f9 0a       	sbc	r15, r25
    28b0:	0a 0b       	sbc	r16, r26
    28b2:	1b 0b       	sbc	r17, r27
    28b4:	d8 01       	movw	r26, r16
    28b6:	c7 01       	movw	r24, r14
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	9e 83       	std	Y+6, r25	; 0x06
    28bc:	af 83       	std	Y+7, r26	; 0x07
    28be:	b8 87       	std	Y+8, r27	; 0x08
	L_u32Period = G_u32CountsForSecondRising - G_u32CountsForFirstRising ;
    28c0:	20 91 d0 01 	lds	r18, 0x01D0
    28c4:	30 91 d1 01 	lds	r19, 0x01D1
    28c8:	40 91 d2 01 	lds	r20, 0x01D2
    28cc:	50 91 d3 01 	lds	r21, 0x01D3
    28d0:	80 91 c8 01 	lds	r24, 0x01C8
    28d4:	90 91 c9 01 	lds	r25, 0x01C9
    28d8:	a0 91 ca 01 	lds	r26, 0x01CA
    28dc:	b0 91 cb 01 	lds	r27, 0x01CB
    28e0:	79 01       	movw	r14, r18
    28e2:	8a 01       	movw	r16, r20
    28e4:	e8 1a       	sub	r14, r24
    28e6:	f9 0a       	sbc	r15, r25
    28e8:	0a 0b       	sbc	r16, r26
    28ea:	1b 0b       	sbc	r17, r27
    28ec:	d8 01       	movw	r26, r16
    28ee:	c7 01       	movw	r24, r14
    28f0:	89 87       	std	Y+9, r24	; 0x09
    28f2:	9a 87       	std	Y+10, r25	; 0x0a
    28f4:	ab 87       	std	Y+11, r26	; 0x0b
    28f6:	bc 87       	std	Y+12, r27	; 0x0c
	L_f32Duty = L_u32High * 100 ;
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	af 81       	ldd	r26, Y+7	; 0x07
    28fe:	b8 85       	ldd	r27, Y+8	; 0x08
    2900:	24 e6       	ldi	r18, 0x64	; 100
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	50 e0       	ldi	r21, 0x00	; 0
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	ab 83       	std	Y+3, r26	; 0x03
    2926:	bc 83       	std	Y+4, r27	; 0x04
	L_f32Duty = L_f32Duty / (f32)L_u32Period ;
    2928:	69 85       	ldd	r22, Y+9	; 0x09
    292a:	7a 85       	ldd	r23, Y+10	; 0x0a
    292c:	8b 85       	ldd	r24, Y+11	; 0x0b
    292e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2930:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2934:	9b 01       	movw	r18, r22
    2936:	ac 01       	movw	r20, r24
    2938:	69 81       	ldd	r22, Y+1	; 0x01
    293a:	7a 81       	ldd	r23, Y+2	; 0x02
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	9c 81       	ldd	r25, Y+4	; 0x04
    2940:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	ab 83       	std	Y+3, r26	; 0x03
    294e:	bc 83       	std	Y+4, r27	; 0x04
	return L_f32Duty ;
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	ab 81       	ldd	r26, Y+3	; 0x03
    2956:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	2c 96       	adiw	r28, 0x0c	; 12
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	08 95       	ret

00002976 <MTimerCalcFreqofTtotal>:

u32 MTimerCalcFreqofTtotal (void)
{
    2976:	ef 92       	push	r14
    2978:	ff 92       	push	r15
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	00 d0       	rcall	.+0      	; 0x2984 <MTimerCalcFreqofTtotal+0xe>
    2984:	00 d0       	rcall	.+0      	; 0x2986 <MTimerCalcFreqofTtotal+0x10>
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
		u32 L_u32Period = 0 ;
    298a:	19 82       	std	Y+1, r1	; 0x01
    298c:	1a 82       	std	Y+2, r1	; 0x02
    298e:	1b 82       	std	Y+3, r1	; 0x03
    2990:	1c 82       	std	Y+4, r1	; 0x04
		G_u32OverFlowCounts = 0 ;
    2992:	10 92 c4 01 	sts	0x01C4, r1
    2996:	10 92 c5 01 	sts	0x01C5, r1
    299a:	10 92 c6 01 	sts	0x01C6, r1
    299e:	10 92 c7 01 	sts	0x01C7, r1

		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    29a2:	a8 e5       	ldi	r26, 0x58	; 88
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e8 e5       	ldi	r30, 0x58	; 88
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	80 62       	ori	r24, 0x20	; 32
    29ae:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    29b0:	ae e4       	ldi	r26, 0x4E	; 78
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	ee e4       	ldi	r30, 0x4E	; 78
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	80 64       	ori	r24, 0x40	; 64
    29bc:	8c 93       	st	X, r24
		while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    29be:	e8 e5       	ldi	r30, 0x58	; 88
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	88 2f       	mov	r24, r24
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	80 72       	andi	r24, 0x20	; 32
    29ca:	90 70       	andi	r25, 0x00	; 0
    29cc:	95 95       	asr	r25
    29ce:	87 95       	ror	r24
    29d0:	95 95       	asr	r25
    29d2:	87 95       	ror	r24
    29d4:	95 95       	asr	r25
    29d6:	87 95       	ror	r24
    29d8:	95 95       	asr	r25
    29da:	87 95       	ror	r24
    29dc:	95 95       	asr	r25
    29de:	87 95       	ror	r24
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	69 f3       	breq	.-38     	; 0x29be <MTimerCalcFreqofTtotal+0x48>
		G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    29e4:	e6 e4       	ldi	r30, 0x46	; 70
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	7c 01       	movw	r14, r24
    29ee:	00 e0       	ldi	r16, 0x00	; 0
    29f0:	10 e0       	ldi	r17, 0x00	; 0
    29f2:	80 91 c4 01 	lds	r24, 0x01C4
    29f6:	90 91 c5 01 	lds	r25, 0x01C5
    29fa:	a0 91 c6 01 	lds	r26, 0x01C6
    29fe:	b0 91 c7 01 	lds	r27, 0x01C7
    2a02:	2f ef       	ldi	r18, 0xFF	; 255
    2a04:	3f ef       	ldi	r19, 0xFF	; 255
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8e 0d       	add	r24, r14
    2a18:	9f 1d       	adc	r25, r15
    2a1a:	a0 1f       	adc	r26, r16
    2a1c:	b1 1f       	adc	r27, r17
    2a1e:	80 93 c8 01 	sts	0x01C8, r24
    2a22:	90 93 c9 01 	sts	0x01C9, r25
    2a26:	a0 93 ca 01 	sts	0x01CA, r26
    2a2a:	b0 93 cb 01 	sts	0x01CB, r27

		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    2a2e:	a8 e5       	ldi	r26, 0x58	; 88
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e8 e5       	ldi	r30, 0x58	; 88
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	80 62       	ori	r24, 0x20	; 32
    2a3a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    2a3c:	ae e4       	ldi	r26, 0x4E	; 78
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ee e4       	ldi	r30, 0x4E	; 78
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	80 64       	ori	r24, 0x40	; 64
    2a48:	8c 93       	st	X, r24
		while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    2a4a:	e8 e5       	ldi	r30, 0x58	; 88
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	88 2f       	mov	r24, r24
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	80 72       	andi	r24, 0x20	; 32
    2a56:	90 70       	andi	r25, 0x00	; 0
    2a58:	95 95       	asr	r25
    2a5a:	87 95       	ror	r24
    2a5c:	95 95       	asr	r25
    2a5e:	87 95       	ror	r24
    2a60:	95 95       	asr	r25
    2a62:	87 95       	ror	r24
    2a64:	95 95       	asr	r25
    2a66:	87 95       	ror	r24
    2a68:	95 95       	asr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	69 f3       	breq	.-38     	; 0x2a4a <MTimerCalcFreqofTtotal+0xd4>
		G_u32CountsForSecondRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    2a70:	e6 e4       	ldi	r30, 0x46	; 70
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	7c 01       	movw	r14, r24
    2a7a:	00 e0       	ldi	r16, 0x00	; 0
    2a7c:	10 e0       	ldi	r17, 0x00	; 0
    2a7e:	80 91 c4 01 	lds	r24, 0x01C4
    2a82:	90 91 c5 01 	lds	r25, 0x01C5
    2a86:	a0 91 c6 01 	lds	r26, 0x01C6
    2a8a:	b0 91 c7 01 	lds	r27, 0x01C7
    2a8e:	2f ef       	ldi	r18, 0xFF	; 255
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8e 0d       	add	r24, r14
    2aa4:	9f 1d       	adc	r25, r15
    2aa6:	a0 1f       	adc	r26, r16
    2aa8:	b1 1f       	adc	r27, r17
    2aaa:	80 93 d0 01 	sts	0x01D0, r24
    2aae:	90 93 d1 01 	sts	0x01D1, r25
    2ab2:	a0 93 d2 01 	sts	0x01D2, r26
    2ab6:	b0 93 d3 01 	sts	0x01D3, r27
		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    2aba:	a8 e5       	ldi	r26, 0x58	; 88
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e8 e5       	ldi	r30, 0x58	; 88
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	80 62       	ori	r24, 0x20	; 32
    2ac6:	8c 93       	st	X, r24

		G_u32OverFlowCounts = 0 ;
    2ac8:	10 92 c4 01 	sts	0x01C4, r1
    2acc:	10 92 c5 01 	sts	0x01C5, r1
    2ad0:	10 92 c6 01 	sts	0x01C6, r1
    2ad4:	10 92 c7 01 	sts	0x01C7, r1

		L_u32Period = G_u32CountsForSecondRising - G_u32CountsForFirstRising ;
    2ad8:	20 91 d0 01 	lds	r18, 0x01D0
    2adc:	30 91 d1 01 	lds	r19, 0x01D1
    2ae0:	40 91 d2 01 	lds	r20, 0x01D2
    2ae4:	50 91 d3 01 	lds	r21, 0x01D3
    2ae8:	80 91 c8 01 	lds	r24, 0x01C8
    2aec:	90 91 c9 01 	lds	r25, 0x01C9
    2af0:	a0 91 ca 01 	lds	r26, 0x01CA
    2af4:	b0 91 cb 01 	lds	r27, 0x01CB
    2af8:	79 01       	movw	r14, r18
    2afa:	8a 01       	movw	r16, r20
    2afc:	e8 1a       	sub	r14, r24
    2afe:	f9 0a       	sbc	r15, r25
    2b00:	0a 0b       	sbc	r16, r26
    2b02:	1b 0b       	sbc	r17, r27
    2b04:	d8 01       	movw	r26, r16
    2b06:	c7 01       	movw	r24, r14
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	ab 83       	std	Y+3, r26	; 0x03
    2b0e:	bc 83       	std	Y+4, r27	; 0x04
		G_u32FrequancyOfTimeTotal = CLOK_SYSTEM / (L_u32Period * (u32)TIMER1_PRESCALER) ;
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	92 e1       	ldi	r25, 0x12	; 18
    2b14:	aa e7       	ldi	r26, 0x7A	; 122
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	29 81       	ldd	r18, Y+1	; 0x01
    2b1a:	3a 81       	ldd	r19, Y+2	; 0x02
    2b1c:	4b 81       	ldd	r20, Y+3	; 0x03
    2b1e:	5c 81       	ldd	r21, Y+4	; 0x04
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
    2b28:	da 01       	movw	r26, r20
    2b2a:	c9 01       	movw	r24, r18
    2b2c:	80 93 d8 01 	sts	0x01D8, r24
    2b30:	90 93 d9 01 	sts	0x01D9, r25
    2b34:	a0 93 da 01 	sts	0x01DA, r26
    2b38:	b0 93 db 01 	sts	0x01DB, r27
		return G_u32FrequancyOfTimeTotal ;
    2b3c:	80 91 d8 01 	lds	r24, 0x01D8
    2b40:	90 91 d9 01 	lds	r25, 0x01D9
    2b44:	a0 91 da 01 	lds	r26, 0x01DA
    2b48:	b0 91 db 01 	lds	r27, 0x01DB
}
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	1f 91       	pop	r17
    2b5e:	0f 91       	pop	r16
    2b60:	ff 90       	pop	r15
    2b62:	ef 90       	pop	r14
    2b64:	08 95       	ret

00002b66 <CLR_COUNTER>:

void CLR_COUNTER(void)
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
		LS_u32Counter=0;
    2b6e:	10 92 dc 01 	sts	0x01DC, r1
    2b72:	10 92 dd 01 	sts	0x01DD, r1
    2b76:	10 92 de 01 	sts	0x01DE, r1
    2b7a:	10 92 df 01 	sts	0x01DF, r1
		TCNT2 = L_u16PreloadValue ;
    2b7e:	e4 e4       	ldi	r30, 0x44	; 68
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 91 ee 01 	lds	r24, 0x01EE
    2b86:	90 91 ef 01 	lds	r25, 0x01EF
    2b8a:	80 83       	st	Z, r24
		G_u8Timer2Flag = 0	;
    2b8c:	10 92 fd 01 	sts	0x01FD, r1
}
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <MEXTI_voidInit>:
static void (*INT0_CallBack)(void) ; /**pointer to function to set call back of INT0_ISR*/
static void (*INT1_CallBack)(void) ; /**pointer to function to set call back of INT1_ISR*/
static void (*INT2_CallBack)(void) ; /**pointer to function to set call back of INT2_ISR*/

void MEXTI_voidInit (void) 
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
	/** Enable global interrupt flag */
	    SET_BIT(SREG, I_BIT);
    2b9e:	af e5       	ldi	r26, 0x5F	; 95
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	ef e5       	ldi	r30, 0x5F	; 95
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	80 68       	ori	r24, 0x80	; 128
    2baa:	8c 93       	st	X, r24
	/******************************************/
	/**         External interrupt 0          */
	#if   EXTI0 == ENABLE
	
	    /** Enable PIE of INT0 */
	    SET_BIT(GICR, INT0);
    2bac:	ab e5       	ldi	r26, 0x5B	; 91
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	eb e5       	ldi	r30, 0x5B	; 91
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	80 64       	ori	r24, 0x40	; 64
    2bb8:	8c 93       	st	X, r24
		    	SET_BIT (MCUCR , ISC00 ) ;
		    	CLR_BIT (MCUCR , ISC01 ) ;
		    	
	        #elif EXTI0_SENCE == FALLING_EDGE
		        /** sense INT0 to falling edge */
		    	CLR_BIT (MCUCR , ISC00 ) ;
    2bba:	a5 e5       	ldi	r26, 0x55	; 85
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e5 e5       	ldi	r30, 0x55	; 85
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8e 7f       	andi	r24, 0xFE	; 254
    2bc6:	8c 93       	st	X, r24
		    	SET_BIT (MCUCR , ISC01 ) ;
    2bc8:	a5 e5       	ldi	r26, 0x55	; 85
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e5 e5       	ldi	r30, 0x55	; 85
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	82 60       	ori	r24, 0x02	; 2
    2bd4:	8c 93       	st	X, r24
	/******************************************/
	/**         External interrupt 1          */
	#if   EXTI1 == ENABLE
	
	    /** Enable PIE of INT1 */
	    SET_BIT(GICR, INT1);
    2bd6:	ab e5       	ldi	r26, 0x5B	; 91
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	eb e5       	ldi	r30, 0x5B	; 91
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	80 68       	ori	r24, 0x80	; 128
    2be2:	8c 93       	st	X, r24
		    	SET_BIT (MCUCR , ISC10 ) ;
		    	CLR_BIT (MCUCR , ISC11 ) ;
		    			  
	        #elif EXTI1_SENCE == FALLING_EDGE
		        /** sense INT1 to falling edge */
		    	CLR_BIT (MCUCR , ISC10 ) ;
    2be4:	a5 e5       	ldi	r26, 0x55	; 85
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e5 e5       	ldi	r30, 0x55	; 85
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	8b 7f       	andi	r24, 0xFB	; 251
    2bf0:	8c 93       	st	X, r24
    	        SET_BIT (MCUCR , ISC11 ) ;
    2bf2:	a5 e5       	ldi	r26, 0x55	; 85
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	e5 e5       	ldi	r30, 0x55	; 85
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	88 60       	ori	r24, 0x08	; 8
    2bfe:	8c 93       	st	X, r24
	/******************************************/
	/**         External interrupt 2          */
	#if   EXTI2 == ENABLE
	
	    /** Enable PIE of INT2 */
	    SET_BIT(GICR, INT2) ;
    2c00:	ab e5       	ldi	r26, 0x5B	; 91
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	eb e5       	ldi	r30, 0x5B	; 91
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	80 62       	ori	r24, 0x20	; 32
    2c0c:	8c 93       	st	X, r24
		
		/** Sence control of INT2*/
	        #if   EXTI2_SENCE == FALLING_EDGE
		         /** sense INT2 to falling edge */
		         CLR_BIT (MCUCSR , ISC2 ) ;
    2c0e:	a4 e5       	ldi	r26, 0x54	; 84
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e4 e5       	ldi	r30, 0x54	; 84
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	8f 7b       	andi	r24, 0xBF	; 191
    2c1a:	8c 93       	st	X, r24
	    CLR_BIT(GICR, INT2);
	
	#else 
	    #error "EXTI2 must be ENABLE or DISABLE"
	#endif
}
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <MINT0_voidSetCallback>:

void MINT0_voidSetCallback( void (*A_fptr)(void)  )
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <MINT0_voidSetCallback+0x6>
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	INT0_CallBack = A_fptr;
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	90 93 f1 01 	sts	0x01F1, r25
    2c38:	80 93 f0 01 	sts	0x01F0, r24
}
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <MINT1_voidSetCallback>:

void MINT1_voidSetCallback( void (*A_fptr)(void)  )
{
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <MINT1_voidSetCallback+0x6>
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	9a 83       	std	Y+2, r25	; 0x02
    2c52:	89 83       	std	Y+1, r24	; 0x01
	INT1_CallBack = A_fptr;
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	90 93 f3 01 	sts	0x01F3, r25
    2c5c:	80 93 f2 01 	sts	0x01F2, r24
}
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <MINT2_voidSetCallback>:

void MINT2_voidSetCallback( void (*A_fptr)(void)  )
{
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <MINT2_voidSetCallback+0x6>
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
	INT2_CallBack = A_fptr;
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	90 93 f5 01 	sts	0x01F5, r25
    2c80:	80 93 f4 01 	sts	0x01F4, r24
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <__vector_1>:

/**ISR of INT0*/
void __vector_1(void)__attribute__((signal))__attribute__((interrupt));
void __vector_1(void)
{
    2c8e:	78 94       	sei
    2c90:	1f 92       	push	r1
    2c92:	0f 92       	push	r0
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	0f 92       	push	r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	if (INT0_CallBack != 0)
    2cba:	80 91 f0 01 	lds	r24, 0x01F0
    2cbe:	90 91 f1 01 	lds	r25, 0x01F1
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	29 f0       	breq	.+10     	; 0x2cd0 <__vector_1+0x42>
	{
		INT0_CallBack () ;
    2cc6:	e0 91 f0 01 	lds	r30, 0x01F0
    2cca:	f0 91 f1 01 	lds	r31, 0x01F1
    2cce:	09 95       	icall
	}
}
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	ff 91       	pop	r31
    2cd6:	ef 91       	pop	r30
    2cd8:	bf 91       	pop	r27
    2cda:	af 91       	pop	r26
    2cdc:	9f 91       	pop	r25
    2cde:	8f 91       	pop	r24
    2ce0:	7f 91       	pop	r23
    2ce2:	6f 91       	pop	r22
    2ce4:	5f 91       	pop	r21
    2ce6:	4f 91       	pop	r20
    2ce8:	3f 91       	pop	r19
    2cea:	2f 91       	pop	r18
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <__vector_2>:

/**ISR of INT1*/
void __vector_2(void)__attribute__((signal))__attribute__((interrupt));
void __vector_2(void)
{
    2cf6:	78 94       	sei
    2cf8:	1f 92       	push	r1
    2cfa:	0f 92       	push	r0
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	0f 92       	push	r0
    2d00:	11 24       	eor	r1, r1
    2d02:	2f 93       	push	r18
    2d04:	3f 93       	push	r19
    2d06:	4f 93       	push	r20
    2d08:	5f 93       	push	r21
    2d0a:	6f 93       	push	r22
    2d0c:	7f 93       	push	r23
    2d0e:	8f 93       	push	r24
    2d10:	9f 93       	push	r25
    2d12:	af 93       	push	r26
    2d14:	bf 93       	push	r27
    2d16:	ef 93       	push	r30
    2d18:	ff 93       	push	r31
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
	if (INT1_CallBack != 0)
    2d22:	80 91 f2 01 	lds	r24, 0x01F2
    2d26:	90 91 f3 01 	lds	r25, 0x01F3
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	29 f0       	breq	.+10     	; 0x2d38 <__vector_2+0x42>
	{
		INT1_CallBack () ;
    2d2e:	e0 91 f2 01 	lds	r30, 0x01F2
    2d32:	f0 91 f3 01 	lds	r31, 0x01F3
    2d36:	09 95       	icall
	}
}
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	ff 91       	pop	r31
    2d3e:	ef 91       	pop	r30
    2d40:	bf 91       	pop	r27
    2d42:	af 91       	pop	r26
    2d44:	9f 91       	pop	r25
    2d46:	8f 91       	pop	r24
    2d48:	7f 91       	pop	r23
    2d4a:	6f 91       	pop	r22
    2d4c:	5f 91       	pop	r21
    2d4e:	4f 91       	pop	r20
    2d50:	3f 91       	pop	r19
    2d52:	2f 91       	pop	r18
    2d54:	0f 90       	pop	r0
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	0f 90       	pop	r0
    2d5a:	1f 90       	pop	r1
    2d5c:	18 95       	reti

00002d5e <__vector_3>:

/**ISR of INT2*/
void __vector_3(void)__attribute__((signal))__attribute__((interrupt));
void __vector_3(void)
{
    2d5e:	78 94       	sei
    2d60:	1f 92       	push	r1
    2d62:	0f 92       	push	r0
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	0f 92       	push	r0
    2d68:	11 24       	eor	r1, r1
    2d6a:	2f 93       	push	r18
    2d6c:	3f 93       	push	r19
    2d6e:	4f 93       	push	r20
    2d70:	5f 93       	push	r21
    2d72:	6f 93       	push	r22
    2d74:	7f 93       	push	r23
    2d76:	8f 93       	push	r24
    2d78:	9f 93       	push	r25
    2d7a:	af 93       	push	r26
    2d7c:	bf 93       	push	r27
    2d7e:	ef 93       	push	r30
    2d80:	ff 93       	push	r31
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
	if (INT2_CallBack != 0)
    2d8a:	80 91 f4 01 	lds	r24, 0x01F4
    2d8e:	90 91 f5 01 	lds	r25, 0x01F5
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	29 f0       	breq	.+10     	; 0x2da0 <__vector_3+0x42>
	{
		INT2_CallBack () ;
    2d96:	e0 91 f4 01 	lds	r30, 0x01F4
    2d9a:	f0 91 f5 01 	lds	r31, 0x01F5
    2d9e:	09 95       	icall
	}
}
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	ff 91       	pop	r31
    2da6:	ef 91       	pop	r30
    2da8:	bf 91       	pop	r27
    2daa:	af 91       	pop	r26
    2dac:	9f 91       	pop	r25
    2dae:	8f 91       	pop	r24
    2db0:	7f 91       	pop	r23
    2db2:	6f 91       	pop	r22
    2db4:	5f 91       	pop	r21
    2db6:	4f 91       	pop	r20
    2db8:	3f 91       	pop	r19
    2dba:	2f 91       	pop	r18
    2dbc:	0f 90       	pop	r0
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	0f 90       	pop	r0
    2dc2:	1f 90       	pop	r1
    2dc4:	18 95       	reti

00002dc6 <MDIO_voidSetPinDir>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "DIO_int.h"

void MDIO_voidSetPinDir (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDir)
{
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	00 d0       	rcall	.+0      	; 0x2dcc <MDIO_voidSetPinDir+0x6>
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <MDIO_voidSetPinDir+0x8>
    2dce:	0f 92       	push	r0
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	6a 83       	std	Y+2, r22	; 0x02
    2dd8:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortNo)
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	28 2f       	mov	r18, r24
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	3d 83       	std	Y+5, r19	; 0x05
    2de2:	2c 83       	std	Y+4, r18	; 0x04
    2de4:	6c 81       	ldd	r22, Y+4	; 0x04
    2de6:	7d 81       	ldd	r23, Y+5	; 0x05
    2de8:	62 30       	cpi	r22, 0x02	; 2
    2dea:	71 05       	cpc	r23, r1
    2dec:	d1 f1       	breq	.+116    	; 0x2e62 <MDIO_voidSetPinDir+0x9c>
    2dee:	8c 81       	ldd	r24, Y+4	; 0x04
    2df0:	9d 81       	ldd	r25, Y+5	; 0x05
    2df2:	83 30       	cpi	r24, 0x03	; 3
    2df4:	91 05       	cpc	r25, r1
    2df6:	34 f4       	brge	.+12     	; 0x2e04 <MDIO_voidSetPinDir+0x3e>
    2df8:	2c 81       	ldd	r18, Y+4	; 0x04
    2dfa:	3d 81       	ldd	r19, Y+5	; 0x05
    2dfc:	21 30       	cpi	r18, 0x01	; 1
    2dfe:	31 05       	cpc	r19, r1
    2e00:	71 f0       	breq	.+28     	; 0x2e1e <MDIO_voidSetPinDir+0x58>
    2e02:	94 c0       	rjmp	.+296    	; 0x2f2c <MDIO_voidSetPinDir+0x166>
    2e04:	6c 81       	ldd	r22, Y+4	; 0x04
    2e06:	7d 81       	ldd	r23, Y+5	; 0x05
    2e08:	63 30       	cpi	r22, 0x03	; 3
    2e0a:	71 05       	cpc	r23, r1
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <MDIO_voidSetPinDir+0x4a>
    2e0e:	4b c0       	rjmp	.+150    	; 0x2ea6 <MDIO_voidSetPinDir+0xe0>
    2e10:	8c 81       	ldd	r24, Y+4	; 0x04
    2e12:	9d 81       	ldd	r25, Y+5	; 0x05
    2e14:	84 30       	cpi	r24, 0x04	; 4
    2e16:	91 05       	cpc	r25, r1
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <MDIO_voidSetPinDir+0x56>
    2e1a:	67 c0       	rjmp	.+206    	; 0x2eea <MDIO_voidSetPinDir+0x124>
    2e1c:	87 c0       	rjmp	.+270    	; 0x2f2c <MDIO_voidSetPinDir+0x166>
	    {
	    case DIO_PORTA : WRT_BIT(DDRA , A_u8PinNo , A_u8PinDir) ; break ;
    2e1e:	aa e3       	ldi	r26, 0x3A	; 58
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	ea e3       	ldi	r30, 0x3A	; 58
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	48 2f       	mov	r20, r24
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <MDIO_voidSetPinDir+0x74>
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	2a 95       	dec	r18
    2e3c:	e2 f7       	brpl	.-8      	; 0x2e36 <MDIO_voidSetPinDir+0x70>
    2e3e:	80 95       	com	r24
    2e40:	48 23       	and	r20, r24
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	88 2f       	mov	r24, r24
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	b9 01       	movw	r22, r18
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <MDIO_voidSetPinDir+0x90>
    2e52:	66 0f       	add	r22, r22
    2e54:	77 1f       	adc	r23, r23
    2e56:	8a 95       	dec	r24
    2e58:	e2 f7       	brpl	.-8      	; 0x2e52 <MDIO_voidSetPinDir+0x8c>
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	84 2b       	or	r24, r20
    2e5e:	8c 93       	st	X, r24
    2e60:	65 c0       	rjmp	.+202    	; 0x2f2c <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTB : WRT_BIT(DDRB , A_u8PinNo , A_u8PinDir) ; break ;
    2e62:	a7 e3       	ldi	r26, 0x37	; 55
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e7 e3       	ldi	r30, 0x37	; 55
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	48 2f       	mov	r20, r24
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	28 2f       	mov	r18, r24
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <MDIO_voidSetPinDir+0xb8>
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	2a 95       	dec	r18
    2e80:	e2 f7       	brpl	.-8      	; 0x2e7a <MDIO_voidSetPinDir+0xb4>
    2e82:	80 95       	com	r24
    2e84:	48 23       	and	r20, r24
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	b9 01       	movw	r22, r18
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <MDIO_voidSetPinDir+0xd4>
    2e96:	66 0f       	add	r22, r22
    2e98:	77 1f       	adc	r23, r23
    2e9a:	8a 95       	dec	r24
    2e9c:	e2 f7       	brpl	.-8      	; 0x2e96 <MDIO_voidSetPinDir+0xd0>
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	84 2b       	or	r24, r20
    2ea2:	8c 93       	st	X, r24
    2ea4:	43 c0       	rjmp	.+134    	; 0x2f2c <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTC : WRT_BIT(DDRC , A_u8PinNo , A_u8PinDir) ; break ;
    2ea6:	a4 e3       	ldi	r26, 0x34	; 52
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e4 e3       	ldi	r30, 0x34	; 52
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	48 2f       	mov	r20, r24
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <MDIO_voidSetPinDir+0xfc>
    2ebe:	88 0f       	add	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	2a 95       	dec	r18
    2ec4:	e2 f7       	brpl	.-8      	; 0x2ebe <MDIO_voidSetPinDir+0xf8>
    2ec6:	80 95       	com	r24
    2ec8:	48 23       	and	r20, r24
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	88 2f       	mov	r24, r24
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	b9 01       	movw	r22, r18
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <MDIO_voidSetPinDir+0x118>
    2eda:	66 0f       	add	r22, r22
    2edc:	77 1f       	adc	r23, r23
    2ede:	8a 95       	dec	r24
    2ee0:	e2 f7       	brpl	.-8      	; 0x2eda <MDIO_voidSetPinDir+0x114>
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	84 2b       	or	r24, r20
    2ee6:	8c 93       	st	X, r24
    2ee8:	21 c0       	rjmp	.+66     	; 0x2f2c <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTD : WRT_BIT(DDRD , A_u8PinNo , A_u8PinDir) ; break ;
    2eea:	a1 e3       	ldi	r26, 0x31	; 49
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	e1 e3       	ldi	r30, 0x31	; 49
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	48 2f       	mov	r20, r24
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	02 c0       	rjmp	.+4      	; 0x2f06 <MDIO_voidSetPinDir+0x140>
    2f02:	88 0f       	add	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	2a 95       	dec	r18
    2f08:	e2 f7       	brpl	.-8      	; 0x2f02 <MDIO_voidSetPinDir+0x13c>
    2f0a:	80 95       	com	r24
    2f0c:	48 23       	and	r20, r24
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	88 2f       	mov	r24, r24
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	b9 01       	movw	r22, r18
    2f1c:	02 c0       	rjmp	.+4      	; 0x2f22 <MDIO_voidSetPinDir+0x15c>
    2f1e:	66 0f       	add	r22, r22
    2f20:	77 1f       	adc	r23, r23
    2f22:	8a 95       	dec	r24
    2f24:	e2 f7       	brpl	.-8      	; 0x2f1e <MDIO_voidSetPinDir+0x158>
    2f26:	cb 01       	movw	r24, r22
    2f28:	84 2b       	or	r24, r20
    2f2a:	8c 93       	st	X, r24
	    default : /**Error*/ break ;
	    }
}
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <MDIO_voidSetPinVal>:

void MDIO_voidSetPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <MDIO_voidSetPinVal+0x6>
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <MDIO_voidSetPinVal+0x8>
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	28 2f       	mov	r18, r24
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	3c 83       	std	Y+4, r19	; 0x04
    2f54:	2b 83       	std	Y+3, r18	; 0x03
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	82 30       	cpi	r24, 0x02	; 2
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	51 f1       	breq	.+84     	; 0x2fb4 <MDIO_voidSetPinVal+0x78>
    2f60:	2b 81       	ldd	r18, Y+3	; 0x03
    2f62:	3c 81       	ldd	r19, Y+4	; 0x04
    2f64:	23 30       	cpi	r18, 0x03	; 3
    2f66:	31 05       	cpc	r19, r1
    2f68:	34 f4       	brge	.+12     	; 0x2f76 <MDIO_voidSetPinVal+0x3a>
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6e:	81 30       	cpi	r24, 0x01	; 1
    2f70:	91 05       	cpc	r25, r1
    2f72:	61 f0       	breq	.+24     	; 0x2f8c <MDIO_voidSetPinVal+0x50>
    2f74:	5a c0       	rjmp	.+180    	; 0x302a <MDIO_voidSetPinVal+0xee>
    2f76:	2b 81       	ldd	r18, Y+3	; 0x03
    2f78:	3c 81       	ldd	r19, Y+4	; 0x04
    2f7a:	23 30       	cpi	r18, 0x03	; 3
    2f7c:	31 05       	cpc	r19, r1
    2f7e:	71 f1       	breq	.+92     	; 0x2fdc <MDIO_voidSetPinVal+0xa0>
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	84 30       	cpi	r24, 0x04	; 4
    2f86:	91 05       	cpc	r25, r1
    2f88:	e9 f1       	breq	.+122    	; 0x3004 <MDIO_voidSetPinVal+0xc8>
    2f8a:	4f c0       	rjmp	.+158    	; 0x302a <MDIO_voidSetPinVal+0xee>
		{
		case DIO_PORTA : SET_BIT(PORTA , A_u8PinNo ) ; break ;
    2f8c:	ab e3       	ldi	r26, 0x3B	; 59
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	eb e3       	ldi	r30, 0x3B	; 59
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	48 2f       	mov	r20, r24
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	02 2e       	mov	r0, r18
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <MDIO_voidSetPinVal+0x6e>
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	0a 94       	dec	r0
    2fac:	e2 f7       	brpl	.-8      	; 0x2fa6 <MDIO_voidSetPinVal+0x6a>
    2fae:	84 2b       	or	r24, r20
    2fb0:	8c 93       	st	X, r24
    2fb2:	3b c0       	rjmp	.+118    	; 0x302a <MDIO_voidSetPinVal+0xee>
		case DIO_PORTB : SET_BIT(PORTB , A_u8PinNo ) ; break ;
    2fb4:	a8 e3       	ldi	r26, 0x38	; 56
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e8 e3       	ldi	r30, 0x38	; 56
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	48 2f       	mov	r20, r24
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	02 2e       	mov	r0, r18
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <MDIO_voidSetPinVal+0x96>
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	0a 94       	dec	r0
    2fd4:	e2 f7       	brpl	.-8      	; 0x2fce <MDIO_voidSetPinVal+0x92>
    2fd6:	84 2b       	or	r24, r20
    2fd8:	8c 93       	st	X, r24
    2fda:	27 c0       	rjmp	.+78     	; 0x302a <MDIO_voidSetPinVal+0xee>
		case DIO_PORTC : SET_BIT(PORTC , A_u8PinNo ) ; break ;
    2fdc:	a5 e3       	ldi	r26, 0x35	; 53
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e5 e3       	ldi	r30, 0x35	; 53
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	48 2f       	mov	r20, r24
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	02 2e       	mov	r0, r18
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <MDIO_voidSetPinVal+0xbe>
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	0a 94       	dec	r0
    2ffc:	e2 f7       	brpl	.-8      	; 0x2ff6 <MDIO_voidSetPinVal+0xba>
    2ffe:	84 2b       	or	r24, r20
    3000:	8c 93       	st	X, r24
    3002:	13 c0       	rjmp	.+38     	; 0x302a <MDIO_voidSetPinVal+0xee>
		case DIO_PORTD : SET_BIT(PORTD , A_u8PinNo ) ; break ;
    3004:	a2 e3       	ldi	r26, 0x32	; 50
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e2 e3       	ldi	r30, 0x32	; 50
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	48 2f       	mov	r20, r24
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	02 2e       	mov	r0, r18
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <MDIO_voidSetPinVal+0xe6>
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	0a 94       	dec	r0
    3024:	e2 f7       	brpl	.-8      	; 0x301e <MDIO_voidSetPinVal+0xe2>
    3026:	84 2b       	or	r24, r20
    3028:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <MDIO_u8GetPinVal>:

u8   MDIO_u8GetPinVal   (u8 A_u8PortNo , u8 A_u8PinNo)
{
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	00 d0       	rcall	.+0      	; 0x303e <MDIO_u8GetPinVal+0x6>
    303e:	00 d0       	rcall	.+0      	; 0x3040 <MDIO_u8GetPinVal+0x8>
    3040:	0f 92       	push	r0
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	8a 83       	std	Y+2, r24	; 0x02
    3048:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	28 2f       	mov	r18, r24
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	3d 83       	std	Y+5, r19	; 0x05
    3052:	2c 83       	std	Y+4, r18	; 0x04
    3054:	4c 81       	ldd	r20, Y+4	; 0x04
    3056:	5d 81       	ldd	r21, Y+5	; 0x05
    3058:	42 30       	cpi	r20, 0x02	; 2
    305a:	51 05       	cpc	r21, r1
    305c:	b1 f1       	breq	.+108    	; 0x30ca <MDIO_u8GetPinVal+0x92>
    305e:	8c 81       	ldd	r24, Y+4	; 0x04
    3060:	9d 81       	ldd	r25, Y+5	; 0x05
    3062:	83 30       	cpi	r24, 0x03	; 3
    3064:	91 05       	cpc	r25, r1
    3066:	34 f4       	brge	.+12     	; 0x3074 <MDIO_u8GetPinVal+0x3c>
    3068:	2c 81       	ldd	r18, Y+4	; 0x04
    306a:	3d 81       	ldd	r19, Y+5	; 0x05
    306c:	21 30       	cpi	r18, 0x01	; 1
    306e:	31 05       	cpc	r19, r1
    3070:	71 f0       	breq	.+28     	; 0x308e <MDIO_u8GetPinVal+0x56>
    3072:	84 c0       	rjmp	.+264    	; 0x317c <MDIO_u8GetPinVal+0x144>
    3074:	4c 81       	ldd	r20, Y+4	; 0x04
    3076:	5d 81       	ldd	r21, Y+5	; 0x05
    3078:	43 30       	cpi	r20, 0x03	; 3
    307a:	51 05       	cpc	r21, r1
    307c:	09 f4       	brne	.+2      	; 0x3080 <MDIO_u8GetPinVal+0x48>
    307e:	43 c0       	rjmp	.+134    	; 0x3106 <MDIO_u8GetPinVal+0xce>
    3080:	8c 81       	ldd	r24, Y+4	; 0x04
    3082:	9d 81       	ldd	r25, Y+5	; 0x05
    3084:	84 30       	cpi	r24, 0x04	; 4
    3086:	91 05       	cpc	r25, r1
    3088:	09 f4       	brne	.+2      	; 0x308c <MDIO_u8GetPinVal+0x54>
    308a:	5b c0       	rjmp	.+182    	; 0x3142 <MDIO_u8GetPinVal+0x10a>
    308c:	77 c0       	rjmp	.+238    	; 0x317c <MDIO_u8GetPinVal+0x144>
		{
		case DIO_PORTA : L_u8PinVal = READ_BIT(PINA , A_u8PinNo) ; break ;
    308e:	e9 e3       	ldi	r30, 0x39	; 57
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	48 2f       	mov	r20, r24
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	8b 81       	ldd	r24, Y+3	; 0x03
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <MDIO_u8GetPinVal+0x70>
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	2a 95       	dec	r18
    30aa:	e2 f7       	brpl	.-8      	; 0x30a4 <MDIO_u8GetPinVal+0x6c>
    30ac:	9a 01       	movw	r18, r20
    30ae:	28 23       	and	r18, r24
    30b0:	39 23       	and	r19, r25
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	88 2f       	mov	r24, r24
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a9 01       	movw	r20, r18
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <MDIO_u8GetPinVal+0x88>
    30bc:	55 95       	asr	r21
    30be:	47 95       	ror	r20
    30c0:	8a 95       	dec	r24
    30c2:	e2 f7       	brpl	.-8      	; 0x30bc <MDIO_u8GetPinVal+0x84>
    30c4:	ca 01       	movw	r24, r20
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	59 c0       	rjmp	.+178    	; 0x317c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTB : L_u8PinVal = READ_BIT(PINB , A_u8PinNo) ; break ;
    30ca:	e6 e3       	ldi	r30, 0x36	; 54
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	48 2f       	mov	r20, r24
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <MDIO_u8GetPinVal+0xac>
    30e0:	88 0f       	add	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	2a 95       	dec	r18
    30e6:	e2 f7       	brpl	.-8      	; 0x30e0 <MDIO_u8GetPinVal+0xa8>
    30e8:	9a 01       	movw	r18, r20
    30ea:	28 23       	and	r18, r24
    30ec:	39 23       	and	r19, r25
    30ee:	8b 81       	ldd	r24, Y+3	; 0x03
    30f0:	88 2f       	mov	r24, r24
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	a9 01       	movw	r20, r18
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <MDIO_u8GetPinVal+0xc4>
    30f8:	55 95       	asr	r21
    30fa:	47 95       	ror	r20
    30fc:	8a 95       	dec	r24
    30fe:	e2 f7       	brpl	.-8      	; 0x30f8 <MDIO_u8GetPinVal+0xc0>
    3100:	ca 01       	movw	r24, r20
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	3b c0       	rjmp	.+118    	; 0x317c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTC : L_u8PinVal = READ_BIT(PINC , A_u8PinNo) ; break ;
    3106:	e3 e3       	ldi	r30, 0x33	; 51
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	48 2f       	mov	r20, r24
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <MDIO_u8GetPinVal+0xe8>
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	2a 95       	dec	r18
    3122:	e2 f7       	brpl	.-8      	; 0x311c <MDIO_u8GetPinVal+0xe4>
    3124:	9a 01       	movw	r18, r20
    3126:	28 23       	and	r18, r24
    3128:	39 23       	and	r19, r25
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	88 2f       	mov	r24, r24
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a9 01       	movw	r20, r18
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <MDIO_u8GetPinVal+0x100>
    3134:	55 95       	asr	r21
    3136:	47 95       	ror	r20
    3138:	8a 95       	dec	r24
    313a:	e2 f7       	brpl	.-8      	; 0x3134 <MDIO_u8GetPinVal+0xfc>
    313c:	ca 01       	movw	r24, r20
    313e:	89 83       	std	Y+1, r24	; 0x01
    3140:	1d c0       	rjmp	.+58     	; 0x317c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTD : L_u8PinVal = READ_BIT(PIND , A_u8PinNo) ; break ;
    3142:	e0 e3       	ldi	r30, 0x30	; 48
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	48 2f       	mov	r20, r24
    314a:	50 e0       	ldi	r21, 0x00	; 0
    314c:	8b 81       	ldd	r24, Y+3	; 0x03
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	02 c0       	rjmp	.+4      	; 0x315c <MDIO_u8GetPinVal+0x124>
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	2a 95       	dec	r18
    315e:	e2 f7       	brpl	.-8      	; 0x3158 <MDIO_u8GetPinVal+0x120>
    3160:	9a 01       	movw	r18, r20
    3162:	28 23       	and	r18, r24
    3164:	39 23       	and	r19, r25
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a9 01       	movw	r20, r18
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <MDIO_u8GetPinVal+0x13c>
    3170:	55 95       	asr	r21
    3172:	47 95       	ror	r20
    3174:	8a 95       	dec	r24
    3176:	e2 f7       	brpl	.-8      	; 0x3170 <MDIO_u8GetPinVal+0x138>
    3178:	ca 01       	movw	r24, r20
    317a:	89 83       	std	Y+1, r24	; 0x01
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
    317c:	89 81       	ldd	r24, Y+1	; 0x01
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <MDIO_voidSetPortVal>:

void MDIO_voidSetPortVal (u8 A_u8PortNo , u8 A_u8PortVal)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	00 d0       	rcall	.+0      	; 0x3194 <MDIO_voidSetPortVal+0x6>
    3194:	00 d0       	rcall	.+0      	; 0x3196 <MDIO_voidSetPortVal+0x8>
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	3c 83       	std	Y+4, r19	; 0x04
    31a6:	2b 83       	std	Y+3, r18	; 0x03
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	9c 81       	ldd	r25, Y+4	; 0x04
    31ac:	82 30       	cpi	r24, 0x02	; 2
    31ae:	91 05       	cpc	r25, r1
    31b0:	d9 f0       	breq	.+54     	; 0x31e8 <MDIO_voidSetPortVal+0x5a>
    31b2:	2b 81       	ldd	r18, Y+3	; 0x03
    31b4:	3c 81       	ldd	r19, Y+4	; 0x04
    31b6:	23 30       	cpi	r18, 0x03	; 3
    31b8:	31 05       	cpc	r19, r1
    31ba:	34 f4       	brge	.+12     	; 0x31c8 <MDIO_voidSetPortVal+0x3a>
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	9c 81       	ldd	r25, Y+4	; 0x04
    31c0:	81 30       	cpi	r24, 0x01	; 1
    31c2:	91 05       	cpc	r25, r1
    31c4:	61 f0       	breq	.+24     	; 0x31de <MDIO_voidSetPortVal+0x50>
    31c6:	1e c0       	rjmp	.+60     	; 0x3204 <MDIO_voidSetPortVal+0x76>
    31c8:	2b 81       	ldd	r18, Y+3	; 0x03
    31ca:	3c 81       	ldd	r19, Y+4	; 0x04
    31cc:	23 30       	cpi	r18, 0x03	; 3
    31ce:	31 05       	cpc	r19, r1
    31d0:	81 f0       	breq	.+32     	; 0x31f2 <MDIO_voidSetPortVal+0x64>
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	9c 81       	ldd	r25, Y+4	; 0x04
    31d6:	84 30       	cpi	r24, 0x04	; 4
    31d8:	91 05       	cpc	r25, r1
    31da:	81 f0       	breq	.+32     	; 0x31fc <MDIO_voidSetPortVal+0x6e>
    31dc:	13 c0       	rjmp	.+38     	; 0x3204 <MDIO_voidSetPortVal+0x76>
		{
		case DIO_PORTA : PORTA = A_u8PortVal  ; break ;
    31de:	eb e3       	ldi	r30, 0x3B	; 59
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	8a 81       	ldd	r24, Y+2	; 0x02
    31e4:	80 83       	st	Z, r24
    31e6:	0e c0       	rjmp	.+28     	; 0x3204 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTB : PORTB = A_u8PortVal  ; break ;
    31e8:	e8 e3       	ldi	r30, 0x38	; 56
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	8a 81       	ldd	r24, Y+2	; 0x02
    31ee:	80 83       	st	Z, r24
    31f0:	09 c0       	rjmp	.+18     	; 0x3204 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTC : PORTC = A_u8PortVal  ; break ;
    31f2:	e5 e3       	ldi	r30, 0x35	; 53
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	80 83       	st	Z, r24
    31fa:	04 c0       	rjmp	.+8      	; 0x3204 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTD : PORTD = A_u8PortVal  ; break ;
    31fc:	e2 e3       	ldi	r30, 0x32	; 50
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	80 83       	st	Z, r24
		default : /**Error*/ break ;
		}
}
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <MDIO_voidSetPortDir>:

void MDIO_voidSetPortDir (u8 A_u8PortNo , u8 A_u8PortVal)
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	00 d0       	rcall	.+0      	; 0x3218 <MDIO_voidSetPortDir+0x6>
    3218:	00 d0       	rcall	.+0      	; 0x321a <MDIO_voidSetPortDir+0x8>
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	89 83       	std	Y+1, r24	; 0x01
    3220:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	3c 83       	std	Y+4, r19	; 0x04
    322a:	2b 83       	std	Y+3, r18	; 0x03
    322c:	8b 81       	ldd	r24, Y+3	; 0x03
    322e:	9c 81       	ldd	r25, Y+4	; 0x04
    3230:	82 30       	cpi	r24, 0x02	; 2
    3232:	91 05       	cpc	r25, r1
    3234:	d9 f0       	breq	.+54     	; 0x326c <MDIO_voidSetPortDir+0x5a>
    3236:	2b 81       	ldd	r18, Y+3	; 0x03
    3238:	3c 81       	ldd	r19, Y+4	; 0x04
    323a:	23 30       	cpi	r18, 0x03	; 3
    323c:	31 05       	cpc	r19, r1
    323e:	34 f4       	brge	.+12     	; 0x324c <MDIO_voidSetPortDir+0x3a>
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	9c 81       	ldd	r25, Y+4	; 0x04
    3244:	81 30       	cpi	r24, 0x01	; 1
    3246:	91 05       	cpc	r25, r1
    3248:	61 f0       	breq	.+24     	; 0x3262 <MDIO_voidSetPortDir+0x50>
    324a:	1e c0       	rjmp	.+60     	; 0x3288 <MDIO_voidSetPortDir+0x76>
    324c:	2b 81       	ldd	r18, Y+3	; 0x03
    324e:	3c 81       	ldd	r19, Y+4	; 0x04
    3250:	23 30       	cpi	r18, 0x03	; 3
    3252:	31 05       	cpc	r19, r1
    3254:	81 f0       	breq	.+32     	; 0x3276 <MDIO_voidSetPortDir+0x64>
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	9c 81       	ldd	r25, Y+4	; 0x04
    325a:	84 30       	cpi	r24, 0x04	; 4
    325c:	91 05       	cpc	r25, r1
    325e:	81 f0       	breq	.+32     	; 0x3280 <MDIO_voidSetPortDir+0x6e>
    3260:	13 c0       	rjmp	.+38     	; 0x3288 <MDIO_voidSetPortDir+0x76>
		{
		case DIO_PORTA : DDRA = A_u8PortVal  ; break ;
    3262:	ea e3       	ldi	r30, 0x3A	; 58
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	80 83       	st	Z, r24
    326a:	0e c0       	rjmp	.+28     	; 0x3288 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTB : DDRB = A_u8PortVal  ; break ;
    326c:	e7 e3       	ldi	r30, 0x37	; 55
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	80 83       	st	Z, r24
    3274:	09 c0       	rjmp	.+18     	; 0x3288 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTC : DDRC = A_u8PortVal  ; break ;
    3276:	e4 e3       	ldi	r30, 0x34	; 52
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	80 83       	st	Z, r24
    327e:	04 c0       	rjmp	.+8      	; 0x3288 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTD : DDRD = A_u8PortVal  ; break ;
    3280:	e1 e3       	ldi	r30, 0x31	; 49
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	8a 81       	ldd	r24, Y+2	; 0x02
    3286:	80 83       	st	Z, r24
		default : /**Error*/ break ;
		}
}
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <MDIO_u8GetPortVal>:

u8   MDIO_u8GetPortVal   (u8 A_u8PortNo)
{
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	00 d0       	rcall	.+0      	; 0x329c <MDIO_u8GetPortVal+0x6>
    329c:	00 d0       	rcall	.+0      	; 0x329e <MDIO_u8GetPortVal+0x8>
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	3c 83       	std	Y+4, r19	; 0x04
    32ac:	2b 83       	std	Y+3, r18	; 0x03
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	9c 81       	ldd	r25, Y+4	; 0x04
    32b2:	82 30       	cpi	r24, 0x02	; 2
    32b4:	91 05       	cpc	r25, r1
    32b6:	d9 f0       	breq	.+54     	; 0x32ee <MDIO_u8GetPortVal+0x58>
    32b8:	2b 81       	ldd	r18, Y+3	; 0x03
    32ba:	3c 81       	ldd	r19, Y+4	; 0x04
    32bc:	23 30       	cpi	r18, 0x03	; 3
    32be:	31 05       	cpc	r19, r1
    32c0:	34 f4       	brge	.+12     	; 0x32ce <MDIO_u8GetPortVal+0x38>
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	9c 81       	ldd	r25, Y+4	; 0x04
    32c6:	81 30       	cpi	r24, 0x01	; 1
    32c8:	91 05       	cpc	r25, r1
    32ca:	61 f0       	breq	.+24     	; 0x32e4 <MDIO_u8GetPortVal+0x4e>
    32cc:	1e c0       	rjmp	.+60     	; 0x330a <MDIO_u8GetPortVal+0x74>
    32ce:	2b 81       	ldd	r18, Y+3	; 0x03
    32d0:	3c 81       	ldd	r19, Y+4	; 0x04
    32d2:	23 30       	cpi	r18, 0x03	; 3
    32d4:	31 05       	cpc	r19, r1
    32d6:	81 f0       	breq	.+32     	; 0x32f8 <MDIO_u8GetPortVal+0x62>
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	9c 81       	ldd	r25, Y+4	; 0x04
    32dc:	84 30       	cpi	r24, 0x04	; 4
    32de:	91 05       	cpc	r25, r1
    32e0:	81 f0       	breq	.+32     	; 0x3302 <MDIO_u8GetPortVal+0x6c>
    32e2:	13 c0       	rjmp	.+38     	; 0x330a <MDIO_u8GetPortVal+0x74>
		{
		case DIO_PORTA : L_u8PinVal = PINA ; break ;
    32e4:	e9 e3       	ldi	r30, 0x39	; 57
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	0e c0       	rjmp	.+28     	; 0x330a <MDIO_u8GetPortVal+0x74>
		case DIO_PORTB : L_u8PinVal = PINB ; break ;
    32ee:	e6 e3       	ldi	r30, 0x36	; 54
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	89 83       	std	Y+1, r24	; 0x01
    32f6:	09 c0       	rjmp	.+18     	; 0x330a <MDIO_u8GetPortVal+0x74>
		case DIO_PORTC : L_u8PinVal = PINC ; break ;
    32f8:	e3 e3       	ldi	r30, 0x33	; 51
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	04 c0       	rjmp	.+8      	; 0x330a <MDIO_u8GetPortVal+0x74>
		case DIO_PORTD : L_u8PinVal = PIND ; break ;
    3302:	e0 e3       	ldi	r30, 0x30	; 48
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	89 83       	std	Y+1, r24	; 0x01
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
    330a:	89 81       	ldd	r24, Y+1	; 0x01
}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <MDIO_voidClrPinVal>:

void MDIO_voidClrPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	00 d0       	rcall	.+0      	; 0x3320 <MDIO_voidClrPinVal+0x6>
    3320:	00 d0       	rcall	.+0      	; 0x3322 <MDIO_voidClrPinVal+0x8>
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	3c 83       	std	Y+4, r19	; 0x04
    3332:	2b 83       	std	Y+3, r18	; 0x03
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	82 30       	cpi	r24, 0x02	; 2
    333a:	91 05       	cpc	r25, r1
    333c:	61 f1       	breq	.+88     	; 0x3396 <MDIO_voidClrPinVal+0x7c>
    333e:	2b 81       	ldd	r18, Y+3	; 0x03
    3340:	3c 81       	ldd	r19, Y+4	; 0x04
    3342:	23 30       	cpi	r18, 0x03	; 3
    3344:	31 05       	cpc	r19, r1
    3346:	34 f4       	brge	.+12     	; 0x3354 <MDIO_voidClrPinVal+0x3a>
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	9c 81       	ldd	r25, Y+4	; 0x04
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	91 05       	cpc	r25, r1
    3350:	69 f0       	breq	.+26     	; 0x336c <MDIO_voidClrPinVal+0x52>
    3352:	5f c0       	rjmp	.+190    	; 0x3412 <MDIO_voidClrPinVal+0xf8>
    3354:	2b 81       	ldd	r18, Y+3	; 0x03
    3356:	3c 81       	ldd	r19, Y+4	; 0x04
    3358:	23 30       	cpi	r18, 0x03	; 3
    335a:	31 05       	cpc	r19, r1
    335c:	89 f1       	breq	.+98     	; 0x33c0 <MDIO_voidClrPinVal+0xa6>
    335e:	8b 81       	ldd	r24, Y+3	; 0x03
    3360:	9c 81       	ldd	r25, Y+4	; 0x04
    3362:	84 30       	cpi	r24, 0x04	; 4
    3364:	91 05       	cpc	r25, r1
    3366:	09 f4       	brne	.+2      	; 0x336a <MDIO_voidClrPinVal+0x50>
    3368:	40 c0       	rjmp	.+128    	; 0x33ea <MDIO_voidClrPinVal+0xd0>
    336a:	53 c0       	rjmp	.+166    	; 0x3412 <MDIO_voidClrPinVal+0xf8>
		{
		case DIO_PORTA : CLR_BIT(PORTA , A_u8PinNo) ; break ;
    336c:	ab e3       	ldi	r26, 0x3B	; 59
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	eb e3       	ldi	r30, 0x3B	; 59
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	48 2f       	mov	r20, r24
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	28 2f       	mov	r18, r24
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	02 2e       	mov	r0, r18
    3384:	02 c0       	rjmp	.+4      	; 0x338a <MDIO_voidClrPinVal+0x70>
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	0a 94       	dec	r0
    338c:	e2 f7       	brpl	.-8      	; 0x3386 <MDIO_voidClrPinVal+0x6c>
    338e:	80 95       	com	r24
    3390:	84 23       	and	r24, r20
    3392:	8c 93       	st	X, r24
    3394:	3e c0       	rjmp	.+124    	; 0x3412 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTB : CLR_BIT(PORTB , A_u8PinNo) ; break ;
    3396:	a8 e3       	ldi	r26, 0x38	; 56
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	e8 e3       	ldi	r30, 0x38	; 56
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	48 2f       	mov	r20, r24
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	02 2e       	mov	r0, r18
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <MDIO_voidClrPinVal+0x9a>
    33b0:	88 0f       	add	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	0a 94       	dec	r0
    33b6:	e2 f7       	brpl	.-8      	; 0x33b0 <MDIO_voidClrPinVal+0x96>
    33b8:	80 95       	com	r24
    33ba:	84 23       	and	r24, r20
    33bc:	8c 93       	st	X, r24
    33be:	29 c0       	rjmp	.+82     	; 0x3412 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTC : CLR_BIT(PORTC , A_u8PinNo) ; break ;
    33c0:	a5 e3       	ldi	r26, 0x35	; 53
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	e5 e3       	ldi	r30, 0x35	; 53
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	48 2f       	mov	r20, r24
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	02 2e       	mov	r0, r18
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <MDIO_voidClrPinVal+0xc4>
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	0a 94       	dec	r0
    33e0:	e2 f7       	brpl	.-8      	; 0x33da <MDIO_voidClrPinVal+0xc0>
    33e2:	80 95       	com	r24
    33e4:	84 23       	and	r24, r20
    33e6:	8c 93       	st	X, r24
    33e8:	14 c0       	rjmp	.+40     	; 0x3412 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTD : CLR_BIT(PORTD , A_u8PinNo) ; break ;
    33ea:	a2 e3       	ldi	r26, 0x32	; 50
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	e2 e3       	ldi	r30, 0x32	; 50
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	48 2f       	mov	r20, r24
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	28 2f       	mov	r18, r24
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	02 2e       	mov	r0, r18
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <MDIO_voidClrPinVal+0xee>
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	0a 94       	dec	r0
    340a:	e2 f7       	brpl	.-8      	; 0x3404 <MDIO_voidClrPinVal+0xea>
    340c:	80 95       	com	r24
    340e:	84 23       	and	r24, r20
    3410:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	cf 91       	pop	r28
    341c:	df 91       	pop	r29
    341e:	08 95       	ret

00003420 <MDIO_voidClrPort>:

void MDIO_voidClrPort (u8 A_u8PortNo)
{
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	00 d0       	rcall	.+0      	; 0x3426 <MDIO_voidClrPort+0x6>
    3426:	0f 92       	push	r0
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	3b 83       	std	Y+3, r19	; 0x03
    3436:	2a 83       	std	Y+2, r18	; 0x02
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	9b 81       	ldd	r25, Y+3	; 0x03
    343c:	82 30       	cpi	r24, 0x02	; 2
    343e:	91 05       	cpc	r25, r1
    3440:	d1 f0       	breq	.+52     	; 0x3476 <MDIO_voidClrPort+0x56>
    3442:	2a 81       	ldd	r18, Y+2	; 0x02
    3444:	3b 81       	ldd	r19, Y+3	; 0x03
    3446:	23 30       	cpi	r18, 0x03	; 3
    3448:	31 05       	cpc	r19, r1
    344a:	34 f4       	brge	.+12     	; 0x3458 <MDIO_voidClrPort+0x38>
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
    344e:	9b 81       	ldd	r25, Y+3	; 0x03
    3450:	81 30       	cpi	r24, 0x01	; 1
    3452:	91 05       	cpc	r25, r1
    3454:	61 f0       	breq	.+24     	; 0x346e <MDIO_voidClrPort+0x4e>
    3456:	1a c0       	rjmp	.+52     	; 0x348c <MDIO_voidClrPort+0x6c>
    3458:	2a 81       	ldd	r18, Y+2	; 0x02
    345a:	3b 81       	ldd	r19, Y+3	; 0x03
    345c:	23 30       	cpi	r18, 0x03	; 3
    345e:	31 05       	cpc	r19, r1
    3460:	71 f0       	breq	.+28     	; 0x347e <MDIO_voidClrPort+0x5e>
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	9b 81       	ldd	r25, Y+3	; 0x03
    3466:	84 30       	cpi	r24, 0x04	; 4
    3468:	91 05       	cpc	r25, r1
    346a:	69 f0       	breq	.+26     	; 0x3486 <MDIO_voidClrPort+0x66>
    346c:	0f c0       	rjmp	.+30     	; 0x348c <MDIO_voidClrPort+0x6c>
		{
		case DIO_PORTA : PORTA = ALL_PINS_ZERO ; break ;
    346e:	eb e3       	ldi	r30, 0x3B	; 59
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	10 82       	st	Z, r1
    3474:	0b c0       	rjmp	.+22     	; 0x348c <MDIO_voidClrPort+0x6c>
		case DIO_PORTB : PORTB = ALL_PINS_ZERO ; break ;
    3476:	e8 e3       	ldi	r30, 0x38	; 56
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	10 82       	st	Z, r1
    347c:	07 c0       	rjmp	.+14     	; 0x348c <MDIO_voidClrPort+0x6c>
		case DIO_PORTC : PORTC = ALL_PINS_ZERO ; break ;
    347e:	e5 e3       	ldi	r30, 0x35	; 53
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	10 82       	st	Z, r1
    3484:	03 c0       	rjmp	.+6      	; 0x348c <MDIO_voidClrPort+0x6c>
		case DIO_PORTD : PORTD = ALL_PINS_ZERO ; break ;
    3486:	e2 e3       	ldi	r30, 0x32	; 50
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	10 82       	st	Z, r1
		default : /**Error*/ break ;
		}
}
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	08 95       	ret

00003498 <MDIO_voidTogPinVal>:

void MDIO_voidTogPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    3498:	df 93       	push	r29
    349a:	cf 93       	push	r28
    349c:	00 d0       	rcall	.+0      	; 0x349e <MDIO_voidTogPinVal+0x6>
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <MDIO_voidTogPinVal+0x8>
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	28 2f       	mov	r18, r24
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	3c 83       	std	Y+4, r19	; 0x04
    34b0:	2b 83       	std	Y+3, r18	; 0x03
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	9c 81       	ldd	r25, Y+4	; 0x04
    34b6:	82 30       	cpi	r24, 0x02	; 2
    34b8:	91 05       	cpc	r25, r1
    34ba:	51 f1       	breq	.+84     	; 0x3510 <MDIO_voidTogPinVal+0x78>
    34bc:	2b 81       	ldd	r18, Y+3	; 0x03
    34be:	3c 81       	ldd	r19, Y+4	; 0x04
    34c0:	23 30       	cpi	r18, 0x03	; 3
    34c2:	31 05       	cpc	r19, r1
    34c4:	34 f4       	brge	.+12     	; 0x34d2 <MDIO_voidTogPinVal+0x3a>
    34c6:	8b 81       	ldd	r24, Y+3	; 0x03
    34c8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	91 05       	cpc	r25, r1
    34ce:	61 f0       	breq	.+24     	; 0x34e8 <MDIO_voidTogPinVal+0x50>
    34d0:	5a c0       	rjmp	.+180    	; 0x3586 <MDIO_voidTogPinVal+0xee>
    34d2:	2b 81       	ldd	r18, Y+3	; 0x03
    34d4:	3c 81       	ldd	r19, Y+4	; 0x04
    34d6:	23 30       	cpi	r18, 0x03	; 3
    34d8:	31 05       	cpc	r19, r1
    34da:	71 f1       	breq	.+92     	; 0x3538 <MDIO_voidTogPinVal+0xa0>
    34dc:	8b 81       	ldd	r24, Y+3	; 0x03
    34de:	9c 81       	ldd	r25, Y+4	; 0x04
    34e0:	84 30       	cpi	r24, 0x04	; 4
    34e2:	91 05       	cpc	r25, r1
    34e4:	e9 f1       	breq	.+122    	; 0x3560 <MDIO_voidTogPinVal+0xc8>
    34e6:	4f c0       	rjmp	.+158    	; 0x3586 <MDIO_voidTogPinVal+0xee>
		{
		case DIO_PORTA : TOG_BIT(PORTA , A_u8PinNo) ; break ;
    34e8:	ab e3       	ldi	r26, 0x3B	; 59
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	eb e3       	ldi	r30, 0x3B	; 59
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	48 2f       	mov	r20, r24
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	28 2f       	mov	r18, r24
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	02 2e       	mov	r0, r18
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <MDIO_voidTogPinVal+0x6e>
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	0a 94       	dec	r0
    3508:	e2 f7       	brpl	.-8      	; 0x3502 <MDIO_voidTogPinVal+0x6a>
    350a:	84 27       	eor	r24, r20
    350c:	8c 93       	st	X, r24
    350e:	3b c0       	rjmp	.+118    	; 0x3586 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTB : TOG_BIT(PORTB , A_u8PinNo) ; break ;
    3510:	a8 e3       	ldi	r26, 0x38	; 56
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	e8 e3       	ldi	r30, 0x38	; 56
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	80 81       	ld	r24, Z
    351a:	48 2f       	mov	r20, r24
    351c:	8a 81       	ldd	r24, Y+2	; 0x02
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	02 2e       	mov	r0, r18
    3528:	02 c0       	rjmp	.+4      	; 0x352e <MDIO_voidTogPinVal+0x96>
    352a:	88 0f       	add	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	0a 94       	dec	r0
    3530:	e2 f7       	brpl	.-8      	; 0x352a <MDIO_voidTogPinVal+0x92>
    3532:	84 27       	eor	r24, r20
    3534:	8c 93       	st	X, r24
    3536:	27 c0       	rjmp	.+78     	; 0x3586 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTC : TOG_BIT(PORTC , A_u8PinNo) ; break ;
    3538:	a5 e3       	ldi	r26, 0x35	; 53
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	e5 e3       	ldi	r30, 0x35	; 53
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	48 2f       	mov	r20, r24
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
    3546:	28 2f       	mov	r18, r24
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	02 2e       	mov	r0, r18
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <MDIO_voidTogPinVal+0xbe>
    3552:	88 0f       	add	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	0a 94       	dec	r0
    3558:	e2 f7       	brpl	.-8      	; 0x3552 <MDIO_voidTogPinVal+0xba>
    355a:	84 27       	eor	r24, r20
    355c:	8c 93       	st	X, r24
    355e:	13 c0       	rjmp	.+38     	; 0x3586 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTD : TOG_BIT(PORTD , A_u8PinNo) ; break ;
    3560:	a2 e3       	ldi	r26, 0x32	; 50
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	e2 e3       	ldi	r30, 0x32	; 50
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	48 2f       	mov	r20, r24
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	28 2f       	mov	r18, r24
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	02 2e       	mov	r0, r18
    3578:	02 c0       	rjmp	.+4      	; 0x357e <MDIO_voidTogPinVal+0xe6>
    357a:	88 0f       	add	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	0a 94       	dec	r0
    3580:	e2 f7       	brpl	.-8      	; 0x357a <MDIO_voidTogPinVal+0xe2>
    3582:	84 27       	eor	r24, r20
    3584:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	cf 91       	pop	r28
    3590:	df 91       	pop	r29
    3592:	08 95       	ret

00003594 <MDIO_voidTogPort>:

void MDIO_voidTogPort (u8 A_u8PortNo)
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	00 d0       	rcall	.+0      	; 0x359a <MDIO_voidTogPort+0x6>
    359a:	0f 92       	push	r0
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
    35a0:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	3b 83       	std	Y+3, r19	; 0x03
    35aa:	2a 83       	std	Y+2, r18	; 0x02
    35ac:	8a 81       	ldd	r24, Y+2	; 0x02
    35ae:	9b 81       	ldd	r25, Y+3	; 0x03
    35b0:	82 30       	cpi	r24, 0x02	; 2
    35b2:	91 05       	cpc	r25, r1
    35b4:	f1 f0       	breq	.+60     	; 0x35f2 <MDIO_voidTogPort+0x5e>
    35b6:	2a 81       	ldd	r18, Y+2	; 0x02
    35b8:	3b 81       	ldd	r19, Y+3	; 0x03
    35ba:	23 30       	cpi	r18, 0x03	; 3
    35bc:	31 05       	cpc	r19, r1
    35be:	34 f4       	brge	.+12     	; 0x35cc <MDIO_voidTogPort+0x38>
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	9b 81       	ldd	r25, Y+3	; 0x03
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	91 05       	cpc	r25, r1
    35c8:	61 f0       	breq	.+24     	; 0x35e2 <MDIO_voidTogPort+0x4e>
    35ca:	2a c0       	rjmp	.+84     	; 0x3620 <MDIO_voidTogPort+0x8c>
    35cc:	2a 81       	ldd	r18, Y+2	; 0x02
    35ce:	3b 81       	ldd	r19, Y+3	; 0x03
    35d0:	23 30       	cpi	r18, 0x03	; 3
    35d2:	31 05       	cpc	r19, r1
    35d4:	b1 f0       	breq	.+44     	; 0x3602 <MDIO_voidTogPort+0x6e>
    35d6:	8a 81       	ldd	r24, Y+2	; 0x02
    35d8:	9b 81       	ldd	r25, Y+3	; 0x03
    35da:	84 30       	cpi	r24, 0x04	; 4
    35dc:	91 05       	cpc	r25, r1
    35de:	c9 f0       	breq	.+50     	; 0x3612 <MDIO_voidTogPort+0x7e>
    35e0:	1f c0       	rjmp	.+62     	; 0x3620 <MDIO_voidTogPort+0x8c>
		{
		case DIO_PORTA : PORTA = ~PORTA ; break ;
    35e2:	ab e3       	ldi	r26, 0x3B	; 59
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	eb e3       	ldi	r30, 0x3B	; 59
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	80 95       	com	r24
    35ee:	8c 93       	st	X, r24
    35f0:	17 c0       	rjmp	.+46     	; 0x3620 <MDIO_voidTogPort+0x8c>
		case DIO_PORTB : PORTB = ~PORTB ; break ;
    35f2:	a8 e3       	ldi	r26, 0x38	; 56
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	e8 e3       	ldi	r30, 0x38	; 56
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	80 95       	com	r24
    35fe:	8c 93       	st	X, r24
    3600:	0f c0       	rjmp	.+30     	; 0x3620 <MDIO_voidTogPort+0x8c>
		case DIO_PORTC : PORTC = ~PORTC ; break ;
    3602:	a5 e3       	ldi	r26, 0x35	; 53
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	e5 e3       	ldi	r30, 0x35	; 53
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	80 95       	com	r24
    360e:	8c 93       	st	X, r24
    3610:	07 c0       	rjmp	.+14     	; 0x3620 <MDIO_voidTogPort+0x8c>
		case DIO_PORTD : PORTD = ~PORTD ; break ;
    3612:	a2 e3       	ldi	r26, 0x32	; 50
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e2 e3       	ldi	r30, 0x32	; 50
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	80 95       	com	r24
    361e:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	08 95       	ret

0000362c <MDIO_voidWriteLowNibble>:

void MDIO_voidWriteLowNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	00 d0       	rcall	.+0      	; 0x3632 <MDIO_voidWriteLowNibble+0x6>
    3632:	00 d0       	rcall	.+0      	; 0x3634 <MDIO_voidWriteLowNibble+0x8>
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	6a 83       	std	Y+2, r22	; 0x02
	A_u8PortVal = A_u8PortVal & LOW_NIBBLE_OUTPUT ;
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	8f 70       	andi	r24, 0x0F	; 15
    3640:	8a 83       	std	Y+2, r24	; 0x02
	switch (A_u8PortNo)
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	28 2f       	mov	r18, r24
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	3c 83       	std	Y+4, r19	; 0x04
    364a:	2b 83       	std	Y+3, r18	; 0x03
    364c:	8b 81       	ldd	r24, Y+3	; 0x03
    364e:	9c 81       	ldd	r25, Y+4	; 0x04
    3650:	82 30       	cpi	r24, 0x02	; 2
    3652:	91 05       	cpc	r25, r1
    3654:	31 f1       	breq	.+76     	; 0x36a2 <MDIO_voidWriteLowNibble+0x76>
    3656:	2b 81       	ldd	r18, Y+3	; 0x03
    3658:	3c 81       	ldd	r19, Y+4	; 0x04
    365a:	23 30       	cpi	r18, 0x03	; 3
    365c:	31 05       	cpc	r19, r1
    365e:	34 f4       	brge	.+12     	; 0x366c <MDIO_voidWriteLowNibble+0x40>
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	9c 81       	ldd	r25, Y+4	; 0x04
    3664:	81 30       	cpi	r24, 0x01	; 1
    3666:	91 05       	cpc	r25, r1
    3668:	61 f0       	breq	.+24     	; 0x3682 <MDIO_voidWriteLowNibble+0x56>
    366a:	4a c0       	rjmp	.+148    	; 0x3700 <MDIO_voidWriteLowNibble+0xd4>
    366c:	2b 81       	ldd	r18, Y+3	; 0x03
    366e:	3c 81       	ldd	r19, Y+4	; 0x04
    3670:	23 30       	cpi	r18, 0x03	; 3
    3672:	31 05       	cpc	r19, r1
    3674:	31 f1       	breq	.+76     	; 0x36c2 <MDIO_voidWriteLowNibble+0x96>
    3676:	8b 81       	ldd	r24, Y+3	; 0x03
    3678:	9c 81       	ldd	r25, Y+4	; 0x04
    367a:	84 30       	cpi	r24, 0x04	; 4
    367c:	91 05       	cpc	r25, r1
    367e:	89 f1       	breq	.+98     	; 0x36e2 <MDIO_voidWriteLowNibble+0xb6>
    3680:	3f c0       	rjmp	.+126    	; 0x3700 <MDIO_voidWriteLowNibble+0xd4>
		{
		case DIO_PORTA : PORTA = PORTA & HIGH_NIBBLE_OUTPUT ;
    3682:	ab e3       	ldi	r26, 0x3B	; 59
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	eb e3       	ldi	r30, 0x3B	; 59
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	80 81       	ld	r24, Z
    368c:	80 7f       	andi	r24, 0xF0	; 240
    368e:	8c 93       	st	X, r24
						 PORTA = PORTA | A_u8PortVal        ;
    3690:	ab e3       	ldi	r26, 0x3B	; 59
    3692:	b0 e0       	ldi	r27, 0x00	; 0
    3694:	eb e3       	ldi	r30, 0x3B	; 59
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	90 81       	ld	r25, Z
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	89 2b       	or	r24, r25
    369e:	8c 93       	st	X, r24
    36a0:	2f c0       	rjmp	.+94     	; 0x3700 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTB : PORTB = PORTB & HIGH_NIBBLE_OUTPUT ;
    36a2:	a8 e3       	ldi	r26, 0x38	; 56
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	e8 e3       	ldi	r30, 0x38	; 56
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
    36ac:	80 7f       	andi	r24, 0xF0	; 240
    36ae:	8c 93       	st	X, r24
						 PORTB = PORTB | A_u8PortVal        ;		
    36b0:	a8 e3       	ldi	r26, 0x38	; 56
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	e8 e3       	ldi	r30, 0x38	; 56
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	90 81       	ld	r25, Z
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	89 2b       	or	r24, r25
    36be:	8c 93       	st	X, r24
    36c0:	1f c0       	rjmp	.+62     	; 0x3700 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTC : PORTC = PORTC & HIGH_NIBBLE_OUTPUT ; 
    36c2:	a5 e3       	ldi	r26, 0x35	; 53
    36c4:	b0 e0       	ldi	r27, 0x00	; 0
    36c6:	e5 e3       	ldi	r30, 0x35	; 53
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	80 81       	ld	r24, Z
    36cc:	80 7f       	andi	r24, 0xF0	; 240
    36ce:	8c 93       	st	X, r24
						 PORTC = PORTC | A_u8PortVal        ;		
    36d0:	a5 e3       	ldi	r26, 0x35	; 53
    36d2:	b0 e0       	ldi	r27, 0x00	; 0
    36d4:	e5 e3       	ldi	r30, 0x35	; 53
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	90 81       	ld	r25, Z
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
    36dc:	89 2b       	or	r24, r25
    36de:	8c 93       	st	X, r24
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTD : PORTD = PORTD & HIGH_NIBBLE_OUTPUT ;
    36e2:	a2 e3       	ldi	r26, 0x32	; 50
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	e2 e3       	ldi	r30, 0x32	; 50
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	80 81       	ld	r24, Z
    36ec:	80 7f       	andi	r24, 0xF0	; 240
    36ee:	8c 93       	st	X, r24
						 PORTD = PORTD | A_u8PortVal        ;		
    36f0:	a2 e3       	ldi	r26, 0x32	; 50
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	e2 e3       	ldi	r30, 0x32	; 50
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	90 81       	ld	r25, Z
    36fa:	8a 81       	ldd	r24, Y+2	; 0x02
    36fc:	89 2b       	or	r24, r25
    36fe:	8c 93       	st	X, r24
		                 break ;
		default : /**Error*/ break ;
		}
}
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <MDIO_voidWriteHighNibble>:

void MDIO_voidWriteHighNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <MDIO_voidWriteHighNibble+0x6>
    3714:	00 d0       	rcall	.+0      	; 0x3716 <MDIO_voidWriteHighNibble+0x8>
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	89 83       	std	Y+1, r24	; 0x01
    371c:	6a 83       	std	Y+2, r22	; 0x02
	A_u8PortVal = A_u8PortVal << FOUR_BITS ;
    371e:	8a 81       	ldd	r24, Y+2	; 0x02
    3720:	82 95       	swap	r24
    3722:	80 7f       	andi	r24, 0xF0	; 240
    3724:	8a 83       	std	Y+2, r24	; 0x02
	switch (A_u8PortNo)
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	28 2f       	mov	r18, r24
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	3c 83       	std	Y+4, r19	; 0x04
    372e:	2b 83       	std	Y+3, r18	; 0x03
    3730:	8b 81       	ldd	r24, Y+3	; 0x03
    3732:	9c 81       	ldd	r25, Y+4	; 0x04
    3734:	82 30       	cpi	r24, 0x02	; 2
    3736:	91 05       	cpc	r25, r1
    3738:	31 f1       	breq	.+76     	; 0x3786 <MDIO_voidWriteHighNibble+0x78>
    373a:	2b 81       	ldd	r18, Y+3	; 0x03
    373c:	3c 81       	ldd	r19, Y+4	; 0x04
    373e:	23 30       	cpi	r18, 0x03	; 3
    3740:	31 05       	cpc	r19, r1
    3742:	34 f4       	brge	.+12     	; 0x3750 <MDIO_voidWriteHighNibble+0x42>
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	81 30       	cpi	r24, 0x01	; 1
    374a:	91 05       	cpc	r25, r1
    374c:	61 f0       	breq	.+24     	; 0x3766 <MDIO_voidWriteHighNibble+0x58>
    374e:	4a c0       	rjmp	.+148    	; 0x37e4 <MDIO_voidWriteHighNibble+0xd6>
    3750:	2b 81       	ldd	r18, Y+3	; 0x03
    3752:	3c 81       	ldd	r19, Y+4	; 0x04
    3754:	23 30       	cpi	r18, 0x03	; 3
    3756:	31 05       	cpc	r19, r1
    3758:	31 f1       	breq	.+76     	; 0x37a6 <MDIO_voidWriteHighNibble+0x98>
    375a:	8b 81       	ldd	r24, Y+3	; 0x03
    375c:	9c 81       	ldd	r25, Y+4	; 0x04
    375e:	84 30       	cpi	r24, 0x04	; 4
    3760:	91 05       	cpc	r25, r1
    3762:	89 f1       	breq	.+98     	; 0x37c6 <MDIO_voidWriteHighNibble+0xb8>
    3764:	3f c0       	rjmp	.+126    	; 0x37e4 <MDIO_voidWriteHighNibble+0xd6>
		{
		case DIO_PORTA : PORTA = PORTA & LOW_NIBBLE_OUTPUT ; 
    3766:	ab e3       	ldi	r26, 0x3B	; 59
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	eb e3       	ldi	r30, 0x3B	; 59
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	80 81       	ld	r24, Z
    3770:	8f 70       	andi	r24, 0x0F	; 15
    3772:	8c 93       	st	X, r24
						 PORTA = PORTA | A_u8PortVal       ;
    3774:	ab e3       	ldi	r26, 0x3B	; 59
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	eb e3       	ldi	r30, 0x3B	; 59
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	90 81       	ld	r25, Z
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	89 2b       	or	r24, r25
    3782:	8c 93       	st	X, r24
    3784:	2f c0       	rjmp	.+94     	; 0x37e4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;                      
		case DIO_PORTB : PORTB = PORTB & LOW_NIBBLE_OUTPUT ; 
    3786:	a8 e3       	ldi	r26, 0x38	; 56
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	e8 e3       	ldi	r30, 0x38	; 56
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	8f 70       	andi	r24, 0x0F	; 15
    3792:	8c 93       	st	X, r24
						 PORTB = PORTB | A_u8PortVal       ;
    3794:	a8 e3       	ldi	r26, 0x38	; 56
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	e8 e3       	ldi	r30, 0x38	; 56
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	90 81       	ld	r25, Z
    379e:	8a 81       	ldd	r24, Y+2	; 0x02
    37a0:	89 2b       	or	r24, r25
    37a2:	8c 93       	st	X, r24
    37a4:	1f c0       	rjmp	.+62     	; 0x37e4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;               
		case DIO_PORTC : PORTC = PORTC & LOW_NIBBLE_OUTPUT ; 
    37a6:	a5 e3       	ldi	r26, 0x35	; 53
    37a8:	b0 e0       	ldi	r27, 0x00	; 0
    37aa:	e5 e3       	ldi	r30, 0x35	; 53
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	80 81       	ld	r24, Z
    37b0:	8f 70       	andi	r24, 0x0F	; 15
    37b2:	8c 93       	st	X, r24
						 PORTC = PORTC | A_u8PortVal       ;
    37b4:	a5 e3       	ldi	r26, 0x35	; 53
    37b6:	b0 e0       	ldi	r27, 0x00	; 0
    37b8:	e5 e3       	ldi	r30, 0x35	; 53
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	90 81       	ld	r25, Z
    37be:	8a 81       	ldd	r24, Y+2	; 0x02
    37c0:	89 2b       	or	r24, r25
    37c2:	8c 93       	st	X, r24
    37c4:	0f c0       	rjmp	.+30     	; 0x37e4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;                        
		case DIO_PORTD : PORTD = PORTD & LOW_NIBBLE_OUTPUT ;
    37c6:	a2 e3       	ldi	r26, 0x32	; 50
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	e2 e3       	ldi	r30, 0x32	; 50
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	8f 70       	andi	r24, 0x0F	; 15
    37d2:	8c 93       	st	X, r24
						 PORTD = PORTD | A_u8PortVal       ;
    37d4:	a2 e3       	ldi	r26, 0x32	; 50
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	e2 e3       	ldi	r30, 0x32	; 50
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	90 81       	ld	r25, Z
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	89 2b       	or	r24, r25
    37e2:	8c 93       	st	X, r24
		                 break ;
		default : /**Error*/ break ;
		}
}
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <MDIO_voidConnectPullup>:

void MDIO_voidConnectPullup(u8 A_u8PortNo ,u8 A_u8PinNo, u8 A_u8ConnectPullup)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	00 d0       	rcall	.+0      	; 0x37f8 <MDIO_voidConnectPullup+0x6>
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <MDIO_voidConnectPullup+0x8>
    37fa:	0f 92       	push	r0
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
    3800:	89 83       	std	Y+1, r24	; 0x01
    3802:	6a 83       	std	Y+2, r22	; 0x02
    3804:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8ConnectPullup)
    3806:	8b 81       	ldd	r24, Y+3	; 0x03
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	3d 83       	std	Y+5, r19	; 0x05
    380e:	2c 83       	std	Y+4, r18	; 0x04
    3810:	8c 81       	ldd	r24, Y+4	; 0x04
    3812:	9d 81       	ldd	r25, Y+5	; 0x05
    3814:	81 30       	cpi	r24, 0x01	; 1
    3816:	91 05       	cpc	r25, r1
    3818:	31 f0       	breq	.+12     	; 0x3826 <MDIO_voidConnectPullup+0x34>
    381a:	2c 81       	ldd	r18, Y+4	; 0x04
    381c:	3d 81       	ldd	r19, Y+5	; 0x05
    381e:	22 30       	cpi	r18, 0x02	; 2
    3820:	31 05       	cpc	r19, r1
    3822:	31 f0       	breq	.+12     	; 0x3830 <MDIO_voidConnectPullup+0x3e>
    3824:	09 c0       	rjmp	.+18     	; 0x3838 <MDIO_voidConnectPullup+0x46>
	{
	case ENABLE_PULLUP  : MDIO_voidSetPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	6a 81       	ldd	r22, Y+2	; 0x02
    382a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    382e:	04 c0       	rjmp	.+8      	; 0x3838 <MDIO_voidConnectPullup+0x46>
	case DISABLE_PULLUP : MDIO_voidClrPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	6a 81       	ldd	r22, Y+2	; 0x02
    3834:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
	default : /**Error*/ break ;
	}
}
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <MADC_voidInt>:

/**pointer to function to set call back of ADC*/
void (*ADC_Callback) (void) ;

void MADC_voidInt (void)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
	/**referance voltage selection*/
	#if   ADC_REF_VOLT == AREF          /**external ADC referance voltage (internal Vref turrned off)*/
	    CLR_BIT(ADMUX , REFS0) ;
	    CLR_BIT(ADMUX , REFS1) ;
	#elif ADC_REF_VOLT == AVCC          /**Vcc of ADC*/
	    SET_BIT(ADMUX , REFS0) ;
    3850:	a7 e2       	ldi	r26, 0x27	; 39
    3852:	b0 e0       	ldi	r27, 0x00	; 0
    3854:	e7 e2       	ldi	r30, 0x27	; 39
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	80 81       	ld	r24, Z
    385a:	80 64       	ori	r24, 0x40	; 64
    385c:	8c 93       	st	X, r24
	    CLR_BIT(ADMUX , REFS1) ;
    385e:	a7 e2       	ldi	r26, 0x27	; 39
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	e7 e2       	ldi	r30, 0x27	; 39
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	80 81       	ld	r24, Z
    3868:	8f 77       	andi	r24, 0x7F	; 127
    386a:	8c 93       	st	X, r24
	#else
		#error "Please select correct refence voltage"
	#endif
	
	/**set addjust result to right addjust*/
	CLR_BIT(ADMUX , ADLAR) ;
    386c:	a7 e2       	ldi	r26, 0x27	; 39
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	e7 e2       	ldi	r30, 0x27	; 39
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	8f 7d       	andi	r24, 0xDF	; 223
    3878:	8c 93       	st	X, r24
	
	/**set prescaller of ADC clk*/
	#if   ADC_PRESCALER == ADC_PS_2 /**clk = 4MHZ*/
	    SET_BIT(ADCSRA , ADPS0) ;
    387a:	a6 e2       	ldi	r26, 0x26	; 38
    387c:	b0 e0       	ldi	r27, 0x00	; 0
    387e:	e6 e2       	ldi	r30, 0x26	; 38
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	80 81       	ld	r24, Z
    3884:	81 60       	ori	r24, 0x01	; 1
    3886:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA , ADPS1) ;
    3888:	a6 e2       	ldi	r26, 0x26	; 38
    388a:	b0 e0       	ldi	r27, 0x00	; 0
    388c:	e6 e2       	ldi	r30, 0x26	; 38
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	80 81       	ld	r24, Z
    3892:	8d 7f       	andi	r24, 0xFD	; 253
    3894:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA , ADPS2) ;
    3896:	a6 e2       	ldi	r26, 0x26	; 38
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e6 e2       	ldi	r30, 0x26	; 38
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	8b 7f       	andi	r24, 0xFB	; 251
    38a2:	8c 93       	st	X, r24
	#else 
		#error "select correct division factor"
	#endif
	
	/**Enable ADC peripheral*/
	SET_BIT(ADCSRA, ADEN);
    38a4:	a6 e2       	ldi	r26, 0x26	; 38
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e6 e2       	ldi	r30, 0x26	; 38
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	80 68       	ori	r24, 0x80	; 128
    38b0:	8c 93       	st	X, r24
	
	/**ADC Interrupt Enable*/
    SET_BIT(ADCSRA, ADIE);
    38b2:	a6 e2       	ldi	r26, 0x26	; 38
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e6 e2       	ldi	r30, 0x26	; 38
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	88 60       	ori	r24, 0x08	; 8
    38be:	8c 93       	st	X, r24
	
	/**Auto trigger Disable*/
	CLR_BIT(ADCSRA, ADATE);
    38c0:	a6 e2       	ldi	r26, 0x26	; 38
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	e6 e2       	ldi	r30, 0x26	; 38
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	80 81       	ld	r24, Z
    38ca:	8f 7d       	andi	r24, 0xDF	; 223
    38cc:	8c 93       	st	X, r24
	
	/**Enable global interrupt flag*/
	SET_BIT (SREG , I_BIT) ;
    38ce:	af e5       	ldi	r26, 0x5F	; 95
    38d0:	b0 e0       	ldi	r27, 0x00	; 0
    38d2:	ef e5       	ldi	r30, 0x5F	; 95
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	80 68       	ori	r24, 0x80	; 128
    38da:	8c 93       	st	X, r24
}
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <MADC_voidStartConversion>:

void MADC_voidStartConversion(u8 A_u8ChannelNo)
{
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <MADC_voidStartConversion+0x6>
    38e8:	0f 92       	push	r0
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8ChannelNo)
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	28 2f       	mov	r18, r24
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	3b 83       	std	Y+3, r19	; 0x03
    38f8:	2a 83       	std	Y+2, r18	; 0x02
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	9b 81       	ldd	r25, Y+3	; 0x03
    38fe:	83 30       	cpi	r24, 0x03	; 3
    3900:	91 05       	cpc	r25, r1
    3902:	09 f4       	brne	.+2      	; 0x3906 <MADC_voidStartConversion+0x24>
    3904:	9b c0       	rjmp	.+310    	; 0x3a3c <MADC_voidStartConversion+0x15a>
    3906:	2a 81       	ldd	r18, Y+2	; 0x02
    3908:	3b 81       	ldd	r19, Y+3	; 0x03
    390a:	24 30       	cpi	r18, 0x04	; 4
    390c:	31 05       	cpc	r19, r1
    390e:	8c f4       	brge	.+34     	; 0x3932 <MADC_voidStartConversion+0x50>
    3910:	8a 81       	ldd	r24, Y+2	; 0x02
    3912:	9b 81       	ldd	r25, Y+3	; 0x03
    3914:	81 30       	cpi	r24, 0x01	; 1
    3916:	91 05       	cpc	r25, r1
    3918:	09 f4       	brne	.+2      	; 0x391c <MADC_voidStartConversion+0x3a>
    391a:	48 c0       	rjmp	.+144    	; 0x39ac <MADC_voidStartConversion+0xca>
    391c:	2a 81       	ldd	r18, Y+2	; 0x02
    391e:	3b 81       	ldd	r19, Y+3	; 0x03
    3920:	22 30       	cpi	r18, 0x02	; 2
    3922:	31 05       	cpc	r19, r1
    3924:	0c f0       	brlt	.+2      	; 0x3928 <MADC_voidStartConversion+0x46>
    3926:	66 c0       	rjmp	.+204    	; 0x39f4 <MADC_voidStartConversion+0x112>
    3928:	8a 81       	ldd	r24, Y+2	; 0x02
    392a:	9b 81       	ldd	r25, Y+3	; 0x03
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	d1 f0       	breq	.+52     	; 0x3964 <MADC_voidStartConversion+0x82>
    3930:	38 c1       	rjmp	.+624    	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
    3932:	2a 81       	ldd	r18, Y+2	; 0x02
    3934:	3b 81       	ldd	r19, Y+3	; 0x03
    3936:	25 30       	cpi	r18, 0x05	; 5
    3938:	31 05       	cpc	r19, r1
    393a:	09 f4       	brne	.+2      	; 0x393e <MADC_voidStartConversion+0x5c>
    393c:	c7 c0       	rjmp	.+398    	; 0x3acc <MADC_voidStartConversion+0x1ea>
    393e:	8a 81       	ldd	r24, Y+2	; 0x02
    3940:	9b 81       	ldd	r25, Y+3	; 0x03
    3942:	85 30       	cpi	r24, 0x05	; 5
    3944:	91 05       	cpc	r25, r1
    3946:	0c f4       	brge	.+2      	; 0x394a <MADC_voidStartConversion+0x68>
    3948:	9d c0       	rjmp	.+314    	; 0x3a84 <MADC_voidStartConversion+0x1a2>
    394a:	2a 81       	ldd	r18, Y+2	; 0x02
    394c:	3b 81       	ldd	r19, Y+3	; 0x03
    394e:	26 30       	cpi	r18, 0x06	; 6
    3950:	31 05       	cpc	r19, r1
    3952:	09 f4       	brne	.+2      	; 0x3956 <MADC_voidStartConversion+0x74>
    3954:	df c0       	rjmp	.+446    	; 0x3b14 <MADC_voidStartConversion+0x232>
    3956:	8a 81       	ldd	r24, Y+2	; 0x02
    3958:	9b 81       	ldd	r25, Y+3	; 0x03
    395a:	87 30       	cpi	r24, 0x07	; 7
    395c:	91 05       	cpc	r25, r1
    395e:	09 f4       	brne	.+2      	; 0x3962 <MADC_voidStartConversion+0x80>
    3960:	fd c0       	rjmp	.+506    	; 0x3b5c <MADC_voidStartConversion+0x27a>
    3962:	1f c1       	rjmp	.+574    	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
	{
		case CHANNEL_0 :  CLR_BIT(ADMUX , MUX0) ;
    3964:	a7 e2       	ldi	r26, 0x27	; 39
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e7 e2       	ldi	r30, 0x27	; 39
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	8e 7f       	andi	r24, 0xFE	; 254
    3970:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    3972:	a7 e2       	ldi	r26, 0x27	; 39
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e7 e2       	ldi	r30, 0x27	; 39
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	8d 7f       	andi	r24, 0xFD	; 253
    397e:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    3980:	a7 e2       	ldi	r26, 0x27	; 39
    3982:	b0 e0       	ldi	r27, 0x00	; 0
    3984:	e7 e2       	ldi	r30, 0x27	; 39
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	8b 7f       	andi	r24, 0xFB	; 251
    398c:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    398e:	a7 e2       	ldi	r26, 0x27	; 39
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	e7 e2       	ldi	r30, 0x27	; 39
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	87 7f       	andi	r24, 0xF7	; 247
    399a:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    399c:	a7 e2       	ldi	r26, 0x27	; 39
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	e7 e2       	ldi	r30, 0x27	; 39
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	8f 7e       	andi	r24, 0xEF	; 239
    39a8:	8c 93       	st	X, r24
    39aa:	fb c0       	rjmp	.+502    	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_1 :  SET_BIT(ADMUX , MUX0) ;
    39ac:	a7 e2       	ldi	r26, 0x27	; 39
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	e7 e2       	ldi	r30, 0x27	; 39
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	81 60       	ori	r24, 0x01	; 1
    39b8:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    39ba:	a7 e2       	ldi	r26, 0x27	; 39
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e7 e2       	ldi	r30, 0x27	; 39
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	80 81       	ld	r24, Z
    39c4:	8d 7f       	andi	r24, 0xFD	; 253
    39c6:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    39c8:	a7 e2       	ldi	r26, 0x27	; 39
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	e7 e2       	ldi	r30, 0x27	; 39
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	8b 7f       	andi	r24, 0xFB	; 251
    39d4:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    39d6:	a7 e2       	ldi	r26, 0x27	; 39
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	e7 e2       	ldi	r30, 0x27	; 39
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	80 81       	ld	r24, Z
    39e0:	87 7f       	andi	r24, 0xF7	; 247
    39e2:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    39e4:	a7 e2       	ldi	r26, 0x27	; 39
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	e7 e2       	ldi	r30, 0x27	; 39
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	8f 7e       	andi	r24, 0xEF	; 239
    39f0:	8c 93       	st	X, r24
    39f2:	d7 c0       	rjmp	.+430    	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_2 :  CLR_BIT(ADMUX , MUX0) ;
    39f4:	a7 e2       	ldi	r26, 0x27	; 39
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	e7 e2       	ldi	r30, 0x27	; 39
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	8e 7f       	andi	r24, 0xFE	; 254
    3a00:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    3a02:	a7 e2       	ldi	r26, 0x27	; 39
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	e7 e2       	ldi	r30, 0x27	; 39
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	82 60       	ori	r24, 0x02	; 2
    3a0e:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    3a10:	a7 e2       	ldi	r26, 0x27	; 39
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	e7 e2       	ldi	r30, 0x27	; 39
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	80 81       	ld	r24, Z
    3a1a:	8b 7f       	andi	r24, 0xFB	; 251
    3a1c:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3a1e:	a7 e2       	ldi	r26, 0x27	; 39
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	e7 e2       	ldi	r30, 0x27	; 39
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	87 7f       	andi	r24, 0xF7	; 247
    3a2a:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3a2c:	a7 e2       	ldi	r26, 0x27	; 39
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	e7 e2       	ldi	r30, 0x27	; 39
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
    3a36:	8f 7e       	andi	r24, 0xEF	; 239
    3a38:	8c 93       	st	X, r24
    3a3a:	b3 c0       	rjmp	.+358    	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_3 :  SET_BIT(ADMUX , MUX0) ;
    3a3c:	a7 e2       	ldi	r26, 0x27	; 39
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	e7 e2       	ldi	r30, 0x27	; 39
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	81 60       	ori	r24, 0x01	; 1
    3a48:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    3a4a:	a7 e2       	ldi	r26, 0x27	; 39
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	e7 e2       	ldi	r30, 0x27	; 39
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	80 81       	ld	r24, Z
    3a54:	82 60       	ori	r24, 0x02	; 2
    3a56:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    3a58:	a7 e2       	ldi	r26, 0x27	; 39
    3a5a:	b0 e0       	ldi	r27, 0x00	; 0
    3a5c:	e7 e2       	ldi	r30, 0x27	; 39
    3a5e:	f0 e0       	ldi	r31, 0x00	; 0
    3a60:	80 81       	ld	r24, Z
    3a62:	8b 7f       	andi	r24, 0xFB	; 251
    3a64:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3a66:	a7 e2       	ldi	r26, 0x27	; 39
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
    3a6a:	e7 e2       	ldi	r30, 0x27	; 39
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	80 81       	ld	r24, Z
    3a70:	87 7f       	andi	r24, 0xF7	; 247
    3a72:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3a74:	a7 e2       	ldi	r26, 0x27	; 39
    3a76:	b0 e0       	ldi	r27, 0x00	; 0
    3a78:	e7 e2       	ldi	r30, 0x27	; 39
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	8f 7e       	andi	r24, 0xEF	; 239
    3a80:	8c 93       	st	X, r24
    3a82:	8f c0       	rjmp	.+286    	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_4 :  CLR_BIT(ADMUX , MUX0) ;
    3a84:	a7 e2       	ldi	r26, 0x27	; 39
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	e7 e2       	ldi	r30, 0x27	; 39
    3a8a:	f0 e0       	ldi	r31, 0x00	; 0
    3a8c:	80 81       	ld	r24, Z
    3a8e:	8e 7f       	andi	r24, 0xFE	; 254
    3a90:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    3a92:	a7 e2       	ldi	r26, 0x27	; 39
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	e7 e2       	ldi	r30, 0x27	; 39
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	8d 7f       	andi	r24, 0xFD	; 253
    3a9e:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    3aa0:	a7 e2       	ldi	r26, 0x27	; 39
    3aa2:	b0 e0       	ldi	r27, 0x00	; 0
    3aa4:	e7 e2       	ldi	r30, 0x27	; 39
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 81       	ld	r24, Z
    3aaa:	84 60       	ori	r24, 0x04	; 4
    3aac:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3aae:	a7 e2       	ldi	r26, 0x27	; 39
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	e7 e2       	ldi	r30, 0x27	; 39
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	80 81       	ld	r24, Z
    3ab8:	87 7f       	andi	r24, 0xF7	; 247
    3aba:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3abc:	a7 e2       	ldi	r26, 0x27	; 39
    3abe:	b0 e0       	ldi	r27, 0x00	; 0
    3ac0:	e7 e2       	ldi	r30, 0x27	; 39
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	80 81       	ld	r24, Z
    3ac6:	8f 7e       	andi	r24, 0xEF	; 239
    3ac8:	8c 93       	st	X, r24
    3aca:	6b c0       	rjmp	.+214    	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_5 :  SET_BIT(ADMUX , MUX0) ;
    3acc:	a7 e2       	ldi	r26, 0x27	; 39
    3ace:	b0 e0       	ldi	r27, 0x00	; 0
    3ad0:	e7 e2       	ldi	r30, 0x27	; 39
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	80 81       	ld	r24, Z
    3ad6:	81 60       	ori	r24, 0x01	; 1
    3ad8:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    3ada:	a7 e2       	ldi	r26, 0x27	; 39
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	e7 e2       	ldi	r30, 0x27	; 39
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	8d 7f       	andi	r24, 0xFD	; 253
    3ae6:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    3ae8:	a7 e2       	ldi	r26, 0x27	; 39
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	e7 e2       	ldi	r30, 0x27	; 39
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	84 60       	ori	r24, 0x04	; 4
    3af4:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3af6:	a7 e2       	ldi	r26, 0x27	; 39
    3af8:	b0 e0       	ldi	r27, 0x00	; 0
    3afa:	e7 e2       	ldi	r30, 0x27	; 39
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	80 81       	ld	r24, Z
    3b00:	87 7f       	andi	r24, 0xF7	; 247
    3b02:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3b04:	a7 e2       	ldi	r26, 0x27	; 39
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e7 e2       	ldi	r30, 0x27	; 39
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	8f 7e       	andi	r24, 0xEF	; 239
    3b10:	8c 93       	st	X, r24
    3b12:	47 c0       	rjmp	.+142    	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_6 :  CLR_BIT(ADMUX , MUX0) ;
    3b14:	a7 e2       	ldi	r26, 0x27	; 39
    3b16:	b0 e0       	ldi	r27, 0x00	; 0
    3b18:	e7 e2       	ldi	r30, 0x27	; 39
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	80 81       	ld	r24, Z
    3b1e:	8e 7f       	andi	r24, 0xFE	; 254
    3b20:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    3b22:	a7 e2       	ldi	r26, 0x27	; 39
    3b24:	b0 e0       	ldi	r27, 0x00	; 0
    3b26:	e7 e2       	ldi	r30, 0x27	; 39
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	80 81       	ld	r24, Z
    3b2c:	82 60       	ori	r24, 0x02	; 2
    3b2e:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    3b30:	a7 e2       	ldi	r26, 0x27	; 39
    3b32:	b0 e0       	ldi	r27, 0x00	; 0
    3b34:	e7 e2       	ldi	r30, 0x27	; 39
    3b36:	f0 e0       	ldi	r31, 0x00	; 0
    3b38:	80 81       	ld	r24, Z
    3b3a:	84 60       	ori	r24, 0x04	; 4
    3b3c:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3b3e:	a7 e2       	ldi	r26, 0x27	; 39
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e7 e2       	ldi	r30, 0x27	; 39
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	87 7f       	andi	r24, 0xF7	; 247
    3b4a:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3b4c:	a7 e2       	ldi	r26, 0x27	; 39
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	e7 e2       	ldi	r30, 0x27	; 39
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
    3b54:	80 81       	ld	r24, Z
    3b56:	8f 7e       	andi	r24, 0xEF	; 239
    3b58:	8c 93       	st	X, r24
    3b5a:	23 c0       	rjmp	.+70     	; 0x3ba2 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_7 :  SET_BIT(ADMUX , MUX0) ;
    3b5c:	a7 e2       	ldi	r26, 0x27	; 39
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	e7 e2       	ldi	r30, 0x27	; 39
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	80 81       	ld	r24, Z
    3b66:	81 60       	ori	r24, 0x01	; 1
    3b68:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    3b6a:	a7 e2       	ldi	r26, 0x27	; 39
    3b6c:	b0 e0       	ldi	r27, 0x00	; 0
    3b6e:	e7 e2       	ldi	r30, 0x27	; 39
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	80 81       	ld	r24, Z
    3b74:	82 60       	ori	r24, 0x02	; 2
    3b76:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    3b78:	a7 e2       	ldi	r26, 0x27	; 39
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	e7 e2       	ldi	r30, 0x27	; 39
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	80 81       	ld	r24, Z
    3b82:	84 60       	ori	r24, 0x04	; 4
    3b84:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3b86:	a7 e2       	ldi	r26, 0x27	; 39
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	e7 e2       	ldi	r30, 0x27	; 39
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 81       	ld	r24, Z
    3b90:	87 7f       	andi	r24, 0xF7	; 247
    3b92:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3b94:	a7 e2       	ldi	r26, 0x27	; 39
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	e7 e2       	ldi	r30, 0x27	; 39
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	80 81       	ld	r24, Z
    3b9e:	8f 7e       	andi	r24, 0xEF	; 239
    3ba0:	8c 93       	st	X, r24
		default         : /**ERROR*/
		                  break ;				  
	}
	
	/**Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    3ba2:	a6 e2       	ldi	r26, 0x26	; 38
    3ba4:	b0 e0       	ldi	r27, 0x00	; 0
    3ba6:	e6 e2       	ldi	r30, 0x26	; 38
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	80 81       	ld	r24, Z
    3bac:	80 64       	ori	r24, 0x40	; 64
    3bae:	8c 93       	st	X, r24
}
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	08 95       	ret

00003bbc <MADC_u16GetADCData>:

u16  MADC_u16GetADCData(void)
{
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
	/**return ADC Data  */
	return ADC ;
    3bc4:	e4 e2       	ldi	r30, 0x24	; 36
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	80 81       	ld	r24, Z
    3bca:	91 81       	ldd	r25, Z+1	; 0x01
}
    3bcc:	cf 91       	pop	r28
    3bce:	df 91       	pop	r29
    3bd0:	08 95       	ret

00003bd2 <MADC_voidSetCallback>:

void MADC_voidSetCallback( void (*A_fptr)(void)  )
{
    3bd2:	df 93       	push	r29
    3bd4:	cf 93       	push	r28
    3bd6:	00 d0       	rcall	.+0      	; 0x3bd8 <MADC_voidSetCallback+0x6>
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
    3bdc:	9a 83       	std	Y+2, r25	; 0x02
    3bde:	89 83       	std	Y+1, r24	; 0x01
	ADC_Callback = A_fptr;
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	9a 81       	ldd	r25, Y+2	; 0x02
    3be4:	90 93 ff 01 	sts	0x01FF, r25
    3be8:	80 93 fe 01 	sts	0x01FE, r24
}
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	cf 91       	pop	r28
    3bf2:	df 91       	pop	r29
    3bf4:	08 95       	ret

00003bf6 <__vector_16>:

/**ISR of ADC*/
void __vector_16(void)__attribute__((signal))__attribute__((interrupt));
void __vector_16(void)
{
    3bf6:	78 94       	sei
    3bf8:	1f 92       	push	r1
    3bfa:	0f 92       	push	r0
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	0f 92       	push	r0
    3c00:	11 24       	eor	r1, r1
    3c02:	2f 93       	push	r18
    3c04:	3f 93       	push	r19
    3c06:	4f 93       	push	r20
    3c08:	5f 93       	push	r21
    3c0a:	6f 93       	push	r22
    3c0c:	7f 93       	push	r23
    3c0e:	8f 93       	push	r24
    3c10:	9f 93       	push	r25
    3c12:	af 93       	push	r26
    3c14:	bf 93       	push	r27
    3c16:	ef 93       	push	r30
    3c18:	ff 93       	push	r31
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
	if (ADC_Callback != 0)
    3c22:	80 91 fe 01 	lds	r24, 0x01FE
    3c26:	90 91 ff 01 	lds	r25, 0x01FF
    3c2a:	00 97       	sbiw	r24, 0x00	; 0
    3c2c:	29 f0       	breq	.+10     	; 0x3c38 <__vector_16+0x42>
	{
		ADC_Callback () ;
    3c2e:	e0 91 fe 01 	lds	r30, 0x01FE
    3c32:	f0 91 ff 01 	lds	r31, 0x01FF
    3c36:	09 95       	icall
	}
}
    3c38:	cf 91       	pop	r28
    3c3a:	df 91       	pop	r29
    3c3c:	ff 91       	pop	r31
    3c3e:	ef 91       	pop	r30
    3c40:	bf 91       	pop	r27
    3c42:	af 91       	pop	r26
    3c44:	9f 91       	pop	r25
    3c46:	8f 91       	pop	r24
    3c48:	7f 91       	pop	r23
    3c4a:	6f 91       	pop	r22
    3c4c:	5f 91       	pop	r21
    3c4e:	4f 91       	pop	r20
    3c50:	3f 91       	pop	r19
    3c52:	2f 91       	pop	r18
    3c54:	0f 90       	pop	r0
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	0f 90       	pop	r0
    3c5a:	1f 90       	pop	r1
    3c5c:	18 95       	reti

00003c5e <HUltrasonic_voidInt>:
#include "Ultrasonic_conf.h"
#include "Ultrasonic_int.h"
#define F_CPU 8000000UL
#include <util/delay.h>
void HUltrasonic_voidInt (void) 
{
    3c5e:	df 93       	push	r29
    3c60:	cf 93       	push	r28
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
	/*set trig pin as output pin*/
	MDIO_voidSetPinDir(TRIG_PORT , TRIG_PIN , DIO_HIGH) ;
    3c66:	82 e0       	ldi	r24, 0x02	; 2
    3c68:	67 e0       	ldi	r22, 0x07	; 7
    3c6a:	41 e0       	ldi	r20, 0x01	; 1
    3c6c:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
}
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <HUltrasonic_u16CalcDistance>:

u16 HUltrasonic_u16CalcDistance (void)
{
    3c76:	ef 92       	push	r14
    3c78:	ff 92       	push	r15
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	df 93       	push	r29
    3c80:	cf 93       	push	r28
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
    3c86:	6a 97       	sbiw	r28, 0x1a	; 26
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	de bf       	out	0x3e, r29	; 62
    3c8e:	0f be       	out	0x3f, r0	; 63
    3c90:	cd bf       	out	0x3d, r28	; 61
	u16 L_u16Distance = 0 ;
    3c92:	1a 8e       	std	Y+26, r1	; 0x1a
    3c94:	19 8e       	std	Y+25, r1	; 0x19
	
	MTimer_voidInt() ;
    3c96:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <MTimer_voidInt>
	
	/*set trig pin as output pin*/
	MDIO_voidSetPinDir(TRIG_PORT , TRIG_PIN , DIO_HIGH) ;
    3c9a:	82 e0       	ldi	r24, 0x02	; 2
    3c9c:	67 e0       	ldi	r22, 0x07	; 7
    3c9e:	41 e0       	ldi	r20, 0x01	; 1
    3ca0:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
	MDIO_voidSetPinVal(TRIG_PORT , TRIG_PIN) ;
    3ca4:	82 e0       	ldi	r24, 0x02	; 2
    3ca6:	67 e0       	ldi	r22, 0x07	; 7
    3ca8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	a8 e4       	ldi	r26, 0x48	; 72
    3cb2:	b2 e4       	ldi	r27, 0x42	; 66
    3cb4:	8d 8b       	std	Y+21, r24	; 0x15
    3cb6:	9e 8b       	std	Y+22, r25	; 0x16
    3cb8:	af 8b       	std	Y+23, r26	; 0x17
    3cba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    3cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    3cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    3cc4:	2b ea       	ldi	r18, 0xAB	; 171
    3cc6:	3a ea       	ldi	r19, 0xAA	; 170
    3cc8:	4a e2       	ldi	r20, 0x2A	; 42
    3cca:	50 e4       	ldi	r21, 0x40	; 64
    3ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	89 8b       	std	Y+17, r24	; 0x11
    3cd6:	9a 8b       	std	Y+18, r25	; 0x12
    3cd8:	ab 8b       	std	Y+19, r26	; 0x13
    3cda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3cdc:	69 89       	ldd	r22, Y+17	; 0x11
    3cde:	7a 89       	ldd	r23, Y+18	; 0x12
    3ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e8       	ldi	r20, 0x80	; 128
    3cea:	5f e3       	ldi	r21, 0x3F	; 63
    3cec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cf0:	88 23       	and	r24, r24
    3cf2:	1c f4       	brge	.+6      	; 0x3cfa <HUltrasonic_u16CalcDistance+0x84>
		__ticks = 1;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	88 8b       	std	Y+16, r24	; 0x10
    3cf8:	91 c0       	rjmp	.+290    	; 0x3e1c <HUltrasonic_u16CalcDistance+0x1a6>
	else if (__tmp > 255)
    3cfa:	69 89       	ldd	r22, Y+17	; 0x11
    3cfc:	7a 89       	ldd	r23, Y+18	; 0x12
    3cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    3d00:	9c 89       	ldd	r25, Y+20	; 0x14
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	4f e7       	ldi	r20, 0x7F	; 127
    3d08:	53 e4       	ldi	r21, 0x43	; 67
    3d0a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d0e:	18 16       	cp	r1, r24
    3d10:	0c f0       	brlt	.+2      	; 0x3d14 <HUltrasonic_u16CalcDistance+0x9e>
    3d12:	7b c0       	rjmp	.+246    	; 0x3e0a <HUltrasonic_u16CalcDistance+0x194>
	{
		_delay_ms(__us / 1000.0);
    3d14:	6d 89       	ldd	r22, Y+21	; 0x15
    3d16:	7e 89       	ldd	r23, Y+22	; 0x16
    3d18:	8f 89       	ldd	r24, Y+23	; 0x17
    3d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	4a e7       	ldi	r20, 0x7A	; 122
    3d22:	54 e4       	ldi	r21, 0x44	; 68
    3d24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	8c 87       	std	Y+12, r24	; 0x0c
    3d2e:	9d 87       	std	Y+13, r25	; 0x0d
    3d30:	ae 87       	std	Y+14, r26	; 0x0e
    3d32:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d34:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d36:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d38:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	4a ef       	ldi	r20, 0xFA	; 250
    3d42:	54 e4       	ldi	r21, 0x44	; 68
    3d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	88 87       	std	Y+8, r24	; 0x08
    3d4e:	99 87       	std	Y+9, r25	; 0x09
    3d50:	aa 87       	std	Y+10, r26	; 0x0a
    3d52:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d54:	68 85       	ldd	r22, Y+8	; 0x08
    3d56:	79 85       	ldd	r23, Y+9	; 0x09
    3d58:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	40 e8       	ldi	r20, 0x80	; 128
    3d62:	5f e3       	ldi	r21, 0x3F	; 63
    3d64:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d68:	88 23       	and	r24, r24
    3d6a:	2c f4       	brge	.+10     	; 0x3d76 <HUltrasonic_u16CalcDistance+0x100>
		__ticks = 1;
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	9f 83       	std	Y+7, r25	; 0x07
    3d72:	8e 83       	std	Y+6, r24	; 0x06
    3d74:	3f c0       	rjmp	.+126    	; 0x3df4 <HUltrasonic_u16CalcDistance+0x17e>
	else if (__tmp > 65535)
    3d76:	68 85       	ldd	r22, Y+8	; 0x08
    3d78:	79 85       	ldd	r23, Y+9	; 0x09
    3d7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	3f ef       	ldi	r19, 0xFF	; 255
    3d82:	4f e7       	ldi	r20, 0x7F	; 127
    3d84:	57 e4       	ldi	r21, 0x47	; 71
    3d86:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d8a:	18 16       	cp	r1, r24
    3d8c:	4c f5       	brge	.+82     	; 0x3de0 <HUltrasonic_u16CalcDistance+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d90:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d92:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d94:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e2       	ldi	r20, 0x20	; 32
    3d9c:	51 e4       	ldi	r21, 0x41	; 65
    3d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	bc 01       	movw	r22, r24
    3da8:	cd 01       	movw	r24, r26
    3daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	9f 83       	std	Y+7, r25	; 0x07
    3db4:	8e 83       	std	Y+6, r24	; 0x06
    3db6:	0f c0       	rjmp	.+30     	; 0x3dd6 <HUltrasonic_u16CalcDistance+0x160>
    3db8:	88 ec       	ldi	r24, 0xC8	; 200
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	9d 83       	std	Y+5, r25	; 0x05
    3dbe:	8c 83       	std	Y+4, r24	; 0x04
    3dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <HUltrasonic_u16CalcDistance+0x14e>
    3dc8:	9d 83       	std	Y+5, r25	; 0x05
    3dca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    3dce:	9f 81       	ldd	r25, Y+7	; 0x07
    3dd0:	01 97       	sbiw	r24, 0x01	; 1
    3dd2:	9f 83       	std	Y+7, r25	; 0x07
    3dd4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd8:	9f 81       	ldd	r25, Y+7	; 0x07
    3dda:	00 97       	sbiw	r24, 0x00	; 0
    3ddc:	69 f7       	brne	.-38     	; 0x3db8 <HUltrasonic_u16CalcDistance+0x142>
    3dde:	24 c0       	rjmp	.+72     	; 0x3e28 <HUltrasonic_u16CalcDistance+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de0:	68 85       	ldd	r22, Y+8	; 0x08
    3de2:	79 85       	ldd	r23, Y+9	; 0x09
    3de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3de6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	9f 83       	std	Y+7, r25	; 0x07
    3df2:	8e 83       	std	Y+6, r24	; 0x06
    3df4:	8e 81       	ldd	r24, Y+6	; 0x06
    3df6:	9f 81       	ldd	r25, Y+7	; 0x07
    3df8:	9b 83       	std	Y+3, r25	; 0x03
    3dfa:	8a 83       	std	Y+2, r24	; 0x02
    3dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <HUltrasonic_u16CalcDistance+0x18a>
    3e04:	9b 83       	std	Y+3, r25	; 0x03
    3e06:	8a 83       	std	Y+2, r24	; 0x02
    3e08:	0f c0       	rjmp	.+30     	; 0x3e28 <HUltrasonic_u16CalcDistance+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e0a:	69 89       	ldd	r22, Y+17	; 0x11
    3e0c:	7a 89       	ldd	r23, Y+18	; 0x12
    3e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e10:	9c 89       	ldd	r25, Y+20	; 0x14
    3e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	88 8b       	std	Y+16, r24	; 0x10
    3e1c:	88 89       	ldd	r24, Y+16	; 0x10
    3e1e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e20:	89 81       	ldd	r24, Y+1	; 0x01
    3e22:	8a 95       	dec	r24
    3e24:	f1 f7       	brne	.-4      	; 0x3e22 <HUltrasonic_u16CalcDistance+0x1ac>
    3e26:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50) ;
	MDIO_voidClrPinVal(TRIG_PORT , TRIG_PIN) ;
    3e28:	82 e0       	ldi	r24, 0x02	; 2
    3e2a:	67 e0       	ldi	r22, 0x07	; 7
    3e2c:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
	L_u16Distance = SOUND_VELOCITY ;
    3e30:	88 e2       	ldi	r24, 0x28	; 40
    3e32:	97 e8       	ldi	r25, 0x87	; 135
    3e34:	9a 8f       	std	Y+26, r25	; 0x1a
    3e36:	89 8f       	std	Y+25, r24	; 0x19
	L_u16Distance = L_u16Distance / 2 ;
    3e38:	89 8d       	ldd	r24, Y+25	; 0x19
    3e3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e3c:	96 95       	lsr	r25
    3e3e:	87 95       	ror	r24
    3e40:	9a 8f       	std	Y+26, r25	; 0x1a
    3e42:	89 8f       	std	Y+25, r24	; 0x19
	L_u16Distance = L_u16Distance / MTimerCalcFreqofTon() ;
    3e44:	89 8d       	ldd	r24, Y+25	; 0x19
    3e46:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e48:	7c 01       	movw	r14, r24
    3e4a:	00 e0       	ldi	r16, 0x00	; 0
    3e4c:	10 e0       	ldi	r17, 0x00	; 0
    3e4e:	0e 94 4c 12 	call	0x2498	; 0x2498 <MTimerCalcFreqofTon>
    3e52:	9b 01       	movw	r18, r22
    3e54:	ac 01       	movw	r20, r24
    3e56:	c8 01       	movw	r24, r16
    3e58:	b7 01       	movw	r22, r14
    3e5a:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
    3e5e:	da 01       	movw	r26, r20
    3e60:	c9 01       	movw	r24, r18
    3e62:	9a 8f       	std	Y+26, r25	; 0x1a
    3e64:	89 8f       	std	Y+25, r24	; 0x19
	return L_u16Distance ;
    3e66:	89 8d       	ldd	r24, Y+25	; 0x19
    3e68:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e6a:	6a 96       	adiw	r28, 0x1a	; 26
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	cf 91       	pop	r28
    3e78:	df 91       	pop	r29
    3e7a:	1f 91       	pop	r17
    3e7c:	0f 91       	pop	r16
    3e7e:	ff 90       	pop	r15
    3e80:	ef 90       	pop	r14
    3e82:	08 95       	ret

00003e84 <HPushBotton_voidPbInt>:
#include "Pb_conf.h"
#include <util/delay.h>


void HPushBotton_voidPbInt (u8 A_u8PbID)
{
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <HPushBotton_voidPbInt+0x6>
    3e8a:	0f 92       	push	r0
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PbID)
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	28 2f       	mov	r18, r24
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	3b 83       	std	Y+3, r19	; 0x03
    3e9a:	2a 83       	std	Y+2, r18	; 0x02
    3e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea0:	82 30       	cpi	r24, 0x02	; 2
    3ea2:	91 05       	cpc	r25, r1
    3ea4:	a9 f0       	breq	.+42     	; 0x3ed0 <HPushBotton_voidPbInt+0x4c>
    3ea6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ea8:	3b 81       	ldd	r19, Y+3	; 0x03
    3eaa:	23 30       	cpi	r18, 0x03	; 3
    3eac:	31 05       	cpc	r19, r1
    3eae:	d9 f0       	breq	.+54     	; 0x3ee6 <HPushBotton_voidPbInt+0x62>
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb4:	81 30       	cpi	r24, 0x01	; 1
    3eb6:	91 05       	cpc	r25, r1
    3eb8:	01 f5       	brne	.+64     	; 0x3efa <HPushBotton_voidPbInt+0x76>
	{                  /** make direction of Pb1 is input */
		case Pb1_ID :  MDIO_voidSetPinDir     (Pb1_PORT , Pb1_PIN , Pb_INPUT) ;
    3eba:	83 e0       	ldi	r24, 0x03	; 3
    3ebc:	60 e0       	ldi	r22, 0x00	; 0
    3ebe:	40 e0       	ldi	r20, 0x00	; 0
    3ec0:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		
		               /**active pull up of Pb1 */
		               MDIO_voidConnectPullup (Pb1_PORT , Pb1_PIN , ENABLE_PULLUP) ;
    3ec4:	83 e0       	ldi	r24, 0x03	; 3
    3ec6:	60 e0       	ldi	r22, 0x00	; 0
    3ec8:	41 e0       	ldi	r20, 0x01	; 1
    3eca:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <MDIO_voidConnectPullup>
    3ece:	15 c0       	rjmp	.+42     	; 0x3efa <HPushBotton_voidPbInt+0x76>
					   break ;
					   
					   /** make direction of Pb2 is input */
		case Pb2_ID :  MDIO_voidSetPinDir     (Pb2_PORT , Pb2_PIN , Pb_INPUT) ;
    3ed0:	84 e0       	ldi	r24, 0x04	; 4
    3ed2:	62 e0       	ldi	r22, 0x02	; 2
    3ed4:	40 e0       	ldi	r20, 0x00	; 0
    3ed6:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		 
		               /**active pull up of Pb2 */
		               MDIO_voidConnectPullup (Pb2_PORT , Pb2_PIN , ENABLE_PULLUP) ;
    3eda:	84 e0       	ldi	r24, 0x04	; 4
    3edc:	62 e0       	ldi	r22, 0x02	; 2
    3ede:	41 e0       	ldi	r20, 0x01	; 1
    3ee0:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <MDIO_voidConnectPullup>
    3ee4:	0a c0       	rjmp	.+20     	; 0x3efa <HPushBotton_voidPbInt+0x76>
					   break ;
					   
					   /** make direction of Pb3 is input */
		case Pb3_ID :  MDIO_voidSetPinDir     (Pb3_PORT , Pb3_PIN , Pb_INPUT) ;
    3ee6:	83 e0       	ldi	r24, 0x03	; 3
    3ee8:	61 e0       	ldi	r22, 0x01	; 1
    3eea:	40 e0       	ldi	r20, 0x00	; 0
    3eec:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		      
			           /**active pull up of Pb3 */
		               MDIO_voidConnectPullup (Pb3_PORT , Pb3_PIN , ENABLE_PULLUP) ;
    3ef0:	83 e0       	ldi	r24, 0x03	; 3
    3ef2:	61 e0       	ldi	r22, 0x01	; 1
    3ef4:	41 e0       	ldi	r20, 0x01	; 1
    3ef6:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <MDIO_voidConnectPullup>
					   break ;
		default     :  /** Error */
		               break ;
	}
}
    3efa:	0f 90       	pop	r0
    3efc:	0f 90       	pop	r0
    3efe:	0f 90       	pop	r0
    3f00:	cf 91       	pop	r28
    3f02:	df 91       	pop	r29
    3f04:	08 95       	ret

00003f06 <HPushBotton_u8PbStatus>:

u8 HPushBotton_u8PbStatus (u8 A_u8PbID)
{
    3f06:	df 93       	push	r29
    3f08:	cf 93       	push	r28
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	ec 97       	sbiw	r28, 0x3c	; 60
    3f10:	0f b6       	in	r0, 0x3f	; 63
    3f12:	f8 94       	cli
    3f14:	de bf       	out	0x3e, r29	; 62
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	cd bf       	out	0x3d, r28	; 61
    3f1a:	8a af       	std	Y+58, r24	; 0x3a
	u8 L_u8PbStatus = NOT_PRESSED ;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	89 af       	std	Y+57, r24	; 0x39
	switch (A_u8PbID)
    3f20:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f22:	28 2f       	mov	r18, r24
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	3c af       	std	Y+60, r19	; 0x3c
    3f28:	2b af       	std	Y+59, r18	; 0x3b
    3f2a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f2c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f2e:	82 30       	cpi	r24, 0x02	; 2
    3f30:	91 05       	cpc	r25, r1
    3f32:	09 f4       	brne	.+2      	; 0x3f36 <HPushBotton_u8PbStatus+0x30>
    3f34:	8e c0       	rjmp	.+284    	; 0x4052 <HPushBotton_u8PbStatus+0x14c>
    3f36:	2b ad       	ldd	r18, Y+59	; 0x3b
    3f38:	3c ad       	ldd	r19, Y+60	; 0x3c
    3f3a:	23 30       	cpi	r18, 0x03	; 3
    3f3c:	31 05       	cpc	r19, r1
    3f3e:	09 f4       	brne	.+2      	; 0x3f42 <HPushBotton_u8PbStatus+0x3c>
    3f40:	0a c1       	rjmp	.+532    	; 0x4156 <HPushBotton_u8PbStatus+0x250>
    3f42:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f44:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f46:	81 30       	cpi	r24, 0x01	; 1
    3f48:	91 05       	cpc	r25, r1
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <HPushBotton_u8PbStatus+0x48>
    3f4c:	84 c1       	rjmp	.+776    	; 0x4256 <HPushBotton_u8PbStatus+0x350>
	{                  /**check Pb1 is pressed or not*/
		case Pb1_ID :  if (MDIO_u8GetPinVal (Pb1_PORT , Pb1_PIN) == PRESSED)
    3f4e:	83 e0       	ldi	r24, 0x03	; 3
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	0e 94 1c 18 	call	0x3038	; 0x3038 <MDIO_u8GetPinVal>
    3f56:	88 23       	and	r24, r24
    3f58:	09 f0       	breq	.+2      	; 0x3f5c <HPushBotton_u8PbStatus+0x56>
    3f5a:	7d c1       	rjmp	.+762    	; 0x4256 <HPushBotton_u8PbStatus+0x350>
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	a0 ea       	ldi	r26, 0xA0	; 160
    3f62:	b1 e4       	ldi	r27, 0x41	; 65
    3f64:	8d ab       	std	Y+53, r24	; 0x35
    3f66:	9e ab       	std	Y+54, r25	; 0x36
    3f68:	af ab       	std	Y+55, r26	; 0x37
    3f6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f6c:	6d a9       	ldd	r22, Y+53	; 0x35
    3f6e:	7e a9       	ldd	r23, Y+54	; 0x36
    3f70:	8f a9       	ldd	r24, Y+55	; 0x37
    3f72:	98 ad       	ldd	r25, Y+56	; 0x38
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	4a ef       	ldi	r20, 0xFA	; 250
    3f7a:	54 e4       	ldi	r21, 0x44	; 68
    3f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	89 ab       	std	Y+49, r24	; 0x31
    3f86:	9a ab       	std	Y+50, r25	; 0x32
    3f88:	ab ab       	std	Y+51, r26	; 0x33
    3f8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    3f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    3f90:	8b a9       	ldd	r24, Y+51	; 0x33
    3f92:	9c a9       	ldd	r25, Y+52	; 0x34
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	40 e8       	ldi	r20, 0x80	; 128
    3f9a:	5f e3       	ldi	r21, 0x3F	; 63
    3f9c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3fa0:	88 23       	and	r24, r24
    3fa2:	2c f4       	brge	.+10     	; 0x3fae <HPushBotton_u8PbStatus+0xa8>
		__ticks = 1;
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	98 ab       	std	Y+48, r25	; 0x30
    3faa:	8f a7       	std	Y+47, r24	; 0x2f
    3fac:	3f c0       	rjmp	.+126    	; 0x402c <HPushBotton_u8PbStatus+0x126>
	else if (__tmp > 65535)
    3fae:	69 a9       	ldd	r22, Y+49	; 0x31
    3fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    3fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    3fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	3f ef       	ldi	r19, 0xFF	; 255
    3fba:	4f e7       	ldi	r20, 0x7F	; 127
    3fbc:	57 e4       	ldi	r21, 0x47	; 71
    3fbe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3fc2:	18 16       	cp	r1, r24
    3fc4:	4c f5       	brge	.+82     	; 0x4018 <HPushBotton_u8PbStatus+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc6:	6d a9       	ldd	r22, Y+53	; 0x35
    3fc8:	7e a9       	ldd	r23, Y+54	; 0x36
    3fca:	8f a9       	ldd	r24, Y+55	; 0x37
    3fcc:	98 ad       	ldd	r25, Y+56	; 0x38
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e2       	ldi	r20, 0x20	; 32
    3fd4:	51 e4       	ldi	r21, 0x41	; 65
    3fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	bc 01       	movw	r22, r24
    3fe0:	cd 01       	movw	r24, r26
    3fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	98 ab       	std	Y+48, r25	; 0x30
    3fec:	8f a7       	std	Y+47, r24	; 0x2f
    3fee:	0f c0       	rjmp	.+30     	; 0x400e <HPushBotton_u8PbStatus+0x108>
    3ff0:	88 ec       	ldi	r24, 0xC8	; 200
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	9e a7       	std	Y+46, r25	; 0x2e
    3ff6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ff8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ffa:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ffc:	01 97       	sbiw	r24, 0x01	; 1
    3ffe:	f1 f7       	brne	.-4      	; 0x3ffc <HPushBotton_u8PbStatus+0xf6>
    4000:	9e a7       	std	Y+46, r25	; 0x2e
    4002:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4004:	8f a5       	ldd	r24, Y+47	; 0x2f
    4006:	98 a9       	ldd	r25, Y+48	; 0x30
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	98 ab       	std	Y+48, r25	; 0x30
    400c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4010:	98 a9       	ldd	r25, Y+48	; 0x30
    4012:	00 97       	sbiw	r24, 0x00	; 0
    4014:	69 f7       	brne	.-38     	; 0x3ff0 <HPushBotton_u8PbStatus+0xea>
    4016:	14 c0       	rjmp	.+40     	; 0x4040 <HPushBotton_u8PbStatus+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4018:	69 a9       	ldd	r22, Y+49	; 0x31
    401a:	7a a9       	ldd	r23, Y+50	; 0x32
    401c:	8b a9       	ldd	r24, Y+51	; 0x33
    401e:	9c a9       	ldd	r25, Y+52	; 0x34
    4020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4024:	dc 01       	movw	r26, r24
    4026:	cb 01       	movw	r24, r22
    4028:	98 ab       	std	Y+48, r25	; 0x30
    402a:	8f a7       	std	Y+47, r24	; 0x2f
    402c:	8f a5       	ldd	r24, Y+47	; 0x2f
    402e:	98 a9       	ldd	r25, Y+48	; 0x30
    4030:	9c a7       	std	Y+44, r25	; 0x2c
    4032:	8b a7       	std	Y+43, r24	; 0x2b
    4034:	8b a5       	ldd	r24, Y+43	; 0x2b
    4036:	9c a5       	ldd	r25, Y+44	; 0x2c
    4038:	01 97       	sbiw	r24, 0x01	; 1
    403a:	f1 f7       	brne	.-4      	; 0x4038 <HPushBotton_u8PbStatus+0x132>
    403c:	9c a7       	std	Y+44, r25	; 0x2c
    403e:	8b a7       	std	Y+43, r24	; 0x2b
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb1 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb1_PORT , Pb1_PIN) == PRESSED)
    4040:	83 e0       	ldi	r24, 0x03	; 3
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	0e 94 1c 18 	call	0x3038	; 0x3038 <MDIO_u8GetPinVal>
    4048:	88 23       	and	r24, r24
    404a:	09 f0       	breq	.+2      	; 0x404e <HPushBotton_u8PbStatus+0x148>
    404c:	04 c1       	rjmp	.+520    	; 0x4256 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    404e:	19 ae       	std	Y+57, r1	; 0x39
    4050:	02 c1       	rjmp	.+516    	; 0x4256 <HPushBotton_u8PbStatus+0x350>
							}
		                }
					   break ;
					   
					   /**check Pb2 is pressed or not*/
		case Pb2_ID :  if (MDIO_u8GetPinVal (Pb2_PORT , Pb2_PIN) == PRESSED)
    4052:	84 e0       	ldi	r24, 0x04	; 4
    4054:	62 e0       	ldi	r22, 0x02	; 2
    4056:	0e 94 1c 18 	call	0x3038	; 0x3038 <MDIO_u8GetPinVal>
    405a:	88 23       	and	r24, r24
    405c:	09 f0       	breq	.+2      	; 0x4060 <HPushBotton_u8PbStatus+0x15a>
    405e:	fb c0       	rjmp	.+502    	; 0x4256 <HPushBotton_u8PbStatus+0x350>
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	a0 ea       	ldi	r26, 0xA0	; 160
    4066:	b1 e4       	ldi	r27, 0x41	; 65
    4068:	8f a3       	std	Y+39, r24	; 0x27
    406a:	98 a7       	std	Y+40, r25	; 0x28
    406c:	a9 a7       	std	Y+41, r26	; 0x29
    406e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4070:	6f a1       	ldd	r22, Y+39	; 0x27
    4072:	78 a5       	ldd	r23, Y+40	; 0x28
    4074:	89 a5       	ldd	r24, Y+41	; 0x29
    4076:	9a a5       	ldd	r25, Y+42	; 0x2a
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	4a ef       	ldi	r20, 0xFA	; 250
    407e:	54 e4       	ldi	r21, 0x44	; 68
    4080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	8b a3       	std	Y+35, r24	; 0x23
    408a:	9c a3       	std	Y+36, r25	; 0x24
    408c:	ad a3       	std	Y+37, r26	; 0x25
    408e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4090:	6b a1       	ldd	r22, Y+35	; 0x23
    4092:	7c a1       	ldd	r23, Y+36	; 0x24
    4094:	8d a1       	ldd	r24, Y+37	; 0x25
    4096:	9e a1       	ldd	r25, Y+38	; 0x26
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e8       	ldi	r20, 0x80	; 128
    409e:	5f e3       	ldi	r21, 0x3F	; 63
    40a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    40a4:	88 23       	and	r24, r24
    40a6:	2c f4       	brge	.+10     	; 0x40b2 <HPushBotton_u8PbStatus+0x1ac>
		__ticks = 1;
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	9a a3       	std	Y+34, r25	; 0x22
    40ae:	89 a3       	std	Y+33, r24	; 0x21
    40b0:	3f c0       	rjmp	.+126    	; 0x4130 <HPushBotton_u8PbStatus+0x22a>
	else if (__tmp > 65535)
    40b2:	6b a1       	ldd	r22, Y+35	; 0x23
    40b4:	7c a1       	ldd	r23, Y+36	; 0x24
    40b6:	8d a1       	ldd	r24, Y+37	; 0x25
    40b8:	9e a1       	ldd	r25, Y+38	; 0x26
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	3f ef       	ldi	r19, 0xFF	; 255
    40be:	4f e7       	ldi	r20, 0x7F	; 127
    40c0:	57 e4       	ldi	r21, 0x47	; 71
    40c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    40c6:	18 16       	cp	r1, r24
    40c8:	4c f5       	brge	.+82     	; 0x411c <HPushBotton_u8PbStatus+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ca:	6f a1       	ldd	r22, Y+39	; 0x27
    40cc:	78 a5       	ldd	r23, Y+40	; 0x28
    40ce:	89 a5       	ldd	r24, Y+41	; 0x29
    40d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	40 e2       	ldi	r20, 0x20	; 32
    40d8:	51 e4       	ldi	r21, 0x41	; 65
    40da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	bc 01       	movw	r22, r24
    40e4:	cd 01       	movw	r24, r26
    40e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	9a a3       	std	Y+34, r25	; 0x22
    40f0:	89 a3       	std	Y+33, r24	; 0x21
    40f2:	0f c0       	rjmp	.+30     	; 0x4112 <HPushBotton_u8PbStatus+0x20c>
    40f4:	88 ec       	ldi	r24, 0xC8	; 200
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	98 a3       	std	Y+32, r25	; 0x20
    40fa:	8f 8f       	std	Y+31, r24	; 0x1f
    40fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40fe:	98 a1       	ldd	r25, Y+32	; 0x20
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <HPushBotton_u8PbStatus+0x1fa>
    4104:	98 a3       	std	Y+32, r25	; 0x20
    4106:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4108:	89 a1       	ldd	r24, Y+33	; 0x21
    410a:	9a a1       	ldd	r25, Y+34	; 0x22
    410c:	01 97       	sbiw	r24, 0x01	; 1
    410e:	9a a3       	std	Y+34, r25	; 0x22
    4110:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4112:	89 a1       	ldd	r24, Y+33	; 0x21
    4114:	9a a1       	ldd	r25, Y+34	; 0x22
    4116:	00 97       	sbiw	r24, 0x00	; 0
    4118:	69 f7       	brne	.-38     	; 0x40f4 <HPushBotton_u8PbStatus+0x1ee>
    411a:	14 c0       	rjmp	.+40     	; 0x4144 <HPushBotton_u8PbStatus+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    411c:	6b a1       	ldd	r22, Y+35	; 0x23
    411e:	7c a1       	ldd	r23, Y+36	; 0x24
    4120:	8d a1       	ldd	r24, Y+37	; 0x25
    4122:	9e a1       	ldd	r25, Y+38	; 0x26
    4124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	9a a3       	std	Y+34, r25	; 0x22
    412e:	89 a3       	std	Y+33, r24	; 0x21
    4130:	89 a1       	ldd	r24, Y+33	; 0x21
    4132:	9a a1       	ldd	r25, Y+34	; 0x22
    4134:	9e 8f       	std	Y+30, r25	; 0x1e
    4136:	8d 8f       	std	Y+29, r24	; 0x1d
    4138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    413a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    413c:	01 97       	sbiw	r24, 0x01	; 1
    413e:	f1 f7       	brne	.-4      	; 0x413c <HPushBotton_u8PbStatus+0x236>
    4140:	9e 8f       	std	Y+30, r25	; 0x1e
    4142:	8d 8f       	std	Y+29, r24	; 0x1d
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb2 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb2_PORT , Pb2_PIN) == PRESSED)
    4144:	84 e0       	ldi	r24, 0x04	; 4
    4146:	62 e0       	ldi	r22, 0x02	; 2
    4148:	0e 94 1c 18 	call	0x3038	; 0x3038 <MDIO_u8GetPinVal>
    414c:	88 23       	and	r24, r24
    414e:	09 f0       	breq	.+2      	; 0x4152 <HPushBotton_u8PbStatus+0x24c>
    4150:	82 c0       	rjmp	.+260    	; 0x4256 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    4152:	19 ae       	std	Y+57, r1	; 0x39
    4154:	80 c0       	rjmp	.+256    	; 0x4256 <HPushBotton_u8PbStatus+0x350>
							}
		                }
					   break ;
					   
					   /**check Pb3 is pressed or not*/
		case Pb3_ID :  if (MDIO_u8GetPinVal (Pb3_PORT , Pb3_PIN) == PRESSED)
    4156:	83 e0       	ldi	r24, 0x03	; 3
    4158:	61 e0       	ldi	r22, 0x01	; 1
    415a:	0e 94 1c 18 	call	0x3038	; 0x3038 <MDIO_u8GetPinVal>
    415e:	88 23       	and	r24, r24
    4160:	09 f0       	breq	.+2      	; 0x4164 <HPushBotton_u8PbStatus+0x25e>
    4162:	79 c0       	rjmp	.+242    	; 0x4256 <HPushBotton_u8PbStatus+0x350>
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	a0 ea       	ldi	r26, 0xA0	; 160
    416a:	b1 e4       	ldi	r27, 0x41	; 65
    416c:	89 8f       	std	Y+25, r24	; 0x19
    416e:	9a 8f       	std	Y+26, r25	; 0x1a
    4170:	ab 8f       	std	Y+27, r26	; 0x1b
    4172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4174:	69 8d       	ldd	r22, Y+25	; 0x19
    4176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    417a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	4a ef       	ldi	r20, 0xFA	; 250
    4182:	54 e4       	ldi	r21, 0x44	; 68
    4184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	8d 8b       	std	Y+21, r24	; 0x15
    418e:	9e 8b       	std	Y+22, r25	; 0x16
    4190:	af 8b       	std	Y+23, r26	; 0x17
    4192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4194:	6d 89       	ldd	r22, Y+21	; 0x15
    4196:	7e 89       	ldd	r23, Y+22	; 0x16
    4198:	8f 89       	ldd	r24, Y+23	; 0x17
    419a:	98 8d       	ldd	r25, Y+24	; 0x18
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	40 e8       	ldi	r20, 0x80	; 128
    41a2:	5f e3       	ldi	r21, 0x3F	; 63
    41a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    41a8:	88 23       	and	r24, r24
    41aa:	2c f4       	brge	.+10     	; 0x41b6 <HPushBotton_u8PbStatus+0x2b0>
		__ticks = 1;
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	9c 8b       	std	Y+20, r25	; 0x14
    41b2:	8b 8b       	std	Y+19, r24	; 0x13
    41b4:	3f c0       	rjmp	.+126    	; 0x4234 <HPushBotton_u8PbStatus+0x32e>
	else if (__tmp > 65535)
    41b6:	6d 89       	ldd	r22, Y+21	; 0x15
    41b8:	7e 89       	ldd	r23, Y+22	; 0x16
    41ba:	8f 89       	ldd	r24, Y+23	; 0x17
    41bc:	98 8d       	ldd	r25, Y+24	; 0x18
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	3f ef       	ldi	r19, 0xFF	; 255
    41c2:	4f e7       	ldi	r20, 0x7F	; 127
    41c4:	57 e4       	ldi	r21, 0x47	; 71
    41c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    41ca:	18 16       	cp	r1, r24
    41cc:	4c f5       	brge	.+82     	; 0x4220 <HPushBotton_u8PbStatus+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ce:	69 8d       	ldd	r22, Y+25	; 0x19
    41d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	40 e2       	ldi	r20, 0x20	; 32
    41dc:	51 e4       	ldi	r21, 0x41	; 65
    41de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	bc 01       	movw	r22, r24
    41e8:	cd 01       	movw	r24, r26
    41ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	9c 8b       	std	Y+20, r25	; 0x14
    41f4:	8b 8b       	std	Y+19, r24	; 0x13
    41f6:	0f c0       	rjmp	.+30     	; 0x4216 <HPushBotton_u8PbStatus+0x310>
    41f8:	88 ec       	ldi	r24, 0xC8	; 200
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	9a 8b       	std	Y+18, r25	; 0x12
    41fe:	89 8b       	std	Y+17, r24	; 0x11
    4200:	89 89       	ldd	r24, Y+17	; 0x11
    4202:	9a 89       	ldd	r25, Y+18	; 0x12
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <HPushBotton_u8PbStatus+0x2fe>
    4208:	9a 8b       	std	Y+18, r25	; 0x12
    420a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    420c:	8b 89       	ldd	r24, Y+19	; 0x13
    420e:	9c 89       	ldd	r25, Y+20	; 0x14
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	9c 8b       	std	Y+20, r25	; 0x14
    4214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4216:	8b 89       	ldd	r24, Y+19	; 0x13
    4218:	9c 89       	ldd	r25, Y+20	; 0x14
    421a:	00 97       	sbiw	r24, 0x00	; 0
    421c:	69 f7       	brne	.-38     	; 0x41f8 <HPushBotton_u8PbStatus+0x2f2>
    421e:	14 c0       	rjmp	.+40     	; 0x4248 <HPushBotton_u8PbStatus+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4220:	6d 89       	ldd	r22, Y+21	; 0x15
    4222:	7e 89       	ldd	r23, Y+22	; 0x16
    4224:	8f 89       	ldd	r24, Y+23	; 0x17
    4226:	98 8d       	ldd	r25, Y+24	; 0x18
    4228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	9c 8b       	std	Y+20, r25	; 0x14
    4232:	8b 8b       	std	Y+19, r24	; 0x13
    4234:	8b 89       	ldd	r24, Y+19	; 0x13
    4236:	9c 89       	ldd	r25, Y+20	; 0x14
    4238:	98 8b       	std	Y+16, r25	; 0x10
    423a:	8f 87       	std	Y+15, r24	; 0x0f
    423c:	8f 85       	ldd	r24, Y+15	; 0x0f
    423e:	98 89       	ldd	r25, Y+16	; 0x10
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <HPushBotton_u8PbStatus+0x33a>
    4244:	98 8b       	std	Y+16, r25	; 0x10
    4246:	8f 87       	std	Y+15, r24	; 0x0f
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb3 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb3_PORT , Pb3_PIN) == PRESSED)
    4248:	83 e0       	ldi	r24, 0x03	; 3
    424a:	61 e0       	ldi	r22, 0x01	; 1
    424c:	0e 94 1c 18 	call	0x3038	; 0x3038 <MDIO_u8GetPinVal>
    4250:	88 23       	and	r24, r24
    4252:	09 f4       	brne	.+2      	; 0x4256 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    4254:	19 ae       	std	Y+57, r1	; 0x39
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	a0 ea       	ldi	r26, 0xA0	; 160
    425c:	b1 e4       	ldi	r27, 0x41	; 65
    425e:	8b 87       	std	Y+11, r24	; 0x0b
    4260:	9c 87       	std	Y+12, r25	; 0x0c
    4262:	ad 87       	std	Y+13, r26	; 0x0d
    4264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4266:	6b 85       	ldd	r22, Y+11	; 0x0b
    4268:	7c 85       	ldd	r23, Y+12	; 0x0c
    426a:	8d 85       	ldd	r24, Y+13	; 0x0d
    426c:	9e 85       	ldd	r25, Y+14	; 0x0e
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	4a ef       	ldi	r20, 0xFA	; 250
    4274:	54 e4       	ldi	r21, 0x44	; 68
    4276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	8f 83       	std	Y+7, r24	; 0x07
    4280:	98 87       	std	Y+8, r25	; 0x08
    4282:	a9 87       	std	Y+9, r26	; 0x09
    4284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4286:	6f 81       	ldd	r22, Y+7	; 0x07
    4288:	78 85       	ldd	r23, Y+8	; 0x08
    428a:	89 85       	ldd	r24, Y+9	; 0x09
    428c:	9a 85       	ldd	r25, Y+10	; 0x0a
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	40 e8       	ldi	r20, 0x80	; 128
    4294:	5f e3       	ldi	r21, 0x3F	; 63
    4296:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    429a:	88 23       	and	r24, r24
    429c:	2c f4       	brge	.+10     	; 0x42a8 <HPushBotton_u8PbStatus+0x3a2>
		__ticks = 1;
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9e 83       	std	Y+6, r25	; 0x06
    42a4:	8d 83       	std	Y+5, r24	; 0x05
    42a6:	3f c0       	rjmp	.+126    	; 0x4326 <HPushBotton_u8PbStatus+0x420>
	else if (__tmp > 65535)
    42a8:	6f 81       	ldd	r22, Y+7	; 0x07
    42aa:	78 85       	ldd	r23, Y+8	; 0x08
    42ac:	89 85       	ldd	r24, Y+9	; 0x09
    42ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	3f ef       	ldi	r19, 0xFF	; 255
    42b4:	4f e7       	ldi	r20, 0x7F	; 127
    42b6:	57 e4       	ldi	r21, 0x47	; 71
    42b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42bc:	18 16       	cp	r1, r24
    42be:	4c f5       	brge	.+82     	; 0x4312 <HPushBotton_u8PbStatus+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    42c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e2       	ldi	r20, 0x20	; 32
    42ce:	51 e4       	ldi	r21, 0x41	; 65
    42d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	bc 01       	movw	r22, r24
    42da:	cd 01       	movw	r24, r26
    42dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	9e 83       	std	Y+6, r25	; 0x06
    42e6:	8d 83       	std	Y+5, r24	; 0x05
    42e8:	0f c0       	rjmp	.+30     	; 0x4308 <HPushBotton_u8PbStatus+0x402>
    42ea:	88 ec       	ldi	r24, 0xC8	; 200
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	9c 83       	std	Y+4, r25	; 0x04
    42f0:	8b 83       	std	Y+3, r24	; 0x03
    42f2:	8b 81       	ldd	r24, Y+3	; 0x03
    42f4:	9c 81       	ldd	r25, Y+4	; 0x04
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <HPushBotton_u8PbStatus+0x3f0>
    42fa:	9c 83       	std	Y+4, r25	; 0x04
    42fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4300:	9e 81       	ldd	r25, Y+6	; 0x06
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	9e 83       	std	Y+6, r25	; 0x06
    4306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4308:	8d 81       	ldd	r24, Y+5	; 0x05
    430a:	9e 81       	ldd	r25, Y+6	; 0x06
    430c:	00 97       	sbiw	r24, 0x00	; 0
    430e:	69 f7       	brne	.-38     	; 0x42ea <HPushBotton_u8PbStatus+0x3e4>
    4310:	14 c0       	rjmp	.+40     	; 0x433a <HPushBotton_u8PbStatus+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4312:	6f 81       	ldd	r22, Y+7	; 0x07
    4314:	78 85       	ldd	r23, Y+8	; 0x08
    4316:	89 85       	ldd	r24, Y+9	; 0x09
    4318:	9a 85       	ldd	r25, Y+10	; 0x0a
    431a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	9e 83       	std	Y+6, r25	; 0x06
    4324:	8d 83       	std	Y+5, r24	; 0x05
    4326:	8d 81       	ldd	r24, Y+5	; 0x05
    4328:	9e 81       	ldd	r25, Y+6	; 0x06
    432a:	9a 83       	std	Y+2, r25	; 0x02
    432c:	89 83       	std	Y+1, r24	; 0x01
    432e:	89 81       	ldd	r24, Y+1	; 0x01
    4330:	9a 81       	ldd	r25, Y+2	; 0x02
    4332:	01 97       	sbiw	r24, 0x01	; 1
    4334:	f1 f7       	brne	.-4      	; 0x4332 <HPushBotton_u8PbStatus+0x42c>
    4336:	9a 83       	std	Y+2, r25	; 0x02
    4338:	89 83       	std	Y+1, r24	; 0x01
		default     :  /** Error */
		               break ;
	}
	/**delay 20ms to detect bouncing*/
	_delay_ms (DELAY_FOR_DEPOUNCING) ;
	return L_u8PbStatus ;
    433a:	89 ad       	ldd	r24, Y+57	; 0x39
}
    433c:	ec 96       	adiw	r28, 0x3c	; 60
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	cf 91       	pop	r28
    434a:	df 91       	pop	r29
    434c:	08 95       	ret

0000434e <HLED_voidLedInitial>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_int.h"
#include "LED_int.h"

void HLED_voidLedInitial (u8 A_u8LED_ID)
{
    434e:	df 93       	push	r29
    4350:	cf 93       	push	r28
    4352:	00 d0       	rcall	.+0      	; 0x4354 <HLED_voidLedInitial+0x6>
    4354:	0f 92       	push	r0
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LED_ID)
    435c:	89 81       	ldd	r24, Y+1	; 0x01
    435e:	28 2f       	mov	r18, r24
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	3b 83       	std	Y+3, r19	; 0x03
    4364:	2a 83       	std	Y+2, r18	; 0x02
    4366:	8a 81       	ldd	r24, Y+2	; 0x02
    4368:	9b 81       	ldd	r25, Y+3	; 0x03
    436a:	84 30       	cpi	r24, 0x04	; 4
    436c:	91 05       	cpc	r25, r1
    436e:	e1 f1       	breq	.+120    	; 0x43e8 <HLED_voidLedInitial+0x9a>
    4370:	2a 81       	ldd	r18, Y+2	; 0x02
    4372:	3b 81       	ldd	r19, Y+3	; 0x03
    4374:	25 30       	cpi	r18, 0x05	; 5
    4376:	31 05       	cpc	r19, r1
    4378:	84 f4       	brge	.+32     	; 0x439a <HLED_voidLedInitial+0x4c>
    437a:	8a 81       	ldd	r24, Y+2	; 0x02
    437c:	9b 81       	ldd	r25, Y+3	; 0x03
    437e:	82 30       	cpi	r24, 0x02	; 2
    4380:	91 05       	cpc	r25, r1
    4382:	31 f1       	breq	.+76     	; 0x43d0 <HLED_voidLedInitial+0x82>
    4384:	2a 81       	ldd	r18, Y+2	; 0x02
    4386:	3b 81       	ldd	r19, Y+3	; 0x03
    4388:	23 30       	cpi	r18, 0x03	; 3
    438a:	31 05       	cpc	r19, r1
    438c:	3c f5       	brge	.+78     	; 0x43dc <HLED_voidLedInitial+0x8e>
    438e:	8a 81       	ldd	r24, Y+2	; 0x02
    4390:	9b 81       	ldd	r25, Y+3	; 0x03
    4392:	81 30       	cpi	r24, 0x01	; 1
    4394:	91 05       	cpc	r25, r1
    4396:	b1 f0       	breq	.+44     	; 0x43c4 <HLED_voidLedInitial+0x76>
    4398:	44 c0       	rjmp	.+136    	; 0x4422 <HLED_voidLedInitial+0xd4>
    439a:	2a 81       	ldd	r18, Y+2	; 0x02
    439c:	3b 81       	ldd	r19, Y+3	; 0x03
    439e:	26 30       	cpi	r18, 0x06	; 6
    43a0:	31 05       	cpc	r19, r1
    43a2:	71 f1       	breq	.+92     	; 0x4400 <HLED_voidLedInitial+0xb2>
    43a4:	8a 81       	ldd	r24, Y+2	; 0x02
    43a6:	9b 81       	ldd	r25, Y+3	; 0x03
    43a8:	86 30       	cpi	r24, 0x06	; 6
    43aa:	91 05       	cpc	r25, r1
    43ac:	1c f1       	brlt	.+70     	; 0x43f4 <HLED_voidLedInitial+0xa6>
    43ae:	2a 81       	ldd	r18, Y+2	; 0x02
    43b0:	3b 81       	ldd	r19, Y+3	; 0x03
    43b2:	27 30       	cpi	r18, 0x07	; 7
    43b4:	31 05       	cpc	r19, r1
    43b6:	51 f1       	breq	.+84     	; 0x440c <HLED_voidLedInitial+0xbe>
    43b8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ba:	9b 81       	ldd	r25, Y+3	; 0x03
    43bc:	88 30       	cpi	r24, 0x08	; 8
    43be:	91 05       	cpc	r25, r1
    43c0:	59 f1       	breq	.+86     	; 0x4418 <HLED_voidLedInitial+0xca>
    43c2:	2f c0       	rjmp	.+94     	; 0x4422 <HLED_voidLedInitial+0xd4>
	{                  /**make direction of LED_1 is output*/
		case LED1_ID : MDIO_voidSetPinDir(LED1_PORT , LED1_PIN , LED_OUTPUT) ; break ;
    43c4:	83 e0       	ldi	r24, 0x03	; 3
    43c6:	62 e0       	ldi	r22, 0x02	; 2
    43c8:	41 e0       	ldi	r20, 0x01	; 1
    43ca:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
    43ce:	29 c0       	rjmp	.+82     	; 0x4422 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_2 is output*/
		case LED2_ID : MDIO_voidSetPinDir(LED2_PORT , LED2_PIN , LED_OUTPUT) ; break ;
    43d0:	83 e0       	ldi	r24, 0x03	; 3
    43d2:	63 e0       	ldi	r22, 0x03	; 3
    43d4:	41 e0       	ldi	r20, 0x01	; 1
    43d6:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
    43da:	23 c0       	rjmp	.+70     	; 0x4422 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_3 is output*/
		case LED3_ID : MDIO_voidSetPinDir(LED3_PORT , LED3_PIN , LED_OUTPUT) ; break ;
    43dc:	83 e0       	ldi	r24, 0x03	; 3
    43de:	64 e0       	ldi	r22, 0x04	; 4
    43e0:	41 e0       	ldi	r20, 0x01	; 1
    43e2:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
    43e6:	1d c0       	rjmp	.+58     	; 0x4422 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_4 is output*/
		case LED4_ID : MDIO_voidSetPinDir(LED4_PORT , LED4_PIN , LED_OUTPUT) ; break ;
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	63 e0       	ldi	r22, 0x03	; 3
    43ec:	41 e0       	ldi	r20, 0x01	; 1
    43ee:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
    43f2:	17 c0       	rjmp	.+46     	; 0x4422 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_5 is output*/
		case LED5_ID : MDIO_voidSetPinDir(LED5_PORT , LED5_PIN , LED_OUTPUT) ; break ;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	64 e0       	ldi	r22, 0x04	; 4
    43f8:	41 e0       	ldi	r20, 0x01	; 1
    43fa:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
    43fe:	11 c0       	rjmp	.+34     	; 0x4422 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_6 is output*/
		case LED6_ID : MDIO_voidSetPinDir(LED6_PORT , LED6_PIN , LED_OUTPUT) ; break ;
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	65 e0       	ldi	r22, 0x05	; 5
    4404:	41 e0       	ldi	r20, 0x01	; 1
    4406:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
    440a:	0b c0       	rjmp	.+22     	; 0x4422 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_7 is output*/
		case LED7_ID : MDIO_voidSetPinDir(LED7_PORT , LED7_PIN , LED_OUTPUT) ; break ;
    440c:	81 e0       	ldi	r24, 0x01	; 1
    440e:	66 e0       	ldi	r22, 0x06	; 6
    4410:	41 e0       	ldi	r20, 0x01	; 1
    4412:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
    4416:	05 c0       	rjmp	.+10     	; 0x4422 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_8 is output*/
		case LED8_ID : MDIO_voidSetPinDir(LED8_PORT , LED8_PIN , LED_OUTPUT) ; break ;
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	67 e0       	ldi	r22, 0x07	; 7
    441c:	41 e0       	ldi	r20, 0x01	; 1
    441e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		default      : /** Error */                                            break ;
	}
}
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	0f 90       	pop	r0
    4428:	cf 91       	pop	r28
    442a:	df 91       	pop	r29
    442c:	08 95       	ret

0000442e <HLED_voidLedOn>:

void HLED_voidLedOn (u8 A_u8LED_ID)
{
    442e:	df 93       	push	r29
    4430:	cf 93       	push	r28
    4432:	00 d0       	rcall	.+0      	; 0x4434 <HLED_voidLedOn+0x6>
    4434:	0f 92       	push	r0
    4436:	cd b7       	in	r28, 0x3d	; 61
    4438:	de b7       	in	r29, 0x3e	; 62
    443a:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LED_ID)
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	28 2f       	mov	r18, r24
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	3b 83       	std	Y+3, r19	; 0x03
    4444:	2a 83       	std	Y+2, r18	; 0x02
    4446:	8a 81       	ldd	r24, Y+2	; 0x02
    4448:	9b 81       	ldd	r25, Y+3	; 0x03
    444a:	84 30       	cpi	r24, 0x04	; 4
    444c:	91 05       	cpc	r25, r1
    444e:	c9 f1       	breq	.+114    	; 0x44c2 <HLED_voidLedOn+0x94>
    4450:	2a 81       	ldd	r18, Y+2	; 0x02
    4452:	3b 81       	ldd	r19, Y+3	; 0x03
    4454:	25 30       	cpi	r18, 0x05	; 5
    4456:	31 05       	cpc	r19, r1
    4458:	84 f4       	brge	.+32     	; 0x447a <HLED_voidLedOn+0x4c>
    445a:	8a 81       	ldd	r24, Y+2	; 0x02
    445c:	9b 81       	ldd	r25, Y+3	; 0x03
    445e:	82 30       	cpi	r24, 0x02	; 2
    4460:	91 05       	cpc	r25, r1
    4462:	29 f1       	breq	.+74     	; 0x44ae <HLED_voidLedOn+0x80>
    4464:	2a 81       	ldd	r18, Y+2	; 0x02
    4466:	3b 81       	ldd	r19, Y+3	; 0x03
    4468:	23 30       	cpi	r18, 0x03	; 3
    446a:	31 05       	cpc	r19, r1
    446c:	2c f5       	brge	.+74     	; 0x44b8 <HLED_voidLedOn+0x8a>
    446e:	8a 81       	ldd	r24, Y+2	; 0x02
    4470:	9b 81       	ldd	r25, Y+3	; 0x03
    4472:	81 30       	cpi	r24, 0x01	; 1
    4474:	91 05       	cpc	r25, r1
    4476:	b1 f0       	breq	.+44     	; 0x44a4 <HLED_voidLedOn+0x76>
    4478:	3c c0       	rjmp	.+120    	; 0x44f2 <HLED_voidLedOn+0xc4>
    447a:	2a 81       	ldd	r18, Y+2	; 0x02
    447c:	3b 81       	ldd	r19, Y+3	; 0x03
    447e:	26 30       	cpi	r18, 0x06	; 6
    4480:	31 05       	cpc	r19, r1
    4482:	49 f1       	breq	.+82     	; 0x44d6 <HLED_voidLedOn+0xa8>
    4484:	8a 81       	ldd	r24, Y+2	; 0x02
    4486:	9b 81       	ldd	r25, Y+3	; 0x03
    4488:	86 30       	cpi	r24, 0x06	; 6
    448a:	91 05       	cpc	r25, r1
    448c:	fc f0       	brlt	.+62     	; 0x44cc <HLED_voidLedOn+0x9e>
    448e:	2a 81       	ldd	r18, Y+2	; 0x02
    4490:	3b 81       	ldd	r19, Y+3	; 0x03
    4492:	27 30       	cpi	r18, 0x07	; 7
    4494:	31 05       	cpc	r19, r1
    4496:	21 f1       	breq	.+72     	; 0x44e0 <HLED_voidLedOn+0xb2>
    4498:	8a 81       	ldd	r24, Y+2	; 0x02
    449a:	9b 81       	ldd	r25, Y+3	; 0x03
    449c:	88 30       	cpi	r24, 0x08	; 8
    449e:	91 05       	cpc	r25, r1
    44a0:	21 f1       	breq	.+72     	; 0x44ea <HLED_voidLedOn+0xbc>
    44a2:	27 c0       	rjmp	.+78     	; 0x44f2 <HLED_voidLedOn+0xc4>
	{
		               /**turn on LED_1*/
		case LED1_ID : MDIO_voidSetPinVal(LED1_PORT , LED1_PIN) ; break ;
    44a4:	83 e0       	ldi	r24, 0x03	; 3
    44a6:	62 e0       	ldi	r22, 0x02	; 2
    44a8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    44ac:	22 c0       	rjmp	.+68     	; 0x44f2 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_2*/
		case LED2_ID : MDIO_voidSetPinVal(LED2_PORT , LED2_PIN) ; break ;
    44ae:	83 e0       	ldi	r24, 0x03	; 3
    44b0:	63 e0       	ldi	r22, 0x03	; 3
    44b2:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    44b6:	1d c0       	rjmp	.+58     	; 0x44f2 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_3*/
		case LED3_ID : MDIO_voidSetPinVal(LED3_PORT , LED3_PIN) ; break ;
    44b8:	83 e0       	ldi	r24, 0x03	; 3
    44ba:	64 e0       	ldi	r22, 0x04	; 4
    44bc:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    44c0:	18 c0       	rjmp	.+48     	; 0x44f2 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_4*/
		case LED4_ID : MDIO_voidSetPinVal(LED4_PORT , LED4_PIN) ; break ;
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	63 e0       	ldi	r22, 0x03	; 3
    44c6:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    44ca:	13 c0       	rjmp	.+38     	; 0x44f2 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_5*/
		case LED5_ID : MDIO_voidSetPinVal(LED5_PORT , LED5_PIN) ; break ;
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	64 e0       	ldi	r22, 0x04	; 4
    44d0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    44d4:	0e c0       	rjmp	.+28     	; 0x44f2 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_6*/
		case LED6_ID : MDIO_voidSetPinVal(LED6_PORT , LED6_PIN) ; break ;
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	65 e0       	ldi	r22, 0x05	; 5
    44da:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    44de:	09 c0       	rjmp	.+18     	; 0x44f2 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_7*/
		case LED7_ID : MDIO_voidSetPinVal(LED7_PORT , LED7_PIN) ; break ;
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	66 e0       	ldi	r22, 0x06	; 6
    44e4:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    44e8:	04 c0       	rjmp	.+8      	; 0x44f2 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_8*/
		case LED8_ID : MDIO_voidSetPinVal(LED8_PORT , LED8_PIN) ; break ;
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	67 e0       	ldi	r22, 0x07	; 7
    44ee:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
		default      : /** Error */                               break ;
	}
}
    44f2:	0f 90       	pop	r0
    44f4:	0f 90       	pop	r0
    44f6:	0f 90       	pop	r0
    44f8:	cf 91       	pop	r28
    44fa:	df 91       	pop	r29
    44fc:	08 95       	ret

000044fe <HLED_voidLedOff>:

void HLED_voidLedOff (u8 A_u8LED_ID)
{
    44fe:	df 93       	push	r29
    4500:	cf 93       	push	r28
    4502:	00 d0       	rcall	.+0      	; 0x4504 <HLED_voidLedOff+0x6>
    4504:	0f 92       	push	r0
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LED_ID)
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	28 2f       	mov	r18, r24
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	3b 83       	std	Y+3, r19	; 0x03
    4514:	2a 83       	std	Y+2, r18	; 0x02
    4516:	8a 81       	ldd	r24, Y+2	; 0x02
    4518:	9b 81       	ldd	r25, Y+3	; 0x03
    451a:	84 30       	cpi	r24, 0x04	; 4
    451c:	91 05       	cpc	r25, r1
    451e:	c9 f1       	breq	.+114    	; 0x4592 <HLED_voidLedOff+0x94>
    4520:	2a 81       	ldd	r18, Y+2	; 0x02
    4522:	3b 81       	ldd	r19, Y+3	; 0x03
    4524:	25 30       	cpi	r18, 0x05	; 5
    4526:	31 05       	cpc	r19, r1
    4528:	84 f4       	brge	.+32     	; 0x454a <HLED_voidLedOff+0x4c>
    452a:	8a 81       	ldd	r24, Y+2	; 0x02
    452c:	9b 81       	ldd	r25, Y+3	; 0x03
    452e:	82 30       	cpi	r24, 0x02	; 2
    4530:	91 05       	cpc	r25, r1
    4532:	29 f1       	breq	.+74     	; 0x457e <HLED_voidLedOff+0x80>
    4534:	2a 81       	ldd	r18, Y+2	; 0x02
    4536:	3b 81       	ldd	r19, Y+3	; 0x03
    4538:	23 30       	cpi	r18, 0x03	; 3
    453a:	31 05       	cpc	r19, r1
    453c:	2c f5       	brge	.+74     	; 0x4588 <HLED_voidLedOff+0x8a>
    453e:	8a 81       	ldd	r24, Y+2	; 0x02
    4540:	9b 81       	ldd	r25, Y+3	; 0x03
    4542:	81 30       	cpi	r24, 0x01	; 1
    4544:	91 05       	cpc	r25, r1
    4546:	b1 f0       	breq	.+44     	; 0x4574 <HLED_voidLedOff+0x76>
    4548:	3c c0       	rjmp	.+120    	; 0x45c2 <HLED_voidLedOff+0xc4>
    454a:	2a 81       	ldd	r18, Y+2	; 0x02
    454c:	3b 81       	ldd	r19, Y+3	; 0x03
    454e:	26 30       	cpi	r18, 0x06	; 6
    4550:	31 05       	cpc	r19, r1
    4552:	49 f1       	breq	.+82     	; 0x45a6 <HLED_voidLedOff+0xa8>
    4554:	8a 81       	ldd	r24, Y+2	; 0x02
    4556:	9b 81       	ldd	r25, Y+3	; 0x03
    4558:	86 30       	cpi	r24, 0x06	; 6
    455a:	91 05       	cpc	r25, r1
    455c:	fc f0       	brlt	.+62     	; 0x459c <HLED_voidLedOff+0x9e>
    455e:	2a 81       	ldd	r18, Y+2	; 0x02
    4560:	3b 81       	ldd	r19, Y+3	; 0x03
    4562:	27 30       	cpi	r18, 0x07	; 7
    4564:	31 05       	cpc	r19, r1
    4566:	21 f1       	breq	.+72     	; 0x45b0 <HLED_voidLedOff+0xb2>
    4568:	8a 81       	ldd	r24, Y+2	; 0x02
    456a:	9b 81       	ldd	r25, Y+3	; 0x03
    456c:	88 30       	cpi	r24, 0x08	; 8
    456e:	91 05       	cpc	r25, r1
    4570:	21 f1       	breq	.+72     	; 0x45ba <HLED_voidLedOff+0xbc>
    4572:	27 c0       	rjmp	.+78     	; 0x45c2 <HLED_voidLedOff+0xc4>
	{                  /**turn off LED_1*/
		case LED1_ID : MDIO_voidClrPinVal(LED1_PORT , LED1_PIN) ; break ;
    4574:	83 e0       	ldi	r24, 0x03	; 3
    4576:	62 e0       	ldi	r22, 0x02	; 2
    4578:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    457c:	22 c0       	rjmp	.+68     	; 0x45c2 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_2*/
		case LED2_ID : MDIO_voidClrPinVal(LED2_PORT , LED2_PIN) ; break ;
    457e:	83 e0       	ldi	r24, 0x03	; 3
    4580:	63 e0       	ldi	r22, 0x03	; 3
    4582:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    4586:	1d c0       	rjmp	.+58     	; 0x45c2 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_3*/
		case LED3_ID : MDIO_voidClrPinVal(LED3_PORT , LED3_PIN) ; break ;
    4588:	83 e0       	ldi	r24, 0x03	; 3
    458a:	64 e0       	ldi	r22, 0x04	; 4
    458c:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    4590:	18 c0       	rjmp	.+48     	; 0x45c2 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_4*/
		case LED4_ID : MDIO_voidClrPinVal(LED4_PORT , LED4_PIN) ; break ;
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	63 e0       	ldi	r22, 0x03	; 3
    4596:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    459a:	13 c0       	rjmp	.+38     	; 0x45c2 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_5*/
		case LED5_ID : MDIO_voidClrPinVal(LED5_PORT , LED5_PIN) ; break ;
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	64 e0       	ldi	r22, 0x04	; 4
    45a0:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    45a4:	0e c0       	rjmp	.+28     	; 0x45c2 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_6*/
		case LED6_ID : MDIO_voidClrPinVal(LED6_PORT , LED6_PIN) ; break ;
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	65 e0       	ldi	r22, 0x05	; 5
    45aa:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    45ae:	09 c0       	rjmp	.+18     	; 0x45c2 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_7*/
		case LED7_ID : MDIO_voidClrPinVal(LED7_PORT , LED7_PIN) ; break ;
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	66 e0       	ldi	r22, 0x06	; 6
    45b4:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    45b8:	04 c0       	rjmp	.+8      	; 0x45c2 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_8*/
		case LED8_ID : MDIO_voidClrPinVal(LED8_PORT , LED8_PIN) ; break ;
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	67 e0       	ldi	r22, 0x07	; 7
    45be:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
		default      : /** Error */                               break ;
	}
}
    45c2:	0f 90       	pop	r0
    45c4:	0f 90       	pop	r0
    45c6:	0f 90       	pop	r0
    45c8:	cf 91       	pop	r28
    45ca:	df 91       	pop	r29
    45cc:	08 95       	ret

000045ce <HLED_voidLedToggle>:

void HLED_voidLedToggle (u8 A_u8LED_ID)
{
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	00 d0       	rcall	.+0      	; 0x45d4 <HLED_voidLedToggle+0x6>
    45d4:	0f 92       	push	r0
    45d6:	cd b7       	in	r28, 0x3d	; 61
    45d8:	de b7       	in	r29, 0x3e	; 62
    45da:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LED_ID)
    45dc:	89 81       	ldd	r24, Y+1	; 0x01
    45de:	28 2f       	mov	r18, r24
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	3b 83       	std	Y+3, r19	; 0x03
    45e4:	2a 83       	std	Y+2, r18	; 0x02
    45e6:	8a 81       	ldd	r24, Y+2	; 0x02
    45e8:	9b 81       	ldd	r25, Y+3	; 0x03
    45ea:	84 30       	cpi	r24, 0x04	; 4
    45ec:	91 05       	cpc	r25, r1
    45ee:	c9 f1       	breq	.+114    	; 0x4662 <HLED_voidLedToggle+0x94>
    45f0:	2a 81       	ldd	r18, Y+2	; 0x02
    45f2:	3b 81       	ldd	r19, Y+3	; 0x03
    45f4:	25 30       	cpi	r18, 0x05	; 5
    45f6:	31 05       	cpc	r19, r1
    45f8:	84 f4       	brge	.+32     	; 0x461a <HLED_voidLedToggle+0x4c>
    45fa:	8a 81       	ldd	r24, Y+2	; 0x02
    45fc:	9b 81       	ldd	r25, Y+3	; 0x03
    45fe:	82 30       	cpi	r24, 0x02	; 2
    4600:	91 05       	cpc	r25, r1
    4602:	29 f1       	breq	.+74     	; 0x464e <HLED_voidLedToggle+0x80>
    4604:	2a 81       	ldd	r18, Y+2	; 0x02
    4606:	3b 81       	ldd	r19, Y+3	; 0x03
    4608:	23 30       	cpi	r18, 0x03	; 3
    460a:	31 05       	cpc	r19, r1
    460c:	2c f5       	brge	.+74     	; 0x4658 <HLED_voidLedToggle+0x8a>
    460e:	8a 81       	ldd	r24, Y+2	; 0x02
    4610:	9b 81       	ldd	r25, Y+3	; 0x03
    4612:	81 30       	cpi	r24, 0x01	; 1
    4614:	91 05       	cpc	r25, r1
    4616:	b1 f0       	breq	.+44     	; 0x4644 <HLED_voidLedToggle+0x76>
    4618:	3c c0       	rjmp	.+120    	; 0x4692 <HLED_voidLedToggle+0xc4>
    461a:	2a 81       	ldd	r18, Y+2	; 0x02
    461c:	3b 81       	ldd	r19, Y+3	; 0x03
    461e:	26 30       	cpi	r18, 0x06	; 6
    4620:	31 05       	cpc	r19, r1
    4622:	49 f1       	breq	.+82     	; 0x4676 <HLED_voidLedToggle+0xa8>
    4624:	8a 81       	ldd	r24, Y+2	; 0x02
    4626:	9b 81       	ldd	r25, Y+3	; 0x03
    4628:	86 30       	cpi	r24, 0x06	; 6
    462a:	91 05       	cpc	r25, r1
    462c:	fc f0       	brlt	.+62     	; 0x466c <HLED_voidLedToggle+0x9e>
    462e:	2a 81       	ldd	r18, Y+2	; 0x02
    4630:	3b 81       	ldd	r19, Y+3	; 0x03
    4632:	27 30       	cpi	r18, 0x07	; 7
    4634:	31 05       	cpc	r19, r1
    4636:	21 f1       	breq	.+72     	; 0x4680 <HLED_voidLedToggle+0xb2>
    4638:	8a 81       	ldd	r24, Y+2	; 0x02
    463a:	9b 81       	ldd	r25, Y+3	; 0x03
    463c:	88 30       	cpi	r24, 0x08	; 8
    463e:	91 05       	cpc	r25, r1
    4640:	21 f1       	breq	.+72     	; 0x468a <HLED_voidLedToggle+0xbc>
    4642:	27 c0       	rjmp	.+78     	; 0x4692 <HLED_voidLedToggle+0xc4>
	{
		               /**inverse status of LED_1*/
		case LED1_ID : MDIO_voidTogPinVal(LED1_PORT , LED1_PIN) ; break ;
    4644:	83 e0       	ldi	r24, 0x03	; 3
    4646:	62 e0       	ldi	r22, 0x02	; 2
    4648:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
    464c:	22 c0       	rjmp	.+68     	; 0x4692 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_2*/
		case LED2_ID : MDIO_voidTogPinVal(LED2_PORT , LED2_PIN) ; break ;
    464e:	83 e0       	ldi	r24, 0x03	; 3
    4650:	63 e0       	ldi	r22, 0x03	; 3
    4652:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
    4656:	1d c0       	rjmp	.+58     	; 0x4692 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_3*/
		case LED3_ID : MDIO_voidTogPinVal(LED3_PORT , LED3_PIN) ; break ;
    4658:	83 e0       	ldi	r24, 0x03	; 3
    465a:	64 e0       	ldi	r22, 0x04	; 4
    465c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
    4660:	18 c0       	rjmp	.+48     	; 0x4692 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_4*/
		case LED4_ID : MDIO_voidTogPinVal(LED4_PORT , LED4_PIN) ; break ;
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	63 e0       	ldi	r22, 0x03	; 3
    4666:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
    466a:	13 c0       	rjmp	.+38     	; 0x4692 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_5*/
		case LED5_ID : MDIO_voidTogPinVal(LED5_PORT , LED5_PIN) ; break ;
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	64 e0       	ldi	r22, 0x04	; 4
    4670:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
    4674:	0e c0       	rjmp	.+28     	; 0x4692 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_6*/
		case LED6_ID : MDIO_voidTogPinVal(LED6_PORT , LED6_PIN) ; break ;
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	65 e0       	ldi	r22, 0x05	; 5
    467a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
    467e:	09 c0       	rjmp	.+18     	; 0x4692 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_7*/
		case LED7_ID : MDIO_voidTogPinVal(LED7_PORT , LED7_PIN) ; break ;
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	66 e0       	ldi	r22, 0x06	; 6
    4684:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
    4688:	04 c0       	rjmp	.+8      	; 0x4692 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_8*/
		case LED8_ID : MDIO_voidTogPinVal(LED8_PORT , LED8_PIN) ; break ;
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	67 e0       	ldi	r22, 0x07	; 7
    468e:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
		default      : /** Error */                               break ;
	}
}
    4692:	0f 90       	pop	r0
    4694:	0f 90       	pop	r0
    4696:	0f 90       	pop	r0
    4698:	cf 91       	pop	r28
    469a:	df 91       	pop	r29
    469c:	08 95       	ret

0000469e <HLCD_voidSendCmd>:
#include <util/delay.h>
#include "LCD_conf.h"
#include "LCD_private.h"

void HLCD_voidSendCmd(u8 A_u8CmdID)
{
    469e:	0f 93       	push	r16
    46a0:	1f 93       	push	r17
    46a2:	df 93       	push	r29
    46a4:	cf 93       	push	r28
    46a6:	cd b7       	in	r28, 0x3d	; 61
    46a8:	de b7       	in	r29, 0x3e	; 62
    46aa:	c7 54       	subi	r28, 0x47	; 71
    46ac:	d0 40       	sbci	r29, 0x00	; 0
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	de bf       	out	0x3e, r29	; 62
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	cd bf       	out	0x3d, r28	; 61
    46b8:	fe 01       	movw	r30, r28
    46ba:	e9 5b       	subi	r30, 0xB9	; 185
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	80 83       	st	Z, r24
	    _delay_ms (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	63 e0       	ldi	r22, 0x03	; 3
    46c4:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
	    
	    /**send last four bits of data to last four bit at control register */
	    MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8CmdID >> FOUR_BITS) ;
    46c8:	fe 01       	movw	r30, r28
    46ca:	e9 5b       	subi	r30, 0xB9	; 185
    46cc:	ff 4f       	sbci	r31, 0xFF	; 255
    46ce:	80 81       	ld	r24, Z
    46d0:	98 2f       	mov	r25, r24
    46d2:	92 95       	swap	r25
    46d4:	9f 70       	andi	r25, 0x0F	; 15
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	69 2f       	mov	r22, r25
    46da:	0e 94 87 1b 	call	0x370e	; 0x370e <MDIO_voidWriteHighNibble>
	    
	    /**set register select to low */
	    MDIO_voidClrPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	61 e0       	ldi	r22, 0x01	; 1
    46e2:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
	    
	    /**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	62 e0       	ldi	r22, 0x02	; 2
    46ea:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    46ee:	fe 01       	movw	r30, r28
    46f0:	ed 5b       	subi	r30, 0xBD	; 189
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	a0 e0       	ldi	r26, 0x00	; 0
    46fa:	b0 e4       	ldi	r27, 0x40	; 64
    46fc:	80 83       	st	Z, r24
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	a2 83       	std	Z+2, r26	; 0x02
    4702:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4704:	8e 01       	movw	r16, r28
    4706:	01 5c       	subi	r16, 0xC1	; 193
    4708:	1f 4f       	sbci	r17, 0xFF	; 255
    470a:	fe 01       	movw	r30, r28
    470c:	ed 5b       	subi	r30, 0xBD	; 189
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	60 81       	ld	r22, Z
    4712:	71 81       	ldd	r23, Z+1	; 0x01
    4714:	82 81       	ldd	r24, Z+2	; 0x02
    4716:	93 81       	ldd	r25, Z+3	; 0x03
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	4a ef       	ldi	r20, 0xFA	; 250
    471e:	54 e4       	ldi	r21, 0x44	; 68
    4720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	f8 01       	movw	r30, r16
    472a:	80 83       	st	Z, r24
    472c:	91 83       	std	Z+1, r25	; 0x01
    472e:	a2 83       	std	Z+2, r26	; 0x02
    4730:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4732:	fe 01       	movw	r30, r28
    4734:	ff 96       	adiw	r30, 0x3f	; 63
    4736:	60 81       	ld	r22, Z
    4738:	71 81       	ldd	r23, Z+1	; 0x01
    473a:	82 81       	ldd	r24, Z+2	; 0x02
    473c:	93 81       	ldd	r25, Z+3	; 0x03
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	40 e8       	ldi	r20, 0x80	; 128
    4744:	5f e3       	ldi	r21, 0x3F	; 63
    4746:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    474a:	88 23       	and	r24, r24
    474c:	2c f4       	brge	.+10     	; 0x4758 <HLCD_voidSendCmd+0xba>
		__ticks = 1;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	9e af       	std	Y+62, r25	; 0x3e
    4754:	8d af       	std	Y+61, r24	; 0x3d
    4756:	46 c0       	rjmp	.+140    	; 0x47e4 <HLCD_voidSendCmd+0x146>
	else if (__tmp > 65535)
    4758:	fe 01       	movw	r30, r28
    475a:	ff 96       	adiw	r30, 0x3f	; 63
    475c:	60 81       	ld	r22, Z
    475e:	71 81       	ldd	r23, Z+1	; 0x01
    4760:	82 81       	ldd	r24, Z+2	; 0x02
    4762:	93 81       	ldd	r25, Z+3	; 0x03
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	3f ef       	ldi	r19, 0xFF	; 255
    4768:	4f e7       	ldi	r20, 0x7F	; 127
    476a:	57 e4       	ldi	r21, 0x47	; 71
    476c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4770:	18 16       	cp	r1, r24
    4772:	64 f5       	brge	.+88     	; 0x47cc <HLCD_voidSendCmd+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4774:	fe 01       	movw	r30, r28
    4776:	ed 5b       	subi	r30, 0xBD	; 189
    4778:	ff 4f       	sbci	r31, 0xFF	; 255
    477a:	60 81       	ld	r22, Z
    477c:	71 81       	ldd	r23, Z+1	; 0x01
    477e:	82 81       	ldd	r24, Z+2	; 0x02
    4780:	93 81       	ldd	r25, Z+3	; 0x03
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	40 e2       	ldi	r20, 0x20	; 32
    4788:	51 e4       	ldi	r21, 0x41	; 65
    478a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	bc 01       	movw	r22, r24
    4794:	cd 01       	movw	r24, r26
    4796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	9e af       	std	Y+62, r25	; 0x3e
    47a0:	8d af       	std	Y+61, r24	; 0x3d
    47a2:	0f c0       	rjmp	.+30     	; 0x47c2 <HLCD_voidSendCmd+0x124>
    47a4:	88 ec       	ldi	r24, 0xC8	; 200
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	9c af       	std	Y+60, r25	; 0x3c
    47aa:	8b af       	std	Y+59, r24	; 0x3b
    47ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    47ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    47b0:	01 97       	sbiw	r24, 0x01	; 1
    47b2:	f1 f7       	brne	.-4      	; 0x47b0 <HLCD_voidSendCmd+0x112>
    47b4:	9c af       	std	Y+60, r25	; 0x3c
    47b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    47ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    47bc:	01 97       	sbiw	r24, 0x01	; 1
    47be:	9e af       	std	Y+62, r25	; 0x3e
    47c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    47c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    47c6:	00 97       	sbiw	r24, 0x00	; 0
    47c8:	69 f7       	brne	.-38     	; 0x47a4 <HLCD_voidSendCmd+0x106>
    47ca:	16 c0       	rjmp	.+44     	; 0x47f8 <HLCD_voidSendCmd+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47cc:	fe 01       	movw	r30, r28
    47ce:	ff 96       	adiw	r30, 0x3f	; 63
    47d0:	60 81       	ld	r22, Z
    47d2:	71 81       	ldd	r23, Z+1	; 0x01
    47d4:	82 81       	ldd	r24, Z+2	; 0x02
    47d6:	93 81       	ldd	r25, Z+3	; 0x03
    47d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47dc:	dc 01       	movw	r26, r24
    47de:	cb 01       	movw	r24, r22
    47e0:	9e af       	std	Y+62, r25	; 0x3e
    47e2:	8d af       	std	Y+61, r24	; 0x3d
    47e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    47e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    47e8:	9a af       	std	Y+58, r25	; 0x3a
    47ea:	89 af       	std	Y+57, r24	; 0x39
    47ec:	89 ad       	ldd	r24, Y+57	; 0x39
    47ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    47f0:	01 97       	sbiw	r24, 0x01	; 1
    47f2:	f1 f7       	brne	.-4      	; 0x47f0 <HLCD_voidSendCmd+0x152>
    47f4:	9a af       	std	Y+58, r25	; 0x3a
    47f6:	89 af       	std	Y+57, r24	; 0x39
	    
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    /**set enable to low */
	    MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    47f8:	81 e0       	ldi	r24, 0x01	; 1
    47fa:	62 e0       	ldi	r22, 0x02	; 2
    47fc:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	a0 e0       	ldi	r26, 0x00	; 0
    4806:	b0 e4       	ldi	r27, 0x40	; 64
    4808:	8d ab       	std	Y+53, r24	; 0x35
    480a:	9e ab       	std	Y+54, r25	; 0x36
    480c:	af ab       	std	Y+55, r26	; 0x37
    480e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4810:	6d a9       	ldd	r22, Y+53	; 0x35
    4812:	7e a9       	ldd	r23, Y+54	; 0x36
    4814:	8f a9       	ldd	r24, Y+55	; 0x37
    4816:	98 ad       	ldd	r25, Y+56	; 0x38
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	4a ef       	ldi	r20, 0xFA	; 250
    481e:	54 e4       	ldi	r21, 0x44	; 68
    4820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4824:	dc 01       	movw	r26, r24
    4826:	cb 01       	movw	r24, r22
    4828:	89 ab       	std	Y+49, r24	; 0x31
    482a:	9a ab       	std	Y+50, r25	; 0x32
    482c:	ab ab       	std	Y+51, r26	; 0x33
    482e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4830:	69 a9       	ldd	r22, Y+49	; 0x31
    4832:	7a a9       	ldd	r23, Y+50	; 0x32
    4834:	8b a9       	ldd	r24, Y+51	; 0x33
    4836:	9c a9       	ldd	r25, Y+52	; 0x34
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	40 e8       	ldi	r20, 0x80	; 128
    483e:	5f e3       	ldi	r21, 0x3F	; 63
    4840:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4844:	88 23       	and	r24, r24
    4846:	2c f4       	brge	.+10     	; 0x4852 <HLCD_voidSendCmd+0x1b4>
		__ticks = 1;
    4848:	81 e0       	ldi	r24, 0x01	; 1
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	98 ab       	std	Y+48, r25	; 0x30
    484e:	8f a7       	std	Y+47, r24	; 0x2f
    4850:	3f c0       	rjmp	.+126    	; 0x48d0 <HLCD_voidSendCmd+0x232>
	else if (__tmp > 65535)
    4852:	69 a9       	ldd	r22, Y+49	; 0x31
    4854:	7a a9       	ldd	r23, Y+50	; 0x32
    4856:	8b a9       	ldd	r24, Y+51	; 0x33
    4858:	9c a9       	ldd	r25, Y+52	; 0x34
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	3f ef       	ldi	r19, 0xFF	; 255
    485e:	4f e7       	ldi	r20, 0x7F	; 127
    4860:	57 e4       	ldi	r21, 0x47	; 71
    4862:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4866:	18 16       	cp	r1, r24
    4868:	4c f5       	brge	.+82     	; 0x48bc <HLCD_voidSendCmd+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    486a:	6d a9       	ldd	r22, Y+53	; 0x35
    486c:	7e a9       	ldd	r23, Y+54	; 0x36
    486e:	8f a9       	ldd	r24, Y+55	; 0x37
    4870:	98 ad       	ldd	r25, Y+56	; 0x38
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	40 e2       	ldi	r20, 0x20	; 32
    4878:	51 e4       	ldi	r21, 0x41	; 65
    487a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487e:	dc 01       	movw	r26, r24
    4880:	cb 01       	movw	r24, r22
    4882:	bc 01       	movw	r22, r24
    4884:	cd 01       	movw	r24, r26
    4886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    488a:	dc 01       	movw	r26, r24
    488c:	cb 01       	movw	r24, r22
    488e:	98 ab       	std	Y+48, r25	; 0x30
    4890:	8f a7       	std	Y+47, r24	; 0x2f
    4892:	0f c0       	rjmp	.+30     	; 0x48b2 <HLCD_voidSendCmd+0x214>
    4894:	88 ec       	ldi	r24, 0xC8	; 200
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	9e a7       	std	Y+46, r25	; 0x2e
    489a:	8d a7       	std	Y+45, r24	; 0x2d
    489c:	8d a5       	ldd	r24, Y+45	; 0x2d
    489e:	9e a5       	ldd	r25, Y+46	; 0x2e
    48a0:	01 97       	sbiw	r24, 0x01	; 1
    48a2:	f1 f7       	brne	.-4      	; 0x48a0 <HLCD_voidSendCmd+0x202>
    48a4:	9e a7       	std	Y+46, r25	; 0x2e
    48a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    48aa:	98 a9       	ldd	r25, Y+48	; 0x30
    48ac:	01 97       	sbiw	r24, 0x01	; 1
    48ae:	98 ab       	std	Y+48, r25	; 0x30
    48b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    48b4:	98 a9       	ldd	r25, Y+48	; 0x30
    48b6:	00 97       	sbiw	r24, 0x00	; 0
    48b8:	69 f7       	brne	.-38     	; 0x4894 <HLCD_voidSendCmd+0x1f6>
    48ba:	14 c0       	rjmp	.+40     	; 0x48e4 <HLCD_voidSendCmd+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48bc:	69 a9       	ldd	r22, Y+49	; 0x31
    48be:	7a a9       	ldd	r23, Y+50	; 0x32
    48c0:	8b a9       	ldd	r24, Y+51	; 0x33
    48c2:	9c a9       	ldd	r25, Y+52	; 0x34
    48c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c8:	dc 01       	movw	r26, r24
    48ca:	cb 01       	movw	r24, r22
    48cc:	98 ab       	std	Y+48, r25	; 0x30
    48ce:	8f a7       	std	Y+47, r24	; 0x2f
    48d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    48d2:	98 a9       	ldd	r25, Y+48	; 0x30
    48d4:	9c a7       	std	Y+44, r25	; 0x2c
    48d6:	8b a7       	std	Y+43, r24	; 0x2b
    48d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    48da:	9c a5       	ldd	r25, Y+44	; 0x2c
    48dc:	01 97       	sbiw	r24, 0x01	; 1
    48de:	f1 f7       	brne	.-4      	; 0x48dc <HLCD_voidSendCmd+0x23e>
    48e0:	9c a7       	std	Y+44, r25	; 0x2c
    48e2:	8b a7       	std	Y+43, r24	; 0x2b
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	63 e0       	ldi	r22, 0x03	; 3
    48e8:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
	    
	    /**send last four bits of data to last four bit at control register */
	    MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8CmdID) ;
    48ec:	fe 01       	movw	r30, r28
    48ee:	e9 5b       	subi	r30, 0xB9	; 185
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	81 e0       	ldi	r24, 0x01	; 1
    48f4:	60 81       	ld	r22, Z
    48f6:	0e 94 87 1b 	call	0x370e	; 0x370e <MDIO_voidWriteHighNibble>
	    
	    /**set register select to low */
	    MDIO_voidClrPinVal (LCD_RS_PORT , LCD_RS_PIN ) ;
    48fa:	81 e0       	ldi	r24, 0x01	; 1
    48fc:	61 e0       	ldi	r22, 0x01	; 1
    48fe:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
	    
	    /**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	62 e0       	ldi	r22, 0x02	; 2
    4906:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	a0 e0       	ldi	r26, 0x00	; 0
    4910:	b0 e4       	ldi	r27, 0x40	; 64
    4912:	8f a3       	std	Y+39, r24	; 0x27
    4914:	98 a7       	std	Y+40, r25	; 0x28
    4916:	a9 a7       	std	Y+41, r26	; 0x29
    4918:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    491a:	6f a1       	ldd	r22, Y+39	; 0x27
    491c:	78 a5       	ldd	r23, Y+40	; 0x28
    491e:	89 a5       	ldd	r24, Y+41	; 0x29
    4920:	9a a5       	ldd	r25, Y+42	; 0x2a
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	4a ef       	ldi	r20, 0xFA	; 250
    4928:	54 e4       	ldi	r21, 0x44	; 68
    492a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492e:	dc 01       	movw	r26, r24
    4930:	cb 01       	movw	r24, r22
    4932:	8b a3       	std	Y+35, r24	; 0x23
    4934:	9c a3       	std	Y+36, r25	; 0x24
    4936:	ad a3       	std	Y+37, r26	; 0x25
    4938:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    493a:	6b a1       	ldd	r22, Y+35	; 0x23
    493c:	7c a1       	ldd	r23, Y+36	; 0x24
    493e:	8d a1       	ldd	r24, Y+37	; 0x25
    4940:	9e a1       	ldd	r25, Y+38	; 0x26
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	40 e8       	ldi	r20, 0x80	; 128
    4948:	5f e3       	ldi	r21, 0x3F	; 63
    494a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    494e:	88 23       	and	r24, r24
    4950:	2c f4       	brge	.+10     	; 0x495c <HLCD_voidSendCmd+0x2be>
		__ticks = 1;
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	9a a3       	std	Y+34, r25	; 0x22
    4958:	89 a3       	std	Y+33, r24	; 0x21
    495a:	3f c0       	rjmp	.+126    	; 0x49da <HLCD_voidSendCmd+0x33c>
	else if (__tmp > 65535)
    495c:	6b a1       	ldd	r22, Y+35	; 0x23
    495e:	7c a1       	ldd	r23, Y+36	; 0x24
    4960:	8d a1       	ldd	r24, Y+37	; 0x25
    4962:	9e a1       	ldd	r25, Y+38	; 0x26
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	3f ef       	ldi	r19, 0xFF	; 255
    4968:	4f e7       	ldi	r20, 0x7F	; 127
    496a:	57 e4       	ldi	r21, 0x47	; 71
    496c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4970:	18 16       	cp	r1, r24
    4972:	4c f5       	brge	.+82     	; 0x49c6 <HLCD_voidSendCmd+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4974:	6f a1       	ldd	r22, Y+39	; 0x27
    4976:	78 a5       	ldd	r23, Y+40	; 0x28
    4978:	89 a5       	ldd	r24, Y+41	; 0x29
    497a:	9a a5       	ldd	r25, Y+42	; 0x2a
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	40 e2       	ldi	r20, 0x20	; 32
    4982:	51 e4       	ldi	r21, 0x41	; 65
    4984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	bc 01       	movw	r22, r24
    498e:	cd 01       	movw	r24, r26
    4990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4994:	dc 01       	movw	r26, r24
    4996:	cb 01       	movw	r24, r22
    4998:	9a a3       	std	Y+34, r25	; 0x22
    499a:	89 a3       	std	Y+33, r24	; 0x21
    499c:	0f c0       	rjmp	.+30     	; 0x49bc <HLCD_voidSendCmd+0x31e>
    499e:	88 ec       	ldi	r24, 0xC8	; 200
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	98 a3       	std	Y+32, r25	; 0x20
    49a4:	8f 8f       	std	Y+31, r24	; 0x1f
    49a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49a8:	98 a1       	ldd	r25, Y+32	; 0x20
    49aa:	01 97       	sbiw	r24, 0x01	; 1
    49ac:	f1 f7       	brne	.-4      	; 0x49aa <HLCD_voidSendCmd+0x30c>
    49ae:	98 a3       	std	Y+32, r25	; 0x20
    49b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b2:	89 a1       	ldd	r24, Y+33	; 0x21
    49b4:	9a a1       	ldd	r25, Y+34	; 0x22
    49b6:	01 97       	sbiw	r24, 0x01	; 1
    49b8:	9a a3       	std	Y+34, r25	; 0x22
    49ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49bc:	89 a1       	ldd	r24, Y+33	; 0x21
    49be:	9a a1       	ldd	r25, Y+34	; 0x22
    49c0:	00 97       	sbiw	r24, 0x00	; 0
    49c2:	69 f7       	brne	.-38     	; 0x499e <HLCD_voidSendCmd+0x300>
    49c4:	14 c0       	rjmp	.+40     	; 0x49ee <HLCD_voidSendCmd+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c6:	6b a1       	ldd	r22, Y+35	; 0x23
    49c8:	7c a1       	ldd	r23, Y+36	; 0x24
    49ca:	8d a1       	ldd	r24, Y+37	; 0x25
    49cc:	9e a1       	ldd	r25, Y+38	; 0x26
    49ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	9a a3       	std	Y+34, r25	; 0x22
    49d8:	89 a3       	std	Y+33, r24	; 0x21
    49da:	89 a1       	ldd	r24, Y+33	; 0x21
    49dc:	9a a1       	ldd	r25, Y+34	; 0x22
    49de:	9e 8f       	std	Y+30, r25	; 0x1e
    49e0:	8d 8f       	std	Y+29, r24	; 0x1d
    49e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49e6:	01 97       	sbiw	r24, 0x01	; 1
    49e8:	f1 f7       	brne	.-4      	; 0x49e6 <HLCD_voidSendCmd+0x348>
    49ea:	9e 8f       	std	Y+30, r25	; 0x1e
    49ec:	8d 8f       	std	Y+29, r24	; 0x1d
	    
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    /**set enable to low */
	    MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    49ee:	81 e0       	ldi	r24, 0x01	; 1
    49f0:	62 e0       	ldi	r22, 0x02	; 2
    49f2:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    49f6:	80 e0       	ldi	r24, 0x00	; 0
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	a0 e0       	ldi	r26, 0x00	; 0
    49fc:	b0 e4       	ldi	r27, 0x40	; 64
    49fe:	89 8f       	std	Y+25, r24	; 0x19
    4a00:	9a 8f       	std	Y+26, r25	; 0x1a
    4a02:	ab 8f       	std	Y+27, r26	; 0x1b
    4a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a06:	69 8d       	ldd	r22, Y+25	; 0x19
    4a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	4a ef       	ldi	r20, 0xFA	; 250
    4a14:	54 e4       	ldi	r21, 0x44	; 68
    4a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a1a:	dc 01       	movw	r26, r24
    4a1c:	cb 01       	movw	r24, r22
    4a1e:	8d 8b       	std	Y+21, r24	; 0x15
    4a20:	9e 8b       	std	Y+22, r25	; 0x16
    4a22:	af 8b       	std	Y+23, r26	; 0x17
    4a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a26:	6d 89       	ldd	r22, Y+21	; 0x15
    4a28:	7e 89       	ldd	r23, Y+22	; 0x16
    4a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	40 e8       	ldi	r20, 0x80	; 128
    4a34:	5f e3       	ldi	r21, 0x3F	; 63
    4a36:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4a3a:	88 23       	and	r24, r24
    4a3c:	2c f4       	brge	.+10     	; 0x4a48 <HLCD_voidSendCmd+0x3aa>
		__ticks = 1;
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	9c 8b       	std	Y+20, r25	; 0x14
    4a44:	8b 8b       	std	Y+19, r24	; 0x13
    4a46:	3f c0       	rjmp	.+126    	; 0x4ac6 <HLCD_voidSendCmd+0x428>
	else if (__tmp > 65535)
    4a48:	6d 89       	ldd	r22, Y+21	; 0x15
    4a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	3f ef       	ldi	r19, 0xFF	; 255
    4a54:	4f e7       	ldi	r20, 0x7F	; 127
    4a56:	57 e4       	ldi	r21, 0x47	; 71
    4a58:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4a5c:	18 16       	cp	r1, r24
    4a5e:	4c f5       	brge	.+82     	; 0x4ab2 <HLCD_voidSendCmd+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a60:	69 8d       	ldd	r22, Y+25	; 0x19
    4a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	40 e2       	ldi	r20, 0x20	; 32
    4a6e:	51 e4       	ldi	r21, 0x41	; 65
    4a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a74:	dc 01       	movw	r26, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	bc 01       	movw	r22, r24
    4a7a:	cd 01       	movw	r24, r26
    4a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	9c 8b       	std	Y+20, r25	; 0x14
    4a86:	8b 8b       	std	Y+19, r24	; 0x13
    4a88:	0f c0       	rjmp	.+30     	; 0x4aa8 <HLCD_voidSendCmd+0x40a>
    4a8a:	88 ec       	ldi	r24, 0xC8	; 200
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	9a 8b       	std	Y+18, r25	; 0x12
    4a90:	89 8b       	std	Y+17, r24	; 0x11
    4a92:	89 89       	ldd	r24, Y+17	; 0x11
    4a94:	9a 89       	ldd	r25, Y+18	; 0x12
    4a96:	01 97       	sbiw	r24, 0x01	; 1
    4a98:	f1 f7       	brne	.-4      	; 0x4a96 <HLCD_voidSendCmd+0x3f8>
    4a9a:	9a 8b       	std	Y+18, r25	; 0x12
    4a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    4aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	9c 8b       	std	Y+20, r25	; 0x14
    4aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    4aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	69 f7       	brne	.-38     	; 0x4a8a <HLCD_voidSendCmd+0x3ec>
    4ab0:	14 c0       	rjmp	.+40     	; 0x4ada <HLCD_voidSendCmd+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	9c 8b       	std	Y+20, r25	; 0x14
    4ac4:	8b 8b       	std	Y+19, r24	; 0x13
    4ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    4aca:	98 8b       	std	Y+16, r25	; 0x10
    4acc:	8f 87       	std	Y+15, r24	; 0x0f
    4ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ad0:	98 89       	ldd	r25, Y+16	; 0x10
    4ad2:	01 97       	sbiw	r24, 0x01	; 1
    4ad4:	f1 f7       	brne	.-4      	; 0x4ad2 <HLCD_voidSendCmd+0x434>
    4ad6:	98 8b       	std	Y+16, r25	; 0x10
    4ad8:	8f 87       	std	Y+15, r24	; 0x0f
    4ada:	80 e0       	ldi	r24, 0x00	; 0
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	a0 e8       	ldi	r26, 0x80	; 128
    4ae0:	bf e3       	ldi	r27, 0x3F	; 63
    4ae2:	8b 87       	std	Y+11, r24	; 0x0b
    4ae4:	9c 87       	std	Y+12, r25	; 0x0c
    4ae6:	ad 87       	std	Y+13, r26	; 0x0d
    4ae8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    4af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	4a ef       	ldi	r20, 0xFA	; 250
    4af8:	54 e4       	ldi	r21, 0x44	; 68
    4afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4afe:	dc 01       	movw	r26, r24
    4b00:	cb 01       	movw	r24, r22
    4b02:	8f 83       	std	Y+7, r24	; 0x07
    4b04:	98 87       	std	Y+8, r25	; 0x08
    4b06:	a9 87       	std	Y+9, r26	; 0x09
    4b08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b0c:	78 85       	ldd	r23, Y+8	; 0x08
    4b0e:	89 85       	ldd	r24, Y+9	; 0x09
    4b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e8       	ldi	r20, 0x80	; 128
    4b18:	5f e3       	ldi	r21, 0x3F	; 63
    4b1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b1e:	88 23       	and	r24, r24
    4b20:	2c f4       	brge	.+10     	; 0x4b2c <HLCD_voidSendCmd+0x48e>
		__ticks = 1;
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	9e 83       	std	Y+6, r25	; 0x06
    4b28:	8d 83       	std	Y+5, r24	; 0x05
    4b2a:	3f c0       	rjmp	.+126    	; 0x4baa <HLCD_voidSendCmd+0x50c>
	else if (__tmp > 65535)
    4b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b2e:	78 85       	ldd	r23, Y+8	; 0x08
    4b30:	89 85       	ldd	r24, Y+9	; 0x09
    4b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b34:	20 e0       	ldi	r18, 0x00	; 0
    4b36:	3f ef       	ldi	r19, 0xFF	; 255
    4b38:	4f e7       	ldi	r20, 0x7F	; 127
    4b3a:	57 e4       	ldi	r21, 0x47	; 71
    4b3c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4b40:	18 16       	cp	r1, r24
    4b42:	4c f5       	brge	.+82     	; 0x4b96 <HLCD_voidSendCmd+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e2       	ldi	r20, 0x20	; 32
    4b52:	51 e4       	ldi	r21, 0x41	; 65
    4b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	bc 01       	movw	r22, r24
    4b5e:	cd 01       	movw	r24, r26
    4b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b64:	dc 01       	movw	r26, r24
    4b66:	cb 01       	movw	r24, r22
    4b68:	9e 83       	std	Y+6, r25	; 0x06
    4b6a:	8d 83       	std	Y+5, r24	; 0x05
    4b6c:	0f c0       	rjmp	.+30     	; 0x4b8c <HLCD_voidSendCmd+0x4ee>
    4b6e:	88 ec       	ldi	r24, 0xC8	; 200
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	9c 83       	std	Y+4, r25	; 0x04
    4b74:	8b 83       	std	Y+3, r24	; 0x03
    4b76:	8b 81       	ldd	r24, Y+3	; 0x03
    4b78:	9c 81       	ldd	r25, Y+4	; 0x04
    4b7a:	01 97       	sbiw	r24, 0x01	; 1
    4b7c:	f1 f7       	brne	.-4      	; 0x4b7a <HLCD_voidSendCmd+0x4dc>
    4b7e:	9c 83       	std	Y+4, r25	; 0x04
    4b80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b82:	8d 81       	ldd	r24, Y+5	; 0x05
    4b84:	9e 81       	ldd	r25, Y+6	; 0x06
    4b86:	01 97       	sbiw	r24, 0x01	; 1
    4b88:	9e 83       	std	Y+6, r25	; 0x06
    4b8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b90:	00 97       	sbiw	r24, 0x00	; 0
    4b92:	69 f7       	brne	.-38     	; 0x4b6e <HLCD_voidSendCmd+0x4d0>
    4b94:	14 c0       	rjmp	.+40     	; 0x4bbe <HLCD_voidSendCmd+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b96:	6f 81       	ldd	r22, Y+7	; 0x07
    4b98:	78 85       	ldd	r23, Y+8	; 0x08
    4b9a:	89 85       	ldd	r24, Y+9	; 0x09
    4b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	9e 83       	std	Y+6, r25	; 0x06
    4ba8:	8d 83       	std	Y+5, r24	; 0x05
    4baa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bac:	9e 81       	ldd	r25, Y+6	; 0x06
    4bae:	9a 83       	std	Y+2, r25	; 0x02
    4bb0:	89 83       	std	Y+1, r24	; 0x01
    4bb2:	89 81       	ldd	r24, Y+1	; 0x01
    4bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb6:	01 97       	sbiw	r24, 0x01	; 1
    4bb8:	f1 f7       	brne	.-4      	; 0x4bb6 <HLCD_voidSendCmd+0x518>
    4bba:	9a 83       	std	Y+2, r25	; 0x02
    4bbc:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms (2) ;
	    #else
	    #error "select write mode"
	    #endif
	    _delay_ms(1) ;
    4bbe:	c9 5b       	subi	r28, 0xB9	; 185
    4bc0:	df 4f       	sbci	r29, 0xFF	; 255
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	cf 91       	pop	r28
    4bce:	df 91       	pop	r29
    4bd0:	1f 91       	pop	r17
    4bd2:	0f 91       	pop	r16
    4bd4:	08 95       	ret

00004bd6 <HLCD_voidInit>:
#include "LCD_private.h"
#include "LCD_conf.h"
#include "LCD_int.h"

void HLCD_voidInit(void)
{
    4bd6:	0f 93       	push	r16
    4bd8:	1f 93       	push	r17
    4bda:	df 93       	push	r29
    4bdc:	cf 93       	push	r28
    4bde:	cd b7       	in	r28, 0x3d	; 61
    4be0:	de b7       	in	r29, 0x3e	; 62
    4be2:	c4 55       	subi	r28, 0x54	; 84
    4be4:	d0 40       	sbci	r29, 0x00	; 0
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	f8 94       	cli
    4bea:	de bf       	out	0x3e, r29	; 62
    4bec:	0f be       	out	0x3f, r0	; 63
    4bee:	cd bf       	out	0x3d, r28	; 61
    4bf0:	fe 01       	movw	r30, r28
    4bf2:	ef 5a       	subi	r30, 0xAF	; 175
    4bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf6:	80 e0       	ldi	r24, 0x00	; 0
    4bf8:	90 e0       	ldi	r25, 0x00	; 0
    4bfa:	a8 e4       	ldi	r26, 0x48	; 72
    4bfc:	b3 e4       	ldi	r27, 0x43	; 67
    4bfe:	80 83       	st	Z, r24
    4c00:	91 83       	std	Z+1, r25	; 0x01
    4c02:	a2 83       	std	Z+2, r26	; 0x02
    4c04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c06:	8e 01       	movw	r16, r28
    4c08:	03 5b       	subi	r16, 0xB3	; 179
    4c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	ef 5a       	subi	r30, 0xAF	; 175
    4c10:	ff 4f       	sbci	r31, 0xFF	; 255
    4c12:	60 81       	ld	r22, Z
    4c14:	71 81       	ldd	r23, Z+1	; 0x01
    4c16:	82 81       	ldd	r24, Z+2	; 0x02
    4c18:	93 81       	ldd	r25, Z+3	; 0x03
    4c1a:	20 e0       	ldi	r18, 0x00	; 0
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	4a ef       	ldi	r20, 0xFA	; 250
    4c20:	54 e4       	ldi	r21, 0x44	; 68
    4c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c26:	dc 01       	movw	r26, r24
    4c28:	cb 01       	movw	r24, r22
    4c2a:	f8 01       	movw	r30, r16
    4c2c:	80 83       	st	Z, r24
    4c2e:	91 83       	std	Z+1, r25	; 0x01
    4c30:	a2 83       	std	Z+2, r26	; 0x02
    4c32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c34:	fe 01       	movw	r30, r28
    4c36:	e3 5b       	subi	r30, 0xB3	; 179
    4c38:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3a:	60 81       	ld	r22, Z
    4c3c:	71 81       	ldd	r23, Z+1	; 0x01
    4c3e:	82 81       	ldd	r24, Z+2	; 0x02
    4c40:	93 81       	ldd	r25, Z+3	; 0x03
    4c42:	20 e0       	ldi	r18, 0x00	; 0
    4c44:	30 e0       	ldi	r19, 0x00	; 0
    4c46:	40 e8       	ldi	r20, 0x80	; 128
    4c48:	5f e3       	ldi	r21, 0x3F	; 63
    4c4a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c4e:	88 23       	and	r24, r24
    4c50:	44 f4       	brge	.+16     	; 0x4c62 <HLCD_voidInit+0x8c>
		__ticks = 1;
    4c52:	fe 01       	movw	r30, r28
    4c54:	e5 5b       	subi	r30, 0xB5	; 181
    4c56:	ff 4f       	sbci	r31, 0xFF	; 255
    4c58:	81 e0       	ldi	r24, 0x01	; 1
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	91 83       	std	Z+1, r25	; 0x01
    4c5e:	80 83       	st	Z, r24
    4c60:	64 c0       	rjmp	.+200    	; 0x4d2a <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    4c62:	fe 01       	movw	r30, r28
    4c64:	e3 5b       	subi	r30, 0xB3	; 179
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	60 81       	ld	r22, Z
    4c6a:	71 81       	ldd	r23, Z+1	; 0x01
    4c6c:	82 81       	ldd	r24, Z+2	; 0x02
    4c6e:	93 81       	ldd	r25, Z+3	; 0x03
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	3f ef       	ldi	r19, 0xFF	; 255
    4c74:	4f e7       	ldi	r20, 0x7F	; 127
    4c76:	57 e4       	ldi	r21, 0x47	; 71
    4c78:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c7c:	18 16       	cp	r1, r24
    4c7e:	0c f0       	brlt	.+2      	; 0x4c82 <HLCD_voidInit+0xac>
    4c80:	43 c0       	rjmp	.+134    	; 0x4d08 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c82:	fe 01       	movw	r30, r28
    4c84:	ef 5a       	subi	r30, 0xAF	; 175
    4c86:	ff 4f       	sbci	r31, 0xFF	; 255
    4c88:	60 81       	ld	r22, Z
    4c8a:	71 81       	ldd	r23, Z+1	; 0x01
    4c8c:	82 81       	ldd	r24, Z+2	; 0x02
    4c8e:	93 81       	ldd	r25, Z+3	; 0x03
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	40 e2       	ldi	r20, 0x20	; 32
    4c96:	51 e4       	ldi	r21, 0x41	; 65
    4c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c9c:	dc 01       	movw	r26, r24
    4c9e:	cb 01       	movw	r24, r22
    4ca0:	8e 01       	movw	r16, r28
    4ca2:	05 5b       	subi	r16, 0xB5	; 181
    4ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca6:	bc 01       	movw	r22, r24
    4ca8:	cd 01       	movw	r24, r26
    4caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cae:	dc 01       	movw	r26, r24
    4cb0:	cb 01       	movw	r24, r22
    4cb2:	f8 01       	movw	r30, r16
    4cb4:	91 83       	std	Z+1, r25	; 0x01
    4cb6:	80 83       	st	Z, r24
    4cb8:	1f c0       	rjmp	.+62     	; 0x4cf8 <HLCD_voidInit+0x122>
    4cba:	fe 01       	movw	r30, r28
    4cbc:	e7 5b       	subi	r30, 0xB7	; 183
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	88 ec       	ldi	r24, 0xC8	; 200
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	80 83       	st	Z, r24
    4cc8:	fe 01       	movw	r30, r28
    4cca:	e7 5b       	subi	r30, 0xB7	; 183
    4ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cce:	80 81       	ld	r24, Z
    4cd0:	91 81       	ldd	r25, Z+1	; 0x01
    4cd2:	01 97       	sbiw	r24, 0x01	; 1
    4cd4:	f1 f7       	brne	.-4      	; 0x4cd2 <HLCD_voidInit+0xfc>
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	e7 5b       	subi	r30, 0xB7	; 183
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	91 83       	std	Z+1, r25	; 0x01
    4cde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ce0:	de 01       	movw	r26, r28
    4ce2:	a5 5b       	subi	r26, 0xB5	; 181
    4ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	e5 5b       	subi	r30, 0xB5	; 181
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	80 81       	ld	r24, Z
    4cee:	91 81       	ldd	r25, Z+1	; 0x01
    4cf0:	01 97       	sbiw	r24, 0x01	; 1
    4cf2:	11 96       	adiw	r26, 0x01	; 1
    4cf4:	9c 93       	st	X, r25
    4cf6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	e5 5b       	subi	r30, 0xB5	; 181
    4cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfe:	80 81       	ld	r24, Z
    4d00:	91 81       	ldd	r25, Z+1	; 0x01
    4d02:	00 97       	sbiw	r24, 0x00	; 0
    4d04:	d1 f6       	brne	.-76     	; 0x4cba <HLCD_voidInit+0xe4>
    4d06:	27 c0       	rjmp	.+78     	; 0x4d56 <HLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d08:	8e 01       	movw	r16, r28
    4d0a:	05 5b       	subi	r16, 0xB5	; 181
    4d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0e:	fe 01       	movw	r30, r28
    4d10:	e3 5b       	subi	r30, 0xB3	; 179
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	60 81       	ld	r22, Z
    4d16:	71 81       	ldd	r23, Z+1	; 0x01
    4d18:	82 81       	ldd	r24, Z+2	; 0x02
    4d1a:	93 81       	ldd	r25, Z+3	; 0x03
    4d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	f8 01       	movw	r30, r16
    4d26:	91 83       	std	Z+1, r25	; 0x01
    4d28:	80 83       	st	Z, r24
    4d2a:	de 01       	movw	r26, r28
    4d2c:	a9 5b       	subi	r26, 0xB9	; 185
    4d2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4d30:	fe 01       	movw	r30, r28
    4d32:	e5 5b       	subi	r30, 0xB5	; 181
    4d34:	ff 4f       	sbci	r31, 0xFF	; 255
    4d36:	80 81       	ld	r24, Z
    4d38:	91 81       	ldd	r25, Z+1	; 0x01
    4d3a:	8d 93       	st	X+, r24
    4d3c:	9c 93       	st	X, r25
    4d3e:	fe 01       	movw	r30, r28
    4d40:	e9 5b       	subi	r30, 0xB9	; 185
    4d42:	ff 4f       	sbci	r31, 0xFF	; 255
    4d44:	80 81       	ld	r24, Z
    4d46:	91 81       	ldd	r25, Z+1	; 0x01
    4d48:	01 97       	sbiw	r24, 0x01	; 1
    4d4a:	f1 f7       	brne	.-4      	; 0x4d48 <HLCD_voidInit+0x172>
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	e9 5b       	subi	r30, 0xB9	; 185
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	91 83       	std	Z+1, r25	; 0x01
    4d54:	80 83       	st	Z, r24
	    _delay_ms (1) ;
		
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /** set direction of DIO_PIN4 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN4 , DIO_HIGH) ;
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	64 e0       	ldi	r22, 0x04	; 4
    4d5a:	41 e0       	ldi	r20, 0x01	; 1
    4d5c:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN5 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN5 , DIO_HIGH) ;
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	65 e0       	ldi	r22, 0x05	; 5
    4d64:	41 e0       	ldi	r20, 0x01	; 1
    4d66:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN6 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN6 , DIO_HIGH) ;
    4d6a:	81 e0       	ldi	r24, 0x01	; 1
    4d6c:	66 e0       	ldi	r22, 0x06	; 6
    4d6e:	41 e0       	ldi	r20, 0x01	; 1
    4d70:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN7 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN7 , DIO_HIGH) ;
    4d74:	81 e0       	ldi	r24, 0x01	; 1
    4d76:	67 e0       	ldi	r22, 0x07	; 7
    4d78:	41 e0       	ldi	r20, 0x01	; 1
    4d7a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		
	    /** set direction of register select to be output */
	    MDIO_voidSetPinDir  (LCD_RS_PORT   , LCD_RS_PIN  , DIO_HIGH) ;
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	61 e0       	ldi	r22, 0x01	; 1
    4d82:	41 e0       	ldi	r20, 0x01	; 1
    4d84:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
		
		/** set direction of Enable pin to be output */
	    MDIO_voidSetPinDir  (LCD_EN_PORT   , LCD_EN_PIN  , DIO_HIGH) ;
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	62 e0       	ldi	r22, 0x02	; 2
    4d8c:	41 e0       	ldi	r20, 0x01	; 1
    4d8e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>

		/** set direction of read/write pin to be output */
	    MDIO_voidSetPinDir  (LCD_RW_PORT   , LCD_RW_PIN  , DIO_HIGH) ;
    4d92:	81 e0       	ldi	r24, 0x01	; 1
    4d94:	63 e0       	ldi	r22, 0x03	; 3
    4d96:	41 e0       	ldi	r20, 0x01	; 1
    4d98:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
	    
	    /** Return home*/
	    HLCD_voidSendCmd (CMD_RETURN_HOME) ;
    4d9c:	82 e0       	ldi	r24, 0x02	; 2
    4d9e:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
    4da2:	fe 01       	movw	r30, r28
    4da4:	ed 5b       	subi	r30, 0xBD	; 189
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	80 e0       	ldi	r24, 0x00	; 0
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	a0 e2       	ldi	r26, 0x20	; 32
    4dae:	b1 e4       	ldi	r27, 0x41	; 65
    4db0:	80 83       	st	Z, r24
    4db2:	91 83       	std	Z+1, r25	; 0x01
    4db4:	a2 83       	std	Z+2, r26	; 0x02
    4db6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4db8:	8e 01       	movw	r16, r28
    4dba:	01 5c       	subi	r16, 0xC1	; 193
    4dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4dbe:	fe 01       	movw	r30, r28
    4dc0:	ed 5b       	subi	r30, 0xBD	; 189
    4dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc4:	60 81       	ld	r22, Z
    4dc6:	71 81       	ldd	r23, Z+1	; 0x01
    4dc8:	82 81       	ldd	r24, Z+2	; 0x02
    4dca:	93 81       	ldd	r25, Z+3	; 0x03
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	4a ef       	ldi	r20, 0xFA	; 250
    4dd2:	54 e4       	ldi	r21, 0x44	; 68
    4dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	f8 01       	movw	r30, r16
    4dde:	80 83       	st	Z, r24
    4de0:	91 83       	std	Z+1, r25	; 0x01
    4de2:	a2 83       	std	Z+2, r26	; 0x02
    4de4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4de6:	fe 01       	movw	r30, r28
    4de8:	ff 96       	adiw	r30, 0x3f	; 63
    4dea:	60 81       	ld	r22, Z
    4dec:	71 81       	ldd	r23, Z+1	; 0x01
    4dee:	82 81       	ldd	r24, Z+2	; 0x02
    4df0:	93 81       	ldd	r25, Z+3	; 0x03
    4df2:	20 e0       	ldi	r18, 0x00	; 0
    4df4:	30 e0       	ldi	r19, 0x00	; 0
    4df6:	40 e8       	ldi	r20, 0x80	; 128
    4df8:	5f e3       	ldi	r21, 0x3F	; 63
    4dfa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4dfe:	88 23       	and	r24, r24
    4e00:	2c f4       	brge	.+10     	; 0x4e0c <HLCD_voidInit+0x236>
		__ticks = 1;
    4e02:	81 e0       	ldi	r24, 0x01	; 1
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	9e af       	std	Y+62, r25	; 0x3e
    4e08:	8d af       	std	Y+61, r24	; 0x3d
    4e0a:	46 c0       	rjmp	.+140    	; 0x4e98 <HLCD_voidInit+0x2c2>
	else if (__tmp > 65535)
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	ff 96       	adiw	r30, 0x3f	; 63
    4e10:	60 81       	ld	r22, Z
    4e12:	71 81       	ldd	r23, Z+1	; 0x01
    4e14:	82 81       	ldd	r24, Z+2	; 0x02
    4e16:	93 81       	ldd	r25, Z+3	; 0x03
    4e18:	20 e0       	ldi	r18, 0x00	; 0
    4e1a:	3f ef       	ldi	r19, 0xFF	; 255
    4e1c:	4f e7       	ldi	r20, 0x7F	; 127
    4e1e:	57 e4       	ldi	r21, 0x47	; 71
    4e20:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4e24:	18 16       	cp	r1, r24
    4e26:	64 f5       	brge	.+88     	; 0x4e80 <HLCD_voidInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e28:	fe 01       	movw	r30, r28
    4e2a:	ed 5b       	subi	r30, 0xBD	; 189
    4e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2e:	60 81       	ld	r22, Z
    4e30:	71 81       	ldd	r23, Z+1	; 0x01
    4e32:	82 81       	ldd	r24, Z+2	; 0x02
    4e34:	93 81       	ldd	r25, Z+3	; 0x03
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	40 e2       	ldi	r20, 0x20	; 32
    4e3c:	51 e4       	ldi	r21, 0x41	; 65
    4e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	bc 01       	movw	r22, r24
    4e48:	cd 01       	movw	r24, r26
    4e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e4e:	dc 01       	movw	r26, r24
    4e50:	cb 01       	movw	r24, r22
    4e52:	9e af       	std	Y+62, r25	; 0x3e
    4e54:	8d af       	std	Y+61, r24	; 0x3d
    4e56:	0f c0       	rjmp	.+30     	; 0x4e76 <HLCD_voidInit+0x2a0>
    4e58:	88 ec       	ldi	r24, 0xC8	; 200
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	9c af       	std	Y+60, r25	; 0x3c
    4e5e:	8b af       	std	Y+59, r24	; 0x3b
    4e60:	8b ad       	ldd	r24, Y+59	; 0x3b
    4e62:	9c ad       	ldd	r25, Y+60	; 0x3c
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	f1 f7       	brne	.-4      	; 0x4e64 <HLCD_voidInit+0x28e>
    4e68:	9c af       	std	Y+60, r25	; 0x3c
    4e6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    4e6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4e70:	01 97       	sbiw	r24, 0x01	; 1
    4e72:	9e af       	std	Y+62, r25	; 0x3e
    4e74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e76:	8d ad       	ldd	r24, Y+61	; 0x3d
    4e78:	9e ad       	ldd	r25, Y+62	; 0x3e
    4e7a:	00 97       	sbiw	r24, 0x00	; 0
    4e7c:	69 f7       	brne	.-38     	; 0x4e58 <HLCD_voidInit+0x282>
    4e7e:	16 c0       	rjmp	.+44     	; 0x4eac <HLCD_voidInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e80:	fe 01       	movw	r30, r28
    4e82:	ff 96       	adiw	r30, 0x3f	; 63
    4e84:	60 81       	ld	r22, Z
    4e86:	71 81       	ldd	r23, Z+1	; 0x01
    4e88:	82 81       	ldd	r24, Z+2	; 0x02
    4e8a:	93 81       	ldd	r25, Z+3	; 0x03
    4e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e90:	dc 01       	movw	r26, r24
    4e92:	cb 01       	movw	r24, r22
    4e94:	9e af       	std	Y+62, r25	; 0x3e
    4e96:	8d af       	std	Y+61, r24	; 0x3d
    4e98:	8d ad       	ldd	r24, Y+61	; 0x3d
    4e9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4e9c:	9a af       	std	Y+58, r25	; 0x3a
    4e9e:	89 af       	std	Y+57, r24	; 0x39
    4ea0:	89 ad       	ldd	r24, Y+57	; 0x39
    4ea2:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	f1 f7       	brne	.-4      	; 0x4ea4 <HLCD_voidInit+0x2ce>
    4ea8:	9a af       	std	Y+58, r25	; 0x3a
    4eaa:	89 af       	std	Y+57, r24	; 0x39
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** function set */
	    HLCD_voidSendCmd (FOUR_BIT_CONNECTION) ;
    4eac:	88 e2       	ldi	r24, 0x28	; 40
    4eae:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	a0 e8       	ldi	r26, 0x80	; 128
    4eb8:	bf e3       	ldi	r27, 0x3F	; 63
    4eba:	8d ab       	std	Y+53, r24	; 0x35
    4ebc:	9e ab       	std	Y+54, r25	; 0x36
    4ebe:	af ab       	std	Y+55, r26	; 0x37
    4ec0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ec2:	6d a9       	ldd	r22, Y+53	; 0x35
    4ec4:	7e a9       	ldd	r23, Y+54	; 0x36
    4ec6:	8f a9       	ldd	r24, Y+55	; 0x37
    4ec8:	98 ad       	ldd	r25, Y+56	; 0x38
    4eca:	20 e0       	ldi	r18, 0x00	; 0
    4ecc:	30 e0       	ldi	r19, 0x00	; 0
    4ece:	4a ef       	ldi	r20, 0xFA	; 250
    4ed0:	54 e4       	ldi	r21, 0x44	; 68
    4ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	cb 01       	movw	r24, r22
    4eda:	89 ab       	std	Y+49, r24	; 0x31
    4edc:	9a ab       	std	Y+50, r25	; 0x32
    4ede:	ab ab       	std	Y+51, r26	; 0x33
    4ee0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4ee2:	69 a9       	ldd	r22, Y+49	; 0x31
    4ee4:	7a a9       	ldd	r23, Y+50	; 0x32
    4ee6:	8b a9       	ldd	r24, Y+51	; 0x33
    4ee8:	9c a9       	ldd	r25, Y+52	; 0x34
    4eea:	20 e0       	ldi	r18, 0x00	; 0
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	40 e8       	ldi	r20, 0x80	; 128
    4ef0:	5f e3       	ldi	r21, 0x3F	; 63
    4ef2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4ef6:	88 23       	and	r24, r24
    4ef8:	2c f4       	brge	.+10     	; 0x4f04 <HLCD_voidInit+0x32e>
		__ticks = 1;
    4efa:	81 e0       	ldi	r24, 0x01	; 1
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	98 ab       	std	Y+48, r25	; 0x30
    4f00:	8f a7       	std	Y+47, r24	; 0x2f
    4f02:	3f c0       	rjmp	.+126    	; 0x4f82 <HLCD_voidInit+0x3ac>
	else if (__tmp > 65535)
    4f04:	69 a9       	ldd	r22, Y+49	; 0x31
    4f06:	7a a9       	ldd	r23, Y+50	; 0x32
    4f08:	8b a9       	ldd	r24, Y+51	; 0x33
    4f0a:	9c a9       	ldd	r25, Y+52	; 0x34
    4f0c:	20 e0       	ldi	r18, 0x00	; 0
    4f0e:	3f ef       	ldi	r19, 0xFF	; 255
    4f10:	4f e7       	ldi	r20, 0x7F	; 127
    4f12:	57 e4       	ldi	r21, 0x47	; 71
    4f14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4f18:	18 16       	cp	r1, r24
    4f1a:	4c f5       	brge	.+82     	; 0x4f6e <HLCD_voidInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f1c:	6d a9       	ldd	r22, Y+53	; 0x35
    4f1e:	7e a9       	ldd	r23, Y+54	; 0x36
    4f20:	8f a9       	ldd	r24, Y+55	; 0x37
    4f22:	98 ad       	ldd	r25, Y+56	; 0x38
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	40 e2       	ldi	r20, 0x20	; 32
    4f2a:	51 e4       	ldi	r21, 0x41	; 65
    4f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	bc 01       	movw	r22, r24
    4f36:	cd 01       	movw	r24, r26
    4f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f3c:	dc 01       	movw	r26, r24
    4f3e:	cb 01       	movw	r24, r22
    4f40:	98 ab       	std	Y+48, r25	; 0x30
    4f42:	8f a7       	std	Y+47, r24	; 0x2f
    4f44:	0f c0       	rjmp	.+30     	; 0x4f64 <HLCD_voidInit+0x38e>
    4f46:	88 ec       	ldi	r24, 0xC8	; 200
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	9e a7       	std	Y+46, r25	; 0x2e
    4f4c:	8d a7       	std	Y+45, r24	; 0x2d
    4f4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4f50:	9e a5       	ldd	r25, Y+46	; 0x2e
    4f52:	01 97       	sbiw	r24, 0x01	; 1
    4f54:	f1 f7       	brne	.-4      	; 0x4f52 <HLCD_voidInit+0x37c>
    4f56:	9e a7       	std	Y+46, r25	; 0x2e
    4f58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f5c:	98 a9       	ldd	r25, Y+48	; 0x30
    4f5e:	01 97       	sbiw	r24, 0x01	; 1
    4f60:	98 ab       	std	Y+48, r25	; 0x30
    4f62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f64:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f66:	98 a9       	ldd	r25, Y+48	; 0x30
    4f68:	00 97       	sbiw	r24, 0x00	; 0
    4f6a:	69 f7       	brne	.-38     	; 0x4f46 <HLCD_voidInit+0x370>
    4f6c:	14 c0       	rjmp	.+40     	; 0x4f96 <HLCD_voidInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f6e:	69 a9       	ldd	r22, Y+49	; 0x31
    4f70:	7a a9       	ldd	r23, Y+50	; 0x32
    4f72:	8b a9       	ldd	r24, Y+51	; 0x33
    4f74:	9c a9       	ldd	r25, Y+52	; 0x34
    4f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	cb 01       	movw	r24, r22
    4f7e:	98 ab       	std	Y+48, r25	; 0x30
    4f80:	8f a7       	std	Y+47, r24	; 0x2f
    4f82:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f84:	98 a9       	ldd	r25, Y+48	; 0x30
    4f86:	9c a7       	std	Y+44, r25	; 0x2c
    4f88:	8b a7       	std	Y+43, r24	; 0x2b
    4f8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4f8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4f8e:	01 97       	sbiw	r24, 0x01	; 1
    4f90:	f1 f7       	brne	.-4      	; 0x4f8e <HLCD_voidInit+0x3b8>
    4f92:	9c a7       	std	Y+44, r25	; 0x2c
    4f94:	8b a7       	std	Y+43, r24	; 0x2b
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display ON/OFF Control */
	    HLCD_voidSendCmd (CMD_CURSOR_OFF_DISPLAY_ON) ;
    4f96:	8c e0       	ldi	r24, 0x0C	; 12
    4f98:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	a0 e8       	ldi	r26, 0x80	; 128
    4fa2:	bf e3       	ldi	r27, 0x3F	; 63
    4fa4:	8f a3       	std	Y+39, r24	; 0x27
    4fa6:	98 a7       	std	Y+40, r25	; 0x28
    4fa8:	a9 a7       	std	Y+41, r26	; 0x29
    4faa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fac:	6f a1       	ldd	r22, Y+39	; 0x27
    4fae:	78 a5       	ldd	r23, Y+40	; 0x28
    4fb0:	89 a5       	ldd	r24, Y+41	; 0x29
    4fb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	4a ef       	ldi	r20, 0xFA	; 250
    4fba:	54 e4       	ldi	r21, 0x44	; 68
    4fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	8b a3       	std	Y+35, r24	; 0x23
    4fc6:	9c a3       	std	Y+36, r25	; 0x24
    4fc8:	ad a3       	std	Y+37, r26	; 0x25
    4fca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    4fce:	7c a1       	ldd	r23, Y+36	; 0x24
    4fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    4fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	40 e8       	ldi	r20, 0x80	; 128
    4fda:	5f e3       	ldi	r21, 0x3F	; 63
    4fdc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4fe0:	88 23       	and	r24, r24
    4fe2:	2c f4       	brge	.+10     	; 0x4fee <HLCD_voidInit+0x418>
		__ticks = 1;
    4fe4:	81 e0       	ldi	r24, 0x01	; 1
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	9a a3       	std	Y+34, r25	; 0x22
    4fea:	89 a3       	std	Y+33, r24	; 0x21
    4fec:	3f c0       	rjmp	.+126    	; 0x506c <HLCD_voidInit+0x496>
	else if (__tmp > 65535)
    4fee:	6b a1       	ldd	r22, Y+35	; 0x23
    4ff0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ff2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ff4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ff6:	20 e0       	ldi	r18, 0x00	; 0
    4ff8:	3f ef       	ldi	r19, 0xFF	; 255
    4ffa:	4f e7       	ldi	r20, 0x7F	; 127
    4ffc:	57 e4       	ldi	r21, 0x47	; 71
    4ffe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5002:	18 16       	cp	r1, r24
    5004:	4c f5       	brge	.+82     	; 0x5058 <HLCD_voidInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5006:	6f a1       	ldd	r22, Y+39	; 0x27
    5008:	78 a5       	ldd	r23, Y+40	; 0x28
    500a:	89 a5       	ldd	r24, Y+41	; 0x29
    500c:	9a a5       	ldd	r25, Y+42	; 0x2a
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	40 e2       	ldi	r20, 0x20	; 32
    5014:	51 e4       	ldi	r21, 0x41	; 65
    5016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	bc 01       	movw	r22, r24
    5020:	cd 01       	movw	r24, r26
    5022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5026:	dc 01       	movw	r26, r24
    5028:	cb 01       	movw	r24, r22
    502a:	9a a3       	std	Y+34, r25	; 0x22
    502c:	89 a3       	std	Y+33, r24	; 0x21
    502e:	0f c0       	rjmp	.+30     	; 0x504e <HLCD_voidInit+0x478>
    5030:	88 ec       	ldi	r24, 0xC8	; 200
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	98 a3       	std	Y+32, r25	; 0x20
    5036:	8f 8f       	std	Y+31, r24	; 0x1f
    5038:	8f 8d       	ldd	r24, Y+31	; 0x1f
    503a:	98 a1       	ldd	r25, Y+32	; 0x20
    503c:	01 97       	sbiw	r24, 0x01	; 1
    503e:	f1 f7       	brne	.-4      	; 0x503c <HLCD_voidInit+0x466>
    5040:	98 a3       	std	Y+32, r25	; 0x20
    5042:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5044:	89 a1       	ldd	r24, Y+33	; 0x21
    5046:	9a a1       	ldd	r25, Y+34	; 0x22
    5048:	01 97       	sbiw	r24, 0x01	; 1
    504a:	9a a3       	std	Y+34, r25	; 0x22
    504c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    504e:	89 a1       	ldd	r24, Y+33	; 0x21
    5050:	9a a1       	ldd	r25, Y+34	; 0x22
    5052:	00 97       	sbiw	r24, 0x00	; 0
    5054:	69 f7       	brne	.-38     	; 0x5030 <HLCD_voidInit+0x45a>
    5056:	14 c0       	rjmp	.+40     	; 0x5080 <HLCD_voidInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5058:	6b a1       	ldd	r22, Y+35	; 0x23
    505a:	7c a1       	ldd	r23, Y+36	; 0x24
    505c:	8d a1       	ldd	r24, Y+37	; 0x25
    505e:	9e a1       	ldd	r25, Y+38	; 0x26
    5060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5064:	dc 01       	movw	r26, r24
    5066:	cb 01       	movw	r24, r22
    5068:	9a a3       	std	Y+34, r25	; 0x22
    506a:	89 a3       	std	Y+33, r24	; 0x21
    506c:	89 a1       	ldd	r24, Y+33	; 0x21
    506e:	9a a1       	ldd	r25, Y+34	; 0x22
    5070:	9e 8f       	std	Y+30, r25	; 0x1e
    5072:	8d 8f       	std	Y+29, r24	; 0x1d
    5074:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5076:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5078:	01 97       	sbiw	r24, 0x01	; 1
    507a:	f1 f7       	brne	.-4      	; 0x5078 <HLCD_voidInit+0x4a2>
    507c:	9e 8f       	std	Y+30, r25	; 0x1e
    507e:	8d 8f       	std	Y+29, r24	; 0x1d
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display Clear */
	    HLCD_voidSendCmd (CMD_CLEAR) ;
    5080:	81 e0       	ldi	r24, 0x01	; 1
    5082:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	a0 e2       	ldi	r26, 0x20	; 32
    508c:	b1 e4       	ldi	r27, 0x41	; 65
    508e:	89 8f       	std	Y+25, r24	; 0x19
    5090:	9a 8f       	std	Y+26, r25	; 0x1a
    5092:	ab 8f       	std	Y+27, r26	; 0x1b
    5094:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5096:	69 8d       	ldd	r22, Y+25	; 0x19
    5098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    509a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    509c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	4a ef       	ldi	r20, 0xFA	; 250
    50a4:	54 e4       	ldi	r21, 0x44	; 68
    50a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	8d 8b       	std	Y+21, r24	; 0x15
    50b0:	9e 8b       	std	Y+22, r25	; 0x16
    50b2:	af 8b       	std	Y+23, r26	; 0x17
    50b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    50b6:	6d 89       	ldd	r22, Y+21	; 0x15
    50b8:	7e 89       	ldd	r23, Y+22	; 0x16
    50ba:	8f 89       	ldd	r24, Y+23	; 0x17
    50bc:	98 8d       	ldd	r25, Y+24	; 0x18
    50be:	20 e0       	ldi	r18, 0x00	; 0
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	40 e8       	ldi	r20, 0x80	; 128
    50c4:	5f e3       	ldi	r21, 0x3F	; 63
    50c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    50ca:	88 23       	and	r24, r24
    50cc:	2c f4       	brge	.+10     	; 0x50d8 <HLCD_voidInit+0x502>
		__ticks = 1;
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	9c 8b       	std	Y+20, r25	; 0x14
    50d4:	8b 8b       	std	Y+19, r24	; 0x13
    50d6:	3f c0       	rjmp	.+126    	; 0x5156 <HLCD_voidInit+0x580>
	else if (__tmp > 65535)
    50d8:	6d 89       	ldd	r22, Y+21	; 0x15
    50da:	7e 89       	ldd	r23, Y+22	; 0x16
    50dc:	8f 89       	ldd	r24, Y+23	; 0x17
    50de:	98 8d       	ldd	r25, Y+24	; 0x18
    50e0:	20 e0       	ldi	r18, 0x00	; 0
    50e2:	3f ef       	ldi	r19, 0xFF	; 255
    50e4:	4f e7       	ldi	r20, 0x7F	; 127
    50e6:	57 e4       	ldi	r21, 0x47	; 71
    50e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    50ec:	18 16       	cp	r1, r24
    50ee:	4c f5       	brge	.+82     	; 0x5142 <HLCD_voidInit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50f0:	69 8d       	ldd	r22, Y+25	; 0x19
    50f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	40 e2       	ldi	r20, 0x20	; 32
    50fe:	51 e4       	ldi	r21, 0x41	; 65
    5100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5104:	dc 01       	movw	r26, r24
    5106:	cb 01       	movw	r24, r22
    5108:	bc 01       	movw	r22, r24
    510a:	cd 01       	movw	r24, r26
    510c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5110:	dc 01       	movw	r26, r24
    5112:	cb 01       	movw	r24, r22
    5114:	9c 8b       	std	Y+20, r25	; 0x14
    5116:	8b 8b       	std	Y+19, r24	; 0x13
    5118:	0f c0       	rjmp	.+30     	; 0x5138 <HLCD_voidInit+0x562>
    511a:	88 ec       	ldi	r24, 0xC8	; 200
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	9a 8b       	std	Y+18, r25	; 0x12
    5120:	89 8b       	std	Y+17, r24	; 0x11
    5122:	89 89       	ldd	r24, Y+17	; 0x11
    5124:	9a 89       	ldd	r25, Y+18	; 0x12
    5126:	01 97       	sbiw	r24, 0x01	; 1
    5128:	f1 f7       	brne	.-4      	; 0x5126 <HLCD_voidInit+0x550>
    512a:	9a 8b       	std	Y+18, r25	; 0x12
    512c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    512e:	8b 89       	ldd	r24, Y+19	; 0x13
    5130:	9c 89       	ldd	r25, Y+20	; 0x14
    5132:	01 97       	sbiw	r24, 0x01	; 1
    5134:	9c 8b       	std	Y+20, r25	; 0x14
    5136:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5138:	8b 89       	ldd	r24, Y+19	; 0x13
    513a:	9c 89       	ldd	r25, Y+20	; 0x14
    513c:	00 97       	sbiw	r24, 0x00	; 0
    513e:	69 f7       	brne	.-38     	; 0x511a <HLCD_voidInit+0x544>
    5140:	14 c0       	rjmp	.+40     	; 0x516a <HLCD_voidInit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5142:	6d 89       	ldd	r22, Y+21	; 0x15
    5144:	7e 89       	ldd	r23, Y+22	; 0x16
    5146:	8f 89       	ldd	r24, Y+23	; 0x17
    5148:	98 8d       	ldd	r25, Y+24	; 0x18
    514a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	9c 8b       	std	Y+20, r25	; 0x14
    5154:	8b 8b       	std	Y+19, r24	; 0x13
    5156:	8b 89       	ldd	r24, Y+19	; 0x13
    5158:	9c 89       	ldd	r25, Y+20	; 0x14
    515a:	98 8b       	std	Y+16, r25	; 0x10
    515c:	8f 87       	std	Y+15, r24	; 0x0f
    515e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5160:	98 89       	ldd	r25, Y+16	; 0x10
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	f1 f7       	brne	.-4      	; 0x5162 <HLCD_voidInit+0x58c>
    5166:	98 8b       	std	Y+16, r25	; 0x10
    5168:	8f 87       	std	Y+15, r24	; 0x0f
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** Entry mode set */
	    HLCD_voidSendCmd (CMD_ENTRY_MODE) ;
    516a:	86 e0       	ldi	r24, 0x06	; 6
    516c:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
    5170:	80 e0       	ldi	r24, 0x00	; 0
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	a0 e8       	ldi	r26, 0x80	; 128
    5176:	bf e3       	ldi	r27, 0x3F	; 63
    5178:	8b 87       	std	Y+11, r24	; 0x0b
    517a:	9c 87       	std	Y+12, r25	; 0x0c
    517c:	ad 87       	std	Y+13, r26	; 0x0d
    517e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5180:	6b 85       	ldd	r22, Y+11	; 0x0b
    5182:	7c 85       	ldd	r23, Y+12	; 0x0c
    5184:	8d 85       	ldd	r24, Y+13	; 0x0d
    5186:	9e 85       	ldd	r25, Y+14	; 0x0e
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	4a ef       	ldi	r20, 0xFA	; 250
    518e:	54 e4       	ldi	r21, 0x44	; 68
    5190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5194:	dc 01       	movw	r26, r24
    5196:	cb 01       	movw	r24, r22
    5198:	8f 83       	std	Y+7, r24	; 0x07
    519a:	98 87       	std	Y+8, r25	; 0x08
    519c:	a9 87       	std	Y+9, r26	; 0x09
    519e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51a0:	6f 81       	ldd	r22, Y+7	; 0x07
    51a2:	78 85       	ldd	r23, Y+8	; 0x08
    51a4:	89 85       	ldd	r24, Y+9	; 0x09
    51a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a8:	20 e0       	ldi	r18, 0x00	; 0
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	40 e8       	ldi	r20, 0x80	; 128
    51ae:	5f e3       	ldi	r21, 0x3F	; 63
    51b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    51b4:	88 23       	and	r24, r24
    51b6:	2c f4       	brge	.+10     	; 0x51c2 <HLCD_voidInit+0x5ec>
		__ticks = 1;
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	9e 83       	std	Y+6, r25	; 0x06
    51be:	8d 83       	std	Y+5, r24	; 0x05
    51c0:	3f c0       	rjmp	.+126    	; 0x5240 <HLCD_voidInit+0x66a>
	else if (__tmp > 65535)
    51c2:	6f 81       	ldd	r22, Y+7	; 0x07
    51c4:	78 85       	ldd	r23, Y+8	; 0x08
    51c6:	89 85       	ldd	r24, Y+9	; 0x09
    51c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	3f ef       	ldi	r19, 0xFF	; 255
    51ce:	4f e7       	ldi	r20, 0x7F	; 127
    51d0:	57 e4       	ldi	r21, 0x47	; 71
    51d2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    51d6:	18 16       	cp	r1, r24
    51d8:	4c f5       	brge	.+82     	; 0x522c <HLCD_voidInit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51da:	6b 85       	ldd	r22, Y+11	; 0x0b
    51dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    51de:	8d 85       	ldd	r24, Y+13	; 0x0d
    51e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    51e2:	20 e0       	ldi	r18, 0x00	; 0
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	40 e2       	ldi	r20, 0x20	; 32
    51e8:	51 e4       	ldi	r21, 0x41	; 65
    51ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	bc 01       	movw	r22, r24
    51f4:	cd 01       	movw	r24, r26
    51f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51fa:	dc 01       	movw	r26, r24
    51fc:	cb 01       	movw	r24, r22
    51fe:	9e 83       	std	Y+6, r25	; 0x06
    5200:	8d 83       	std	Y+5, r24	; 0x05
    5202:	0f c0       	rjmp	.+30     	; 0x5222 <HLCD_voidInit+0x64c>
    5204:	88 ec       	ldi	r24, 0xC8	; 200
    5206:	90 e0       	ldi	r25, 0x00	; 0
    5208:	9c 83       	std	Y+4, r25	; 0x04
    520a:	8b 83       	std	Y+3, r24	; 0x03
    520c:	8b 81       	ldd	r24, Y+3	; 0x03
    520e:	9c 81       	ldd	r25, Y+4	; 0x04
    5210:	01 97       	sbiw	r24, 0x01	; 1
    5212:	f1 f7       	brne	.-4      	; 0x5210 <HLCD_voidInit+0x63a>
    5214:	9c 83       	std	Y+4, r25	; 0x04
    5216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5218:	8d 81       	ldd	r24, Y+5	; 0x05
    521a:	9e 81       	ldd	r25, Y+6	; 0x06
    521c:	01 97       	sbiw	r24, 0x01	; 1
    521e:	9e 83       	std	Y+6, r25	; 0x06
    5220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5222:	8d 81       	ldd	r24, Y+5	; 0x05
    5224:	9e 81       	ldd	r25, Y+6	; 0x06
    5226:	00 97       	sbiw	r24, 0x00	; 0
    5228:	69 f7       	brne	.-38     	; 0x5204 <HLCD_voidInit+0x62e>
    522a:	14 c0       	rjmp	.+40     	; 0x5254 <HLCD_voidInit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    522c:	6f 81       	ldd	r22, Y+7	; 0x07
    522e:	78 85       	ldd	r23, Y+8	; 0x08
    5230:	89 85       	ldd	r24, Y+9	; 0x09
    5232:	9a 85       	ldd	r25, Y+10	; 0x0a
    5234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	9e 83       	std	Y+6, r25	; 0x06
    523e:	8d 83       	std	Y+5, r24	; 0x05
    5240:	8d 81       	ldd	r24, Y+5	; 0x05
    5242:	9e 81       	ldd	r25, Y+6	; 0x06
    5244:	9a 83       	std	Y+2, r25	; 0x02
    5246:	89 83       	std	Y+1, r24	; 0x01
    5248:	89 81       	ldd	r24, Y+1	; 0x01
    524a:	9a 81       	ldd	r25, Y+2	; 0x02
    524c:	01 97       	sbiw	r24, 0x01	; 1
    524e:	f1 f7       	brne	.-4      	; 0x524c <HLCD_voidInit+0x676>
    5250:	9a 83       	std	Y+2, r25	; 0x02
    5252:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for command to settle */
	    _delay_ms (1) ;
	#else 
		#error "selecct right mode"
	#endif
}
    5254:	cc 5a       	subi	r28, 0xAC	; 172
    5256:	df 4f       	sbci	r29, 0xFF	; 255
    5258:	0f b6       	in	r0, 0x3f	; 63
    525a:	f8 94       	cli
    525c:	de bf       	out	0x3e, r29	; 62
    525e:	0f be       	out	0x3f, r0	; 63
    5260:	cd bf       	out	0x3d, r28	; 61
    5262:	cf 91       	pop	r28
    5264:	df 91       	pop	r29
    5266:	1f 91       	pop	r17
    5268:	0f 91       	pop	r16
    526a:	08 95       	ret

0000526c <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Char)
{
    526c:	0f 93       	push	r16
    526e:	1f 93       	push	r17
    5270:	df 93       	push	r29
    5272:	cf 93       	push	r28
    5274:	cd b7       	in	r28, 0x3d	; 61
    5276:	de b7       	in	r29, 0x3e	; 62
    5278:	c7 54       	subi	r28, 0x47	; 71
    527a:	d0 40       	sbci	r29, 0x00	; 0
    527c:	0f b6       	in	r0, 0x3f	; 63
    527e:	f8 94       	cli
    5280:	de bf       	out	0x3e, r29	; 62
    5282:	0f be       	out	0x3f, r0	; 63
    5284:	cd bf       	out	0x3d, r28	; 61
    5286:	fe 01       	movw	r30, r28
    5288:	e9 5b       	subi	r30, 0xB9	; 185
    528a:	ff 4f       	sbci	r31, 0xFF	; 255
    528c:	80 83       	st	Z, r24
		/* Wait for E to settle */
		_delay_ms (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	63 e0       	ldi	r22, 0x03	; 3
    5292:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8Char >> FOUR_BITS) ;
    5296:	fe 01       	movw	r30, r28
    5298:	e9 5b       	subi	r30, 0xB9	; 185
    529a:	ff 4f       	sbci	r31, 0xFF	; 255
    529c:	80 81       	ld	r24, Z
    529e:	98 2f       	mov	r25, r24
    52a0:	92 95       	swap	r25
    52a2:	9f 70       	andi	r25, 0x0F	; 15
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	69 2f       	mov	r22, r25
    52a8:	0e 94 87 1b 	call	0x370e	; 0x370e <MDIO_voidWriteHighNibble>
		
		/**set register select to low */
		MDIO_voidSetPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    52ac:	81 e0       	ldi	r24, 0x01	; 1
    52ae:	61 e0       	ldi	r22, 0x01	; 1
    52b0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    52b4:	81 e0       	ldi	r24, 0x01	; 1
    52b6:	62 e0       	ldi	r22, 0x02	; 2
    52b8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    52bc:	fe 01       	movw	r30, r28
    52be:	ed 5b       	subi	r30, 0xBD	; 189
    52c0:	ff 4f       	sbci	r31, 0xFF	; 255
    52c2:	80 e0       	ldi	r24, 0x00	; 0
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	a0 e0       	ldi	r26, 0x00	; 0
    52c8:	b0 e4       	ldi	r27, 0x40	; 64
    52ca:	80 83       	st	Z, r24
    52cc:	91 83       	std	Z+1, r25	; 0x01
    52ce:	a2 83       	std	Z+2, r26	; 0x02
    52d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52d2:	8e 01       	movw	r16, r28
    52d4:	01 5c       	subi	r16, 0xC1	; 193
    52d6:	1f 4f       	sbci	r17, 0xFF	; 255
    52d8:	fe 01       	movw	r30, r28
    52da:	ed 5b       	subi	r30, 0xBD	; 189
    52dc:	ff 4f       	sbci	r31, 0xFF	; 255
    52de:	60 81       	ld	r22, Z
    52e0:	71 81       	ldd	r23, Z+1	; 0x01
    52e2:	82 81       	ldd	r24, Z+2	; 0x02
    52e4:	93 81       	ldd	r25, Z+3	; 0x03
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	4a ef       	ldi	r20, 0xFA	; 250
    52ec:	54 e4       	ldi	r21, 0x44	; 68
    52ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f2:	dc 01       	movw	r26, r24
    52f4:	cb 01       	movw	r24, r22
    52f6:	f8 01       	movw	r30, r16
    52f8:	80 83       	st	Z, r24
    52fa:	91 83       	std	Z+1, r25	; 0x01
    52fc:	a2 83       	std	Z+2, r26	; 0x02
    52fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5300:	fe 01       	movw	r30, r28
    5302:	ff 96       	adiw	r30, 0x3f	; 63
    5304:	60 81       	ld	r22, Z
    5306:	71 81       	ldd	r23, Z+1	; 0x01
    5308:	82 81       	ldd	r24, Z+2	; 0x02
    530a:	93 81       	ldd	r25, Z+3	; 0x03
    530c:	20 e0       	ldi	r18, 0x00	; 0
    530e:	30 e0       	ldi	r19, 0x00	; 0
    5310:	40 e8       	ldi	r20, 0x80	; 128
    5312:	5f e3       	ldi	r21, 0x3F	; 63
    5314:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5318:	88 23       	and	r24, r24
    531a:	2c f4       	brge	.+10     	; 0x5326 <HLCD_voidSendData+0xba>
		__ticks = 1;
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	9e af       	std	Y+62, r25	; 0x3e
    5322:	8d af       	std	Y+61, r24	; 0x3d
    5324:	46 c0       	rjmp	.+140    	; 0x53b2 <HLCD_voidSendData+0x146>
	else if (__tmp > 65535)
    5326:	fe 01       	movw	r30, r28
    5328:	ff 96       	adiw	r30, 0x3f	; 63
    532a:	60 81       	ld	r22, Z
    532c:	71 81       	ldd	r23, Z+1	; 0x01
    532e:	82 81       	ldd	r24, Z+2	; 0x02
    5330:	93 81       	ldd	r25, Z+3	; 0x03
    5332:	20 e0       	ldi	r18, 0x00	; 0
    5334:	3f ef       	ldi	r19, 0xFF	; 255
    5336:	4f e7       	ldi	r20, 0x7F	; 127
    5338:	57 e4       	ldi	r21, 0x47	; 71
    533a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    533e:	18 16       	cp	r1, r24
    5340:	64 f5       	brge	.+88     	; 0x539a <HLCD_voidSendData+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5342:	fe 01       	movw	r30, r28
    5344:	ed 5b       	subi	r30, 0xBD	; 189
    5346:	ff 4f       	sbci	r31, 0xFF	; 255
    5348:	60 81       	ld	r22, Z
    534a:	71 81       	ldd	r23, Z+1	; 0x01
    534c:	82 81       	ldd	r24, Z+2	; 0x02
    534e:	93 81       	ldd	r25, Z+3	; 0x03
    5350:	20 e0       	ldi	r18, 0x00	; 0
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	40 e2       	ldi	r20, 0x20	; 32
    5356:	51 e4       	ldi	r21, 0x41	; 65
    5358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    535c:	dc 01       	movw	r26, r24
    535e:	cb 01       	movw	r24, r22
    5360:	bc 01       	movw	r22, r24
    5362:	cd 01       	movw	r24, r26
    5364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5368:	dc 01       	movw	r26, r24
    536a:	cb 01       	movw	r24, r22
    536c:	9e af       	std	Y+62, r25	; 0x3e
    536e:	8d af       	std	Y+61, r24	; 0x3d
    5370:	0f c0       	rjmp	.+30     	; 0x5390 <HLCD_voidSendData+0x124>
    5372:	88 ec       	ldi	r24, 0xC8	; 200
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	9c af       	std	Y+60, r25	; 0x3c
    5378:	8b af       	std	Y+59, r24	; 0x3b
    537a:	8b ad       	ldd	r24, Y+59	; 0x3b
    537c:	9c ad       	ldd	r25, Y+60	; 0x3c
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	f1 f7       	brne	.-4      	; 0x537e <HLCD_voidSendData+0x112>
    5382:	9c af       	std	Y+60, r25	; 0x3c
    5384:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5386:	8d ad       	ldd	r24, Y+61	; 0x3d
    5388:	9e ad       	ldd	r25, Y+62	; 0x3e
    538a:	01 97       	sbiw	r24, 0x01	; 1
    538c:	9e af       	std	Y+62, r25	; 0x3e
    538e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5390:	8d ad       	ldd	r24, Y+61	; 0x3d
    5392:	9e ad       	ldd	r25, Y+62	; 0x3e
    5394:	00 97       	sbiw	r24, 0x00	; 0
    5396:	69 f7       	brne	.-38     	; 0x5372 <HLCD_voidSendData+0x106>
    5398:	16 c0       	rjmp	.+44     	; 0x53c6 <HLCD_voidSendData+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    539a:	fe 01       	movw	r30, r28
    539c:	ff 96       	adiw	r30, 0x3f	; 63
    539e:	60 81       	ld	r22, Z
    53a0:	71 81       	ldd	r23, Z+1	; 0x01
    53a2:	82 81       	ldd	r24, Z+2	; 0x02
    53a4:	93 81       	ldd	r25, Z+3	; 0x03
    53a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53aa:	dc 01       	movw	r26, r24
    53ac:	cb 01       	movw	r24, r22
    53ae:	9e af       	std	Y+62, r25	; 0x3e
    53b0:	8d af       	std	Y+61, r24	; 0x3d
    53b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    53b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    53b6:	9a af       	std	Y+58, r25	; 0x3a
    53b8:	89 af       	std	Y+57, r24	; 0x39
    53ba:	89 ad       	ldd	r24, Y+57	; 0x39
    53bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    53be:	01 97       	sbiw	r24, 0x01	; 1
    53c0:	f1 f7       	brne	.-4      	; 0x53be <HLCD_voidSendData+0x152>
    53c2:	9a af       	std	Y+58, r25	; 0x3a
    53c4:	89 af       	std	Y+57, r24	; 0x39
		
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	62 e0       	ldi	r22, 0x02	; 2
    53ca:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	a0 e0       	ldi	r26, 0x00	; 0
    53d4:	b0 e4       	ldi	r27, 0x40	; 64
    53d6:	8d ab       	std	Y+53, r24	; 0x35
    53d8:	9e ab       	std	Y+54, r25	; 0x36
    53da:	af ab       	std	Y+55, r26	; 0x37
    53dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53de:	6d a9       	ldd	r22, Y+53	; 0x35
    53e0:	7e a9       	ldd	r23, Y+54	; 0x36
    53e2:	8f a9       	ldd	r24, Y+55	; 0x37
    53e4:	98 ad       	ldd	r25, Y+56	; 0x38
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	4a ef       	ldi	r20, 0xFA	; 250
    53ec:	54 e4       	ldi	r21, 0x44	; 68
    53ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f2:	dc 01       	movw	r26, r24
    53f4:	cb 01       	movw	r24, r22
    53f6:	89 ab       	std	Y+49, r24	; 0x31
    53f8:	9a ab       	std	Y+50, r25	; 0x32
    53fa:	ab ab       	std	Y+51, r26	; 0x33
    53fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    53fe:	69 a9       	ldd	r22, Y+49	; 0x31
    5400:	7a a9       	ldd	r23, Y+50	; 0x32
    5402:	8b a9       	ldd	r24, Y+51	; 0x33
    5404:	9c a9       	ldd	r25, Y+52	; 0x34
    5406:	20 e0       	ldi	r18, 0x00	; 0
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	40 e8       	ldi	r20, 0x80	; 128
    540c:	5f e3       	ldi	r21, 0x3F	; 63
    540e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5412:	88 23       	and	r24, r24
    5414:	2c f4       	brge	.+10     	; 0x5420 <HLCD_voidSendData+0x1b4>
		__ticks = 1;
    5416:	81 e0       	ldi	r24, 0x01	; 1
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	98 ab       	std	Y+48, r25	; 0x30
    541c:	8f a7       	std	Y+47, r24	; 0x2f
    541e:	3f c0       	rjmp	.+126    	; 0x549e <HLCD_voidSendData+0x232>
	else if (__tmp > 65535)
    5420:	69 a9       	ldd	r22, Y+49	; 0x31
    5422:	7a a9       	ldd	r23, Y+50	; 0x32
    5424:	8b a9       	ldd	r24, Y+51	; 0x33
    5426:	9c a9       	ldd	r25, Y+52	; 0x34
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	3f ef       	ldi	r19, 0xFF	; 255
    542c:	4f e7       	ldi	r20, 0x7F	; 127
    542e:	57 e4       	ldi	r21, 0x47	; 71
    5430:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5434:	18 16       	cp	r1, r24
    5436:	4c f5       	brge	.+82     	; 0x548a <HLCD_voidSendData+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5438:	6d a9       	ldd	r22, Y+53	; 0x35
    543a:	7e a9       	ldd	r23, Y+54	; 0x36
    543c:	8f a9       	ldd	r24, Y+55	; 0x37
    543e:	98 ad       	ldd	r25, Y+56	; 0x38
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	40 e2       	ldi	r20, 0x20	; 32
    5446:	51 e4       	ldi	r21, 0x41	; 65
    5448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    544c:	dc 01       	movw	r26, r24
    544e:	cb 01       	movw	r24, r22
    5450:	bc 01       	movw	r22, r24
    5452:	cd 01       	movw	r24, r26
    5454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5458:	dc 01       	movw	r26, r24
    545a:	cb 01       	movw	r24, r22
    545c:	98 ab       	std	Y+48, r25	; 0x30
    545e:	8f a7       	std	Y+47, r24	; 0x2f
    5460:	0f c0       	rjmp	.+30     	; 0x5480 <HLCD_voidSendData+0x214>
    5462:	88 ec       	ldi	r24, 0xC8	; 200
    5464:	90 e0       	ldi	r25, 0x00	; 0
    5466:	9e a7       	std	Y+46, r25	; 0x2e
    5468:	8d a7       	std	Y+45, r24	; 0x2d
    546a:	8d a5       	ldd	r24, Y+45	; 0x2d
    546c:	9e a5       	ldd	r25, Y+46	; 0x2e
    546e:	01 97       	sbiw	r24, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <HLCD_voidSendData+0x202>
    5472:	9e a7       	std	Y+46, r25	; 0x2e
    5474:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5476:	8f a5       	ldd	r24, Y+47	; 0x2f
    5478:	98 a9       	ldd	r25, Y+48	; 0x30
    547a:	01 97       	sbiw	r24, 0x01	; 1
    547c:	98 ab       	std	Y+48, r25	; 0x30
    547e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5480:	8f a5       	ldd	r24, Y+47	; 0x2f
    5482:	98 a9       	ldd	r25, Y+48	; 0x30
    5484:	00 97       	sbiw	r24, 0x00	; 0
    5486:	69 f7       	brne	.-38     	; 0x5462 <HLCD_voidSendData+0x1f6>
    5488:	14 c0       	rjmp	.+40     	; 0x54b2 <HLCD_voidSendData+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    548a:	69 a9       	ldd	r22, Y+49	; 0x31
    548c:	7a a9       	ldd	r23, Y+50	; 0x32
    548e:	8b a9       	ldd	r24, Y+51	; 0x33
    5490:	9c a9       	ldd	r25, Y+52	; 0x34
    5492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5496:	dc 01       	movw	r26, r24
    5498:	cb 01       	movw	r24, r22
    549a:	98 ab       	std	Y+48, r25	; 0x30
    549c:	8f a7       	std	Y+47, r24	; 0x2f
    549e:	8f a5       	ldd	r24, Y+47	; 0x2f
    54a0:	98 a9       	ldd	r25, Y+48	; 0x30
    54a2:	9c a7       	std	Y+44, r25	; 0x2c
    54a4:	8b a7       	std	Y+43, r24	; 0x2b
    54a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    54a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    54aa:	01 97       	sbiw	r24, 0x01	; 1
    54ac:	f1 f7       	brne	.-4      	; 0x54aa <HLCD_voidSendData+0x23e>
    54ae:	9c a7       	std	Y+44, r25	; 0x2c
    54b0:	8b a7       	std	Y+43, r24	; 0x2b
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		
		/**set read/write to low */
		MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    54b2:	81 e0       	ldi	r24, 0x01	; 1
    54b4:	63 e0       	ldi	r22, 0x03	; 3
    54b6:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8Char) ;
    54ba:	fe 01       	movw	r30, r28
    54bc:	e9 5b       	subi	r30, 0xB9	; 185
    54be:	ff 4f       	sbci	r31, 0xFF	; 255
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	60 81       	ld	r22, Z
    54c4:	0e 94 87 1b 	call	0x370e	; 0x370e <MDIO_voidWriteHighNibble>
		
		/**set register select to low */
		MDIO_voidSetPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    54c8:	81 e0       	ldi	r24, 0x01	; 1
    54ca:	61 e0       	ldi	r22, 0x01	; 1
    54cc:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    54d0:	81 e0       	ldi	r24, 0x01	; 1
    54d2:	62 e0       	ldi	r22, 0x02	; 2
    54d4:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    54d8:	80 e0       	ldi	r24, 0x00	; 0
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	a0 e0       	ldi	r26, 0x00	; 0
    54de:	b0 e4       	ldi	r27, 0x40	; 64
    54e0:	8f a3       	std	Y+39, r24	; 0x27
    54e2:	98 a7       	std	Y+40, r25	; 0x28
    54e4:	a9 a7       	std	Y+41, r26	; 0x29
    54e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54e8:	6f a1       	ldd	r22, Y+39	; 0x27
    54ea:	78 a5       	ldd	r23, Y+40	; 0x28
    54ec:	89 a5       	ldd	r24, Y+41	; 0x29
    54ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    54f0:	20 e0       	ldi	r18, 0x00	; 0
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	4a ef       	ldi	r20, 0xFA	; 250
    54f6:	54 e4       	ldi	r21, 0x44	; 68
    54f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54fc:	dc 01       	movw	r26, r24
    54fe:	cb 01       	movw	r24, r22
    5500:	8b a3       	std	Y+35, r24	; 0x23
    5502:	9c a3       	std	Y+36, r25	; 0x24
    5504:	ad a3       	std	Y+37, r26	; 0x25
    5506:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5508:	6b a1       	ldd	r22, Y+35	; 0x23
    550a:	7c a1       	ldd	r23, Y+36	; 0x24
    550c:	8d a1       	ldd	r24, Y+37	; 0x25
    550e:	9e a1       	ldd	r25, Y+38	; 0x26
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	40 e8       	ldi	r20, 0x80	; 128
    5516:	5f e3       	ldi	r21, 0x3F	; 63
    5518:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    551c:	88 23       	and	r24, r24
    551e:	2c f4       	brge	.+10     	; 0x552a <HLCD_voidSendData+0x2be>
		__ticks = 1;
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	9a a3       	std	Y+34, r25	; 0x22
    5526:	89 a3       	std	Y+33, r24	; 0x21
    5528:	3f c0       	rjmp	.+126    	; 0x55a8 <HLCD_voidSendData+0x33c>
	else if (__tmp > 65535)
    552a:	6b a1       	ldd	r22, Y+35	; 0x23
    552c:	7c a1       	ldd	r23, Y+36	; 0x24
    552e:	8d a1       	ldd	r24, Y+37	; 0x25
    5530:	9e a1       	ldd	r25, Y+38	; 0x26
    5532:	20 e0       	ldi	r18, 0x00	; 0
    5534:	3f ef       	ldi	r19, 0xFF	; 255
    5536:	4f e7       	ldi	r20, 0x7F	; 127
    5538:	57 e4       	ldi	r21, 0x47	; 71
    553a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    553e:	18 16       	cp	r1, r24
    5540:	4c f5       	brge	.+82     	; 0x5594 <HLCD_voidSendData+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5542:	6f a1       	ldd	r22, Y+39	; 0x27
    5544:	78 a5       	ldd	r23, Y+40	; 0x28
    5546:	89 a5       	ldd	r24, Y+41	; 0x29
    5548:	9a a5       	ldd	r25, Y+42	; 0x2a
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	40 e2       	ldi	r20, 0x20	; 32
    5550:	51 e4       	ldi	r21, 0x41	; 65
    5552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5556:	dc 01       	movw	r26, r24
    5558:	cb 01       	movw	r24, r22
    555a:	bc 01       	movw	r22, r24
    555c:	cd 01       	movw	r24, r26
    555e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5562:	dc 01       	movw	r26, r24
    5564:	cb 01       	movw	r24, r22
    5566:	9a a3       	std	Y+34, r25	; 0x22
    5568:	89 a3       	std	Y+33, r24	; 0x21
    556a:	0f c0       	rjmp	.+30     	; 0x558a <HLCD_voidSendData+0x31e>
    556c:	88 ec       	ldi	r24, 0xC8	; 200
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	98 a3       	std	Y+32, r25	; 0x20
    5572:	8f 8f       	std	Y+31, r24	; 0x1f
    5574:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5576:	98 a1       	ldd	r25, Y+32	; 0x20
    5578:	01 97       	sbiw	r24, 0x01	; 1
    557a:	f1 f7       	brne	.-4      	; 0x5578 <HLCD_voidSendData+0x30c>
    557c:	98 a3       	std	Y+32, r25	; 0x20
    557e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5580:	89 a1       	ldd	r24, Y+33	; 0x21
    5582:	9a a1       	ldd	r25, Y+34	; 0x22
    5584:	01 97       	sbiw	r24, 0x01	; 1
    5586:	9a a3       	std	Y+34, r25	; 0x22
    5588:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    558a:	89 a1       	ldd	r24, Y+33	; 0x21
    558c:	9a a1       	ldd	r25, Y+34	; 0x22
    558e:	00 97       	sbiw	r24, 0x00	; 0
    5590:	69 f7       	brne	.-38     	; 0x556c <HLCD_voidSendData+0x300>
    5592:	14 c0       	rjmp	.+40     	; 0x55bc <HLCD_voidSendData+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5594:	6b a1       	ldd	r22, Y+35	; 0x23
    5596:	7c a1       	ldd	r23, Y+36	; 0x24
    5598:	8d a1       	ldd	r24, Y+37	; 0x25
    559a:	9e a1       	ldd	r25, Y+38	; 0x26
    559c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55a0:	dc 01       	movw	r26, r24
    55a2:	cb 01       	movw	r24, r22
    55a4:	9a a3       	std	Y+34, r25	; 0x22
    55a6:	89 a3       	std	Y+33, r24	; 0x21
    55a8:	89 a1       	ldd	r24, Y+33	; 0x21
    55aa:	9a a1       	ldd	r25, Y+34	; 0x22
    55ac:	9e 8f       	std	Y+30, r25	; 0x1e
    55ae:	8d 8f       	std	Y+29, r24	; 0x1d
    55b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55b4:	01 97       	sbiw	r24, 0x01	; 1
    55b6:	f1 f7       	brne	.-4      	; 0x55b4 <HLCD_voidSendData+0x348>
    55b8:	9e 8f       	std	Y+30, r25	; 0x1e
    55ba:	8d 8f       	std	Y+29, r24	; 0x1d
		
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	62 e0       	ldi	r22, 0x02	; 2
    55c0:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    55c4:	80 e0       	ldi	r24, 0x00	; 0
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	a0 e0       	ldi	r26, 0x00	; 0
    55ca:	b0 e4       	ldi	r27, 0x40	; 64
    55cc:	89 8f       	std	Y+25, r24	; 0x19
    55ce:	9a 8f       	std	Y+26, r25	; 0x1a
    55d0:	ab 8f       	std	Y+27, r26	; 0x1b
    55d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55d4:	69 8d       	ldd	r22, Y+25	; 0x19
    55d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	4a ef       	ldi	r20, 0xFA	; 250
    55e2:	54 e4       	ldi	r21, 0x44	; 68
    55e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e8:	dc 01       	movw	r26, r24
    55ea:	cb 01       	movw	r24, r22
    55ec:	8d 8b       	std	Y+21, r24	; 0x15
    55ee:	9e 8b       	std	Y+22, r25	; 0x16
    55f0:	af 8b       	std	Y+23, r26	; 0x17
    55f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55f4:	6d 89       	ldd	r22, Y+21	; 0x15
    55f6:	7e 89       	ldd	r23, Y+22	; 0x16
    55f8:	8f 89       	ldd	r24, Y+23	; 0x17
    55fa:	98 8d       	ldd	r25, Y+24	; 0x18
    55fc:	20 e0       	ldi	r18, 0x00	; 0
    55fe:	30 e0       	ldi	r19, 0x00	; 0
    5600:	40 e8       	ldi	r20, 0x80	; 128
    5602:	5f e3       	ldi	r21, 0x3F	; 63
    5604:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5608:	88 23       	and	r24, r24
    560a:	2c f4       	brge	.+10     	; 0x5616 <HLCD_voidSendData+0x3aa>
		__ticks = 1;
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	9c 8b       	std	Y+20, r25	; 0x14
    5612:	8b 8b       	std	Y+19, r24	; 0x13
    5614:	3f c0       	rjmp	.+126    	; 0x5694 <HLCD_voidSendData+0x428>
	else if (__tmp > 65535)
    5616:	6d 89       	ldd	r22, Y+21	; 0x15
    5618:	7e 89       	ldd	r23, Y+22	; 0x16
    561a:	8f 89       	ldd	r24, Y+23	; 0x17
    561c:	98 8d       	ldd	r25, Y+24	; 0x18
    561e:	20 e0       	ldi	r18, 0x00	; 0
    5620:	3f ef       	ldi	r19, 0xFF	; 255
    5622:	4f e7       	ldi	r20, 0x7F	; 127
    5624:	57 e4       	ldi	r21, 0x47	; 71
    5626:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    562a:	18 16       	cp	r1, r24
    562c:	4c f5       	brge	.+82     	; 0x5680 <HLCD_voidSendData+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    562e:	69 8d       	ldd	r22, Y+25	; 0x19
    5630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5636:	20 e0       	ldi	r18, 0x00	; 0
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	40 e2       	ldi	r20, 0x20	; 32
    563c:	51 e4       	ldi	r21, 0x41	; 65
    563e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5642:	dc 01       	movw	r26, r24
    5644:	cb 01       	movw	r24, r22
    5646:	bc 01       	movw	r22, r24
    5648:	cd 01       	movw	r24, r26
    564a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564e:	dc 01       	movw	r26, r24
    5650:	cb 01       	movw	r24, r22
    5652:	9c 8b       	std	Y+20, r25	; 0x14
    5654:	8b 8b       	std	Y+19, r24	; 0x13
    5656:	0f c0       	rjmp	.+30     	; 0x5676 <HLCD_voidSendData+0x40a>
    5658:	88 ec       	ldi	r24, 0xC8	; 200
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	9a 8b       	std	Y+18, r25	; 0x12
    565e:	89 8b       	std	Y+17, r24	; 0x11
    5660:	89 89       	ldd	r24, Y+17	; 0x11
    5662:	9a 89       	ldd	r25, Y+18	; 0x12
    5664:	01 97       	sbiw	r24, 0x01	; 1
    5666:	f1 f7       	brne	.-4      	; 0x5664 <HLCD_voidSendData+0x3f8>
    5668:	9a 8b       	std	Y+18, r25	; 0x12
    566a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    566c:	8b 89       	ldd	r24, Y+19	; 0x13
    566e:	9c 89       	ldd	r25, Y+20	; 0x14
    5670:	01 97       	sbiw	r24, 0x01	; 1
    5672:	9c 8b       	std	Y+20, r25	; 0x14
    5674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5676:	8b 89       	ldd	r24, Y+19	; 0x13
    5678:	9c 89       	ldd	r25, Y+20	; 0x14
    567a:	00 97       	sbiw	r24, 0x00	; 0
    567c:	69 f7       	brne	.-38     	; 0x5658 <HLCD_voidSendData+0x3ec>
    567e:	14 c0       	rjmp	.+40     	; 0x56a8 <HLCD_voidSendData+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5680:	6d 89       	ldd	r22, Y+21	; 0x15
    5682:	7e 89       	ldd	r23, Y+22	; 0x16
    5684:	8f 89       	ldd	r24, Y+23	; 0x17
    5686:	98 8d       	ldd	r25, Y+24	; 0x18
    5688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    568c:	dc 01       	movw	r26, r24
    568e:	cb 01       	movw	r24, r22
    5690:	9c 8b       	std	Y+20, r25	; 0x14
    5692:	8b 8b       	std	Y+19, r24	; 0x13
    5694:	8b 89       	ldd	r24, Y+19	; 0x13
    5696:	9c 89       	ldd	r25, Y+20	; 0x14
    5698:	98 8b       	std	Y+16, r25	; 0x10
    569a:	8f 87       	std	Y+15, r24	; 0x0f
    569c:	8f 85       	ldd	r24, Y+15	; 0x0f
    569e:	98 89       	ldd	r25, Y+16	; 0x10
    56a0:	01 97       	sbiw	r24, 0x01	; 1
    56a2:	f1 f7       	brne	.-4      	; 0x56a0 <HLCD_voidSendData+0x434>
    56a4:	98 8b       	std	Y+16, r25	; 0x10
    56a6:	8f 87       	std	Y+15, r24	; 0x0f
    56a8:	80 e0       	ldi	r24, 0x00	; 0
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	a0 e8       	ldi	r26, 0x80	; 128
    56ae:	bf e3       	ldi	r27, 0x3F	; 63
    56b0:	8b 87       	std	Y+11, r24	; 0x0b
    56b2:	9c 87       	std	Y+12, r25	; 0x0c
    56b4:	ad 87       	std	Y+13, r26	; 0x0d
    56b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    56ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    56bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    56be:	9e 85       	ldd	r25, Y+14	; 0x0e
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	4a ef       	ldi	r20, 0xFA	; 250
    56c6:	54 e4       	ldi	r21, 0x44	; 68
    56c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56cc:	dc 01       	movw	r26, r24
    56ce:	cb 01       	movw	r24, r22
    56d0:	8f 83       	std	Y+7, r24	; 0x07
    56d2:	98 87       	std	Y+8, r25	; 0x08
    56d4:	a9 87       	std	Y+9, r26	; 0x09
    56d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56d8:	6f 81       	ldd	r22, Y+7	; 0x07
    56da:	78 85       	ldd	r23, Y+8	; 0x08
    56dc:	89 85       	ldd	r24, Y+9	; 0x09
    56de:	9a 85       	ldd	r25, Y+10	; 0x0a
    56e0:	20 e0       	ldi	r18, 0x00	; 0
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	40 e8       	ldi	r20, 0x80	; 128
    56e6:	5f e3       	ldi	r21, 0x3F	; 63
    56e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    56ec:	88 23       	and	r24, r24
    56ee:	2c f4       	brge	.+10     	; 0x56fa <HLCD_voidSendData+0x48e>
		__ticks = 1;
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	9e 83       	std	Y+6, r25	; 0x06
    56f6:	8d 83       	std	Y+5, r24	; 0x05
    56f8:	3f c0       	rjmp	.+126    	; 0x5778 <HLCD_voidSendData+0x50c>
	else if (__tmp > 65535)
    56fa:	6f 81       	ldd	r22, Y+7	; 0x07
    56fc:	78 85       	ldd	r23, Y+8	; 0x08
    56fe:	89 85       	ldd	r24, Y+9	; 0x09
    5700:	9a 85       	ldd	r25, Y+10	; 0x0a
    5702:	20 e0       	ldi	r18, 0x00	; 0
    5704:	3f ef       	ldi	r19, 0xFF	; 255
    5706:	4f e7       	ldi	r20, 0x7F	; 127
    5708:	57 e4       	ldi	r21, 0x47	; 71
    570a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    570e:	18 16       	cp	r1, r24
    5710:	4c f5       	brge	.+82     	; 0x5764 <HLCD_voidSendData+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5712:	6b 85       	ldd	r22, Y+11	; 0x0b
    5714:	7c 85       	ldd	r23, Y+12	; 0x0c
    5716:	8d 85       	ldd	r24, Y+13	; 0x0d
    5718:	9e 85       	ldd	r25, Y+14	; 0x0e
    571a:	20 e0       	ldi	r18, 0x00	; 0
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	40 e2       	ldi	r20, 0x20	; 32
    5720:	51 e4       	ldi	r21, 0x41	; 65
    5722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5726:	dc 01       	movw	r26, r24
    5728:	cb 01       	movw	r24, r22
    572a:	bc 01       	movw	r22, r24
    572c:	cd 01       	movw	r24, r26
    572e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5732:	dc 01       	movw	r26, r24
    5734:	cb 01       	movw	r24, r22
    5736:	9e 83       	std	Y+6, r25	; 0x06
    5738:	8d 83       	std	Y+5, r24	; 0x05
    573a:	0f c0       	rjmp	.+30     	; 0x575a <HLCD_voidSendData+0x4ee>
    573c:	88 ec       	ldi	r24, 0xC8	; 200
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	9c 83       	std	Y+4, r25	; 0x04
    5742:	8b 83       	std	Y+3, r24	; 0x03
    5744:	8b 81       	ldd	r24, Y+3	; 0x03
    5746:	9c 81       	ldd	r25, Y+4	; 0x04
    5748:	01 97       	sbiw	r24, 0x01	; 1
    574a:	f1 f7       	brne	.-4      	; 0x5748 <HLCD_voidSendData+0x4dc>
    574c:	9c 83       	std	Y+4, r25	; 0x04
    574e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5750:	8d 81       	ldd	r24, Y+5	; 0x05
    5752:	9e 81       	ldd	r25, Y+6	; 0x06
    5754:	01 97       	sbiw	r24, 0x01	; 1
    5756:	9e 83       	std	Y+6, r25	; 0x06
    5758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    575a:	8d 81       	ldd	r24, Y+5	; 0x05
    575c:	9e 81       	ldd	r25, Y+6	; 0x06
    575e:	00 97       	sbiw	r24, 0x00	; 0
    5760:	69 f7       	brne	.-38     	; 0x573c <HLCD_voidSendData+0x4d0>
    5762:	14 c0       	rjmp	.+40     	; 0x578c <HLCD_voidSendData+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5764:	6f 81       	ldd	r22, Y+7	; 0x07
    5766:	78 85       	ldd	r23, Y+8	; 0x08
    5768:	89 85       	ldd	r24, Y+9	; 0x09
    576a:	9a 85       	ldd	r25, Y+10	; 0x0a
    576c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5770:	dc 01       	movw	r26, r24
    5772:	cb 01       	movw	r24, r22
    5774:	9e 83       	std	Y+6, r25	; 0x06
    5776:	8d 83       	std	Y+5, r24	; 0x05
    5778:	8d 81       	ldd	r24, Y+5	; 0x05
    577a:	9e 81       	ldd	r25, Y+6	; 0x06
    577c:	9a 83       	std	Y+2, r25	; 0x02
    577e:	89 83       	std	Y+1, r24	; 0x01
    5780:	89 81       	ldd	r24, Y+1	; 0x01
    5782:	9a 81       	ldd	r25, Y+2	; 0x02
    5784:	01 97       	sbiw	r24, 0x01	; 1
    5786:	f1 f7       	brne	.-4      	; 0x5784 <HLCD_voidSendData+0x518>
    5788:	9a 83       	std	Y+2, r25	; 0x02
    578a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (2) ;
	#else 
		 #error "select write mode"
	#endif
	_delay_ms(1) ;
}
    578c:	c9 5b       	subi	r28, 0xB9	; 185
    578e:	df 4f       	sbci	r29, 0xFF	; 255
    5790:	0f b6       	in	r0, 0x3f	; 63
    5792:	f8 94       	cli
    5794:	de bf       	out	0x3e, r29	; 62
    5796:	0f be       	out	0x3f, r0	; 63
    5798:	cd bf       	out	0x3d, r28	; 61
    579a:	cf 91       	pop	r28
    579c:	df 91       	pop	r29
    579e:	1f 91       	pop	r17
    57a0:	0f 91       	pop	r16
    57a2:	08 95       	ret

000057a4 <HLCD_voidDispStr>:

void HLCD_voidDispStr(u8* A_Pu8String)
{
    57a4:	df 93       	push	r29
    57a6:	cf 93       	push	r28
    57a8:	00 d0       	rcall	.+0      	; 0x57aa <HLCD_voidDispStr+0x6>
    57aa:	0f 92       	push	r0
    57ac:	cd b7       	in	r28, 0x3d	; 61
    57ae:	de b7       	in	r29, 0x3e	; 62
    57b0:	9b 83       	std	Y+3, r25	; 0x03
    57b2:	8a 83       	std	Y+2, r24	; 0x02
	/**Local loop index */
	u8 L_u8Index = 0 ;
    57b4:	19 82       	std	Y+1, r1	; 0x01
    57b6:	0e c0       	rjmp	.+28     	; 0x57d4 <HLCD_voidDispStr+0x30>
	while (A_Pu8String [L_u8Index] != '\0')
	{
		/* Write Character on LCD */
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
    57b8:	89 81       	ldd	r24, Y+1	; 0x01
    57ba:	28 2f       	mov	r18, r24
    57bc:	30 e0       	ldi	r19, 0x00	; 0
    57be:	8a 81       	ldd	r24, Y+2	; 0x02
    57c0:	9b 81       	ldd	r25, Y+3	; 0x03
    57c2:	fc 01       	movw	r30, r24
    57c4:	e2 0f       	add	r30, r18
    57c6:	f3 1f       	adc	r31, r19
    57c8:	80 81       	ld	r24, Z
    57ca:	0e 94 36 29 	call	0x526c	; 0x526c <HLCD_voidSendData>
		
		/* Increment local loop index */
		L_u8Index ++ ;
    57ce:	89 81       	ldd	r24, Y+1	; 0x01
    57d0:	8f 5f       	subi	r24, 0xFF	; 255
    57d2:	89 83       	std	Y+1, r24	; 0x01

void HLCD_voidDispStr(u8* A_Pu8String)
{
	/**Local loop index */
	u8 L_u8Index = 0 ;
	while (A_Pu8String [L_u8Index] != '\0')
    57d4:	89 81       	ldd	r24, Y+1	; 0x01
    57d6:	28 2f       	mov	r18, r24
    57d8:	30 e0       	ldi	r19, 0x00	; 0
    57da:	8a 81       	ldd	r24, Y+2	; 0x02
    57dc:	9b 81       	ldd	r25, Y+3	; 0x03
    57de:	fc 01       	movw	r30, r24
    57e0:	e2 0f       	add	r30, r18
    57e2:	f3 1f       	adc	r31, r19
    57e4:	80 81       	ld	r24, Z
    57e6:	88 23       	and	r24, r24
    57e8:	39 f7       	brne	.-50     	; 0x57b8 <HLCD_voidDispStr+0x14>
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
		
		/* Increment local loop index */
		L_u8Index ++ ;
	}
}
    57ea:	0f 90       	pop	r0
    57ec:	0f 90       	pop	r0
    57ee:	0f 90       	pop	r0
    57f0:	cf 91       	pop	r28
    57f2:	df 91       	pop	r29
    57f4:	08 95       	ret

000057f6 <HLCD_voidDispIntNum>:

void HLCD_voidDispIntNum(u32 A_u32Number)
{
    57f6:	df 93       	push	r29
    57f8:	cf 93       	push	r28
    57fa:	cd b7       	in	r28, 0x3d	; 61
    57fc:	de b7       	in	r29, 0x3e	; 62
    57fe:	a4 97       	sbiw	r28, 0x24	; 36
    5800:	0f b6       	in	r0, 0x3f	; 63
    5802:	f8 94       	cli
    5804:	de bf       	out	0x3e, r29	; 62
    5806:	0f be       	out	0x3f, r0	; 63
    5808:	cd bf       	out	0x3d, r28	; 61
    580a:	69 a3       	std	Y+33, r22	; 0x21
    580c:	7a a3       	std	Y+34, r23	; 0x22
    580e:	8b a3       	std	Y+35, r24	; 0x23
    5810:	9c a3       	std	Y+36, r25	; 0x24
	if (A_u32Number < MIN_INT_NUM && A_u32Number > MAX_INT_NUM)
    5812:	89 a1       	ldd	r24, Y+33	; 0x21
    5814:	9a a1       	ldd	r25, Y+34	; 0x22
    5816:	ab a1       	ldd	r26, Y+35	; 0x23
    5818:	bc a1       	ldd	r27, Y+36	; 0x24
    581a:	81 30       	cpi	r24, 0x01	; 1
    581c:	26 e3       	ldi	r18, 0x36	; 54
    581e:	92 07       	cpc	r25, r18
    5820:	25 e6       	ldi	r18, 0x65	; 101
    5822:	a2 07       	cpc	r26, r18
    5824:	24 ec       	ldi	r18, 0xC4	; 196
    5826:	b2 07       	cpc	r27, r18
    5828:	98 f4       	brcc	.+38     	; 0x5850 <HLCD_voidDispIntNum+0x5a>
    582a:	89 a1       	ldd	r24, Y+33	; 0x21
    582c:	9a a1       	ldd	r25, Y+34	; 0x22
    582e:	ab a1       	ldd	r26, Y+35	; 0x23
    5830:	bc a1       	ldd	r27, Y+36	; 0x24
    5832:	80 30       	cpi	r24, 0x00	; 0
    5834:	2a ec       	ldi	r18, 0xCA	; 202
    5836:	92 07       	cpc	r25, r18
    5838:	2a e9       	ldi	r18, 0x9A	; 154
    583a:	a2 07       	cpc	r26, r18
    583c:	2b e3       	ldi	r18, 0x3B	; 59
    583e:	b2 07       	cpc	r27, r18
    5840:	38 f0       	brcs	.+14     	; 0x5850 <HLCD_voidDispIntNum+0x5a>
	{
		/**
		 * if the integer is more than MAX_INT_NUM or less than MIN_INT_NUM
		          **** "Overflow !!!!" will be displayed
		 */
		HLCD_voidClrScreen () ;
    5842:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <HLCD_voidClrScreen>
		HLCD_voidDispStr ("Overflow !!!!") ;
    5846:	80 e6       	ldi	r24, 0x60	; 96
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
    584e:	1a c0       	rjmp	.+52     	; 0x5884 <HLCD_voidDispIntNum+0x8e>
	}
	else
	{
		/**array to stored conversion character*/
	    s8* L_Ps8String [16] = {0} ;
    5850:	80 e2       	ldi	r24, 0x20	; 32
    5852:	fe 01       	movw	r30, r28
    5854:	31 96       	adiw	r30, 0x01	; 1
    5856:	df 01       	movw	r26, r30
    5858:	28 2f       	mov	r18, r24
    585a:	1d 92       	st	X+, r1
    585c:	2a 95       	dec	r18
    585e:	e9 f7       	brne	.-6      	; 0x585a <HLCD_voidDispIntNum+0x64>

		/** convert integer to string*/
	    ltoa (A_u32Number , (s8*)L_Ps8String , BASE) ;
    5860:	89 a1       	ldd	r24, Y+33	; 0x21
    5862:	9a a1       	ldd	r25, Y+34	; 0x22
    5864:	ab a1       	ldd	r26, Y+35	; 0x23
    5866:	bc a1       	ldd	r27, Y+36	; 0x24
    5868:	9e 01       	movw	r18, r28
    586a:	2f 5f       	subi	r18, 0xFF	; 255
    586c:	3f 4f       	sbci	r19, 0xFF	; 255
    586e:	bc 01       	movw	r22, r24
    5870:	cd 01       	movw	r24, r26
    5872:	a9 01       	movw	r20, r18
    5874:	2a e0       	ldi	r18, 0x0A	; 10
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	0e 94 6e 33 	call	0x66dc	; 0x66dc <ltoa>

		/**display number after convesion*/
	    HLCD_voidDispStr ((u8*)L_Ps8String) ;
    587c:	ce 01       	movw	r24, r28
    587e:	01 96       	adiw	r24, 0x01	; 1
    5880:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
	}
}
    5884:	a4 96       	adiw	r28, 0x24	; 36
    5886:	0f b6       	in	r0, 0x3f	; 63
    5888:	f8 94       	cli
    588a:	de bf       	out	0x3e, r29	; 62
    588c:	0f be       	out	0x3f, r0	; 63
    588e:	cd bf       	out	0x3d, r28	; 61
    5890:	cf 91       	pop	r28
    5892:	df 91       	pop	r29
    5894:	08 95       	ret

00005896 <HLCD_voidDispFloatNum>:

void HLCD_voidDispFloatNum(f32 A_f32Number , u8 A_u8AfterDigit)
{
    5896:	ef 92       	push	r14
    5898:	ff 92       	push	r15
    589a:	0f 93       	push	r16
    589c:	1f 93       	push	r17
    589e:	df 93       	push	r29
    58a0:	cf 93       	push	r28
    58a2:	cd b7       	in	r28, 0x3d	; 61
    58a4:	de b7       	in	r29, 0x3e	; 62
    58a6:	28 97       	sbiw	r28, 0x08	; 8
    58a8:	0f b6       	in	r0, 0x3f	; 63
    58aa:	f8 94       	cli
    58ac:	de bf       	out	0x3e, r29	; 62
    58ae:	0f be       	out	0x3f, r0	; 63
    58b0:	cd bf       	out	0x3d, r28	; 61
    58b2:	6c 83       	std	Y+4, r22	; 0x04
    58b4:	7d 83       	std	Y+5, r23	; 0x05
    58b6:	8e 83       	std	Y+6, r24	; 0x06
    58b8:	9f 83       	std	Y+7, r25	; 0x07
    58ba:	48 87       	std	Y+8, r20	; 0x08
	u16 L_u16AfterDigit = 1 ;
    58bc:	81 e0       	ldi	r24, 0x01	; 1
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	9b 83       	std	Y+3, r25	; 0x03
    58c2:	8a 83       	std	Y+2, r24	; 0x02
	u8  L_u8Iterator = 0 ;
    58c4:	19 82       	std	Y+1, r1	; 0x01
	/** display integer part */
    HLCD_voidDispIntNum ((u32)A_f32Number) ;
    58c6:	6c 81       	ldd	r22, Y+4	; 0x04
    58c8:	7d 81       	ldd	r23, Y+5	; 0x05
    58ca:	8e 81       	ldd	r24, Y+6	; 0x06
    58cc:	9f 81       	ldd	r25, Y+7	; 0x07
    58ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58d2:	dc 01       	movw	r26, r24
    58d4:	cb 01       	movw	r24, r22
    58d6:	bc 01       	movw	r22, r24
    58d8:	cd 01       	movw	r24, r26
    58da:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <HLCD_voidDispIntNum>

	/** display dot */
	HLCD_voidSendData   (',') ;
    58de:	8c e2       	ldi	r24, 0x2C	; 44
    58e0:	0e 94 36 29 	call	0x526c	; 0x526c <HLCD_voidSendData>

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
    58e4:	19 82       	std	Y+1, r1	; 0x01
    58e6:	11 c0       	rjmp	.+34     	; 0x590a <HLCD_voidDispFloatNum+0x74>
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
    58e8:	8a 81       	ldd	r24, Y+2	; 0x02
    58ea:	9b 81       	ldd	r25, Y+3	; 0x03
    58ec:	9c 01       	movw	r18, r24
    58ee:	22 0f       	add	r18, r18
    58f0:	33 1f       	adc	r19, r19
    58f2:	c9 01       	movw	r24, r18
    58f4:	88 0f       	add	r24, r24
    58f6:	99 1f       	adc	r25, r25
    58f8:	88 0f       	add	r24, r24
    58fa:	99 1f       	adc	r25, r25
    58fc:	82 0f       	add	r24, r18
    58fe:	93 1f       	adc	r25, r19
    5900:	9b 83       	std	Y+3, r25	; 0x03
    5902:	8a 83       	std	Y+2, r24	; 0x02
    HLCD_voidDispIntNum ((u32)A_f32Number) ;

	/** display dot */
	HLCD_voidSendData   (',') ;

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
    5904:	89 81       	ldd	r24, Y+1	; 0x01
    5906:	8f 5f       	subi	r24, 0xFF	; 255
    5908:	89 83       	std	Y+1, r24	; 0x01
    590a:	99 81       	ldd	r25, Y+1	; 0x01
    590c:	88 85       	ldd	r24, Y+8	; 0x08
    590e:	98 17       	cp	r25, r24
    5910:	58 f3       	brcs	.-42     	; 0x58e8 <HLCD_voidDispFloatNum+0x52>
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
	}

	/** display fraction part */
	HLCD_voidDispIntNum ((A_f32Number - (u32) A_f32Number) * L_u16AfterDigit) ;
    5912:	6c 81       	ldd	r22, Y+4	; 0x04
    5914:	7d 81       	ldd	r23, Y+5	; 0x05
    5916:	8e 81       	ldd	r24, Y+6	; 0x06
    5918:	9f 81       	ldd	r25, Y+7	; 0x07
    591a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    591e:	dc 01       	movw	r26, r24
    5920:	cb 01       	movw	r24, r22
    5922:	bc 01       	movw	r22, r24
    5924:	cd 01       	movw	r24, r26
    5926:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    592a:	9b 01       	movw	r18, r22
    592c:	ac 01       	movw	r20, r24
    592e:	6c 81       	ldd	r22, Y+4	; 0x04
    5930:	7d 81       	ldd	r23, Y+5	; 0x05
    5932:	8e 81       	ldd	r24, Y+6	; 0x06
    5934:	9f 81       	ldd	r25, Y+7	; 0x07
    5936:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    593a:	dc 01       	movw	r26, r24
    593c:	cb 01       	movw	r24, r22
    593e:	7c 01       	movw	r14, r24
    5940:	8d 01       	movw	r16, r26
    5942:	8a 81       	ldd	r24, Y+2	; 0x02
    5944:	9b 81       	ldd	r25, Y+3	; 0x03
    5946:	cc 01       	movw	r24, r24
    5948:	a0 e0       	ldi	r26, 0x00	; 0
    594a:	b0 e0       	ldi	r27, 0x00	; 0
    594c:	bc 01       	movw	r22, r24
    594e:	cd 01       	movw	r24, r26
    5950:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    5954:	9b 01       	movw	r18, r22
    5956:	ac 01       	movw	r20, r24
    5958:	c8 01       	movw	r24, r16
    595a:	b7 01       	movw	r22, r14
    595c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5960:	dc 01       	movw	r26, r24
    5962:	cb 01       	movw	r24, r22
    5964:	bc 01       	movw	r22, r24
    5966:	cd 01       	movw	r24, r26
    5968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    596c:	dc 01       	movw	r26, r24
    596e:	cb 01       	movw	r24, r22
    5970:	bc 01       	movw	r22, r24
    5972:	cd 01       	movw	r24, r26
    5974:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <HLCD_voidDispIntNum>
}
    5978:	28 96       	adiw	r28, 0x08	; 8
    597a:	0f b6       	in	r0, 0x3f	; 63
    597c:	f8 94       	cli
    597e:	de bf       	out	0x3e, r29	; 62
    5980:	0f be       	out	0x3f, r0	; 63
    5982:	cd bf       	out	0x3d, r28	; 61
    5984:	cf 91       	pop	r28
    5986:	df 91       	pop	r29
    5988:	1f 91       	pop	r17
    598a:	0f 91       	pop	r16
    598c:	ff 90       	pop	r15
    598e:	ef 90       	pop	r14
    5990:	08 95       	ret

00005992 <HLCD_voidMovCursor>:

void HLCD_voidMovCursor(u8 A_u8RowId, u8 A_u8ColId)
{
    5992:	df 93       	push	r29
    5994:	cf 93       	push	r28
    5996:	00 d0       	rcall	.+0      	; 0x5998 <HLCD_voidMovCursor+0x6>
    5998:	0f 92       	push	r0
    599a:	cd b7       	in	r28, 0x3d	; 61
    599c:	de b7       	in	r29, 0x3e	; 62
    599e:	8a 83       	std	Y+2, r24	; 0x02
    59a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DDRAMAddress ;
	
	/**if the row and col are out of range 
	         *** Do nothing
	  */
	if (A_u8RowId >= MIN_NUM_OF_ROW && A_u8RowId <= MAX_NUM_OF_ROW &&
    59a2:	8a 81       	ldd	r24, Y+2	; 0x02
    59a4:	88 23       	and	r24, r24
    59a6:	c9 f0       	breq	.+50     	; 0x59da <HLCD_voidMovCursor+0x48>
    59a8:	8a 81       	ldd	r24, Y+2	; 0x02
    59aa:	83 30       	cpi	r24, 0x03	; 3
    59ac:	b0 f4       	brcc	.+44     	; 0x59da <HLCD_voidMovCursor+0x48>
    59ae:	8b 81       	ldd	r24, Y+3	; 0x03
    59b0:	88 23       	and	r24, r24
    59b2:	99 f0       	breq	.+38     	; 0x59da <HLCD_voidMovCursor+0x48>
    59b4:	8b 81       	ldd	r24, Y+3	; 0x03
    59b6:	81 31       	cpi	r24, 0x11	; 17
    59b8:	80 f4       	brcc	.+32     	; 0x59da <HLCD_voidMovCursor+0x48>
	A_u8ColId >= MIN_NUM_OF_COL && A_u8ColId <= MAX_NUM_OF_COL)
	{
		/**for first row*/
		if (A_u8RowId == LCD_ROW1)
    59ba:	8a 81       	ldd	r24, Y+2	; 0x02
    59bc:	81 30       	cpi	r24, 0x01	; 1
    59be:	21 f4       	brne	.+8      	; 0x59c8 <HLCD_voidMovCursor+0x36>
		{
			L_u8DDRAMAddress = FIRST_ROW_ADDRESS + A_u8ColId - 1 ;
    59c0:	8b 81       	ldd	r24, Y+3	; 0x03
    59c2:	81 58       	subi	r24, 0x81	; 129
    59c4:	89 83       	std	Y+1, r24	; 0x01
    59c6:	06 c0       	rjmp	.+12     	; 0x59d4 <HLCD_voidMovCursor+0x42>
		}
		
		/**for second row*/
		else if (A_u8RowId == LCD_ROW2)
    59c8:	8a 81       	ldd	r24, Y+2	; 0x02
    59ca:	82 30       	cpi	r24, 0x02	; 2
    59cc:	19 f4       	brne	.+6      	; 0x59d4 <HLCD_voidMovCursor+0x42>
		{
			L_u8DDRAMAddress = SECOND_ROW_ADDRESS + A_u8ColId - 1 ;
    59ce:	8b 81       	ldd	r24, Y+3	; 0x03
    59d0:	81 54       	subi	r24, 0x41	; 65
    59d2:	89 83       	std	Y+1, r24	; 0x01
		}
		
		/**set DDRAM address*/
		HLCD_voidSendCmd (L_u8DDRAMAddress) ;
    59d4:	89 81       	ldd	r24, Y+1	; 0x01
    59d6:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
	}
	else
	{
		/** DO Nothing */
	}
}
    59da:	0f 90       	pop	r0
    59dc:	0f 90       	pop	r0
    59de:	0f 90       	pop	r0
    59e0:	cf 91       	pop	r28
    59e2:	df 91       	pop	r29
    59e4:	08 95       	ret

000059e6 <HLCD_voidClrScreen>:

void HLCD_voidClrScreen (void)
{
    59e6:	df 93       	push	r29
    59e8:	cf 93       	push	r28
    59ea:	cd b7       	in	r28, 0x3d	; 61
    59ec:	de b7       	in	r29, 0x3e	; 62
	/**clear data and move cursor to first position*/
	HLCD_voidSendCmd (CMD_CLEAR) ;
    59ee:	81 e0       	ldi	r24, 0x01	; 1
    59f0:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
}
    59f4:	cf 91       	pop	r28
    59f6:	df 91       	pop	r29
    59f8:	08 95       	ret

000059fa <HLCD_voidShiftDisplayRight>:

void HLCD_voidShiftDisplayRight(void)
{
    59fa:	df 93       	push	r29
    59fc:	cf 93       	push	r28
    59fe:	cd b7       	in	r28, 0x3d	; 61
    5a00:	de b7       	in	r29, 0x3e	; 62
	/**shift display to right*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_RIGHT) ;
    5a02:	8c e1       	ldi	r24, 0x1C	; 28
    5a04:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
}
    5a08:	cf 91       	pop	r28
    5a0a:	df 91       	pop	r29
    5a0c:	08 95       	ret

00005a0e <HLCD_voidShiftDisplayLeft>:

void HLCD_voidShiftDisplayLeft(void)
{
    5a0e:	df 93       	push	r29
    5a10:	cf 93       	push	r28
    5a12:	cd b7       	in	r28, 0x3d	; 61
    5a14:	de b7       	in	r29, 0x3e	; 62
	/**shift display to left*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_LEFT) ;
    5a16:	88 e1       	ldi	r24, 0x18	; 24
    5a18:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
}
    5a1c:	cf 91       	pop	r28
    5a1e:	df 91       	pop	r29
    5a20:	08 95       	ret

00005a22 <HLCD_voidDispSpecialChar>:

void HLCD_voidDispSpecialChar(u8 * A_u8Array, u8 A_u8Block, u8 A_u8RowId, u8 A_u8ColId)
{
    5a22:	df 93       	push	r29
    5a24:	cf 93       	push	r28
    5a26:	00 d0       	rcall	.+0      	; 0x5a28 <HLCD_voidDispSpecialChar+0x6>
    5a28:	00 d0       	rcall	.+0      	; 0x5a2a <HLCD_voidDispSpecialChar+0x8>
    5a2a:	00 d0       	rcall	.+0      	; 0x5a2c <HLCD_voidDispSpecialChar+0xa>
    5a2c:	cd b7       	in	r28, 0x3d	; 61
    5a2e:	de b7       	in	r29, 0x3e	; 62
    5a30:	9b 83       	std	Y+3, r25	; 0x03
    5a32:	8a 83       	std	Y+2, r24	; 0x02
    5a34:	6c 83       	std	Y+4, r22	; 0x04
    5a36:	4d 83       	std	Y+5, r20	; 0x05
    5a38:	2e 83       	std	Y+6, r18	; 0x06
	/**iterator for for loop*/
	u8 L_u8Iterator ;
	
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
    5a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a3c:	88 2f       	mov	r24, r24
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	08 96       	adiw	r24, 0x08	; 8
    5a42:	88 0f       	add	r24, r24
    5a44:	99 1f       	adc	r25, r25
    5a46:	88 0f       	add	r24, r24
    5a48:	99 1f       	adc	r25, r25
    5a4a:	88 0f       	add	r24, r24
    5a4c:	99 1f       	adc	r25, r25
    5a4e:	0e 94 4f 23 	call	0x469e	; 0x469e <HLCD_voidSendCmd>
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
    5a52:	19 82       	std	Y+1, r1	; 0x01
    5a54:	0e c0       	rjmp	.+28     	; 0x5a72 <HLCD_voidDispSpecialChar+0x50>
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
    5a56:	89 81       	ldd	r24, Y+1	; 0x01
    5a58:	28 2f       	mov	r18, r24
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a60:	fc 01       	movw	r30, r24
    5a62:	e2 0f       	add	r30, r18
    5a64:	f3 1f       	adc	r31, r19
    5a66:	80 81       	ld	r24, Z
    5a68:	0e 94 36 29 	call	0x526c	; 0x526c <HLCD_voidSendData>
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
    5a6c:	89 81       	ldd	r24, Y+1	; 0x01
    5a6e:	8f 5f       	subi	r24, 0xFF	; 255
    5a70:	89 83       	std	Y+1, r24	; 0x01
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
    5a72:	89 81       	ldd	r24, Y+1	; 0x01
    5a74:	88 30       	cpi	r24, 0x08	; 8
    5a76:	78 f3       	brcs	.-34     	; 0x5a56 <HLCD_voidDispSpecialChar+0x34>
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
		 }
    
	/* Move the cursor to required position */
	HLCD_voidMovCursor (A_u8RowId , A_u8ColId) ;
    5a78:	8d 81       	ldd	r24, Y+5	; 0x05
    5a7a:	6e 81       	ldd	r22, Y+6	; 0x06
    5a7c:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
	
	/* Set the block to be displayed */
	HLCD_voidSendData (A_u8Block) ;
    5a80:	8c 81       	ldd	r24, Y+4	; 0x04
    5a82:	0e 94 36 29 	call	0x526c	; 0x526c <HLCD_voidSendData>
}
    5a86:	26 96       	adiw	r28, 0x06	; 6
    5a88:	0f b6       	in	r0, 0x3f	; 63
    5a8a:	f8 94       	cli
    5a8c:	de bf       	out	0x3e, r29	; 62
    5a8e:	0f be       	out	0x3f, r0	; 63
    5a90:	cd bf       	out	0x3d, r28	; 61
    5a92:	cf 91       	pop	r28
    5a94:	df 91       	pop	r29
    5a96:	08 95       	ret

00005a98 <HBUZZER_voidBUZZERInitial>:
#include "BUZZER_int.h"
#include "BUZZER_private.h"
#include "BUZZER_conf.h"

void HBUZZER_voidBUZZERInitial (void)
{
    5a98:	df 93       	push	r29
    5a9a:	cf 93       	push	r28
    5a9c:	cd b7       	in	r28, 0x3d	; 61
    5a9e:	de b7       	in	r29, 0x3e	; 62
	/** select direction of buzzer as output */
    MDIO_voidSetPinDir(BUZZER_PORT , BUZZER_PIN , BUZZER_OUTPUT) ; 
    5aa0:	83 e0       	ldi	r24, 0x03	; 3
    5aa2:	65 e0       	ldi	r22, 0x05	; 5
    5aa4:	41 e0       	ldi	r20, 0x01	; 1
    5aa6:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
}
    5aaa:	cf 91       	pop	r28
    5aac:	df 91       	pop	r29
    5aae:	08 95       	ret

00005ab0 <HBUZZER_voidBUZZEROn>:

void HBUZZER_voidBUZZEROn (void)
{
    5ab0:	df 93       	push	r29
    5ab2:	cf 93       	push	r28
    5ab4:	cd b7       	in	r28, 0x3d	; 61
    5ab6:	de b7       	in	r29, 0x3e	; 62
	/**make buzzer on (it's pin is high)*/
	MDIO_voidSetPinVal(BUZZER_PORT , BUZZER_PIN) ; 
    5ab8:	83 e0       	ldi	r24, 0x03	; 3
    5aba:	65 e0       	ldi	r22, 0x05	; 5
    5abc:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
}
    5ac0:	cf 91       	pop	r28
    5ac2:	df 91       	pop	r29
    5ac4:	08 95       	ret

00005ac6 <HBUZZER_voidBUZZEROff>:

void HBUZZER_voidBUZZEROff (void)
{
    5ac6:	df 93       	push	r29
    5ac8:	cf 93       	push	r28
    5aca:	cd b7       	in	r28, 0x3d	; 61
    5acc:	de b7       	in	r29, 0x3e	; 62
	/**make buzzer off (it's pin is low)*/
	MDIO_voidClrPinVal(BUZZER_PORT , BUZZER_PIN) ; 
    5ace:	83 e0       	ldi	r24, 0x03	; 3
    5ad0:	65 e0       	ldi	r22, 0x05	; 5
    5ad2:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
}
    5ad6:	cf 91       	pop	r28
    5ad8:	df 91       	pop	r29
    5ada:	08 95       	ret

00005adc <HBUZZER_voidBUZZERToggle>:

void HBUZZER_voidBUZZERToggle (void)
{
    5adc:	df 93       	push	r29
    5ade:	cf 93       	push	r28
    5ae0:	cd b7       	in	r28, 0x3d	; 61
    5ae2:	de b7       	in	r29, 0x3e	; 62
	/**inverse the status of buzzer*/
	MDIO_voidTogPinVal(BUZZER_PORT , BUZZER_PIN) ; 
    5ae4:	83 e0       	ldi	r24, 0x03	; 3
    5ae6:	65 e0       	ldi	r22, 0x05	; 5
    5ae8:	0e 94 4c 1a 	call	0x3498	; 0x3498 <MDIO_voidTogPinVal>
}
    5aec:	cf 91       	pop	r28
    5aee:	df 91       	pop	r29
    5af0:	08 95       	ret

00005af2 <main>:
#include "TIMER/MCAL/TIMER0/TIMER0_Config.h"
#include <util/delay.h>


int main (void)
{
    5af2:	df 93       	push	r29
    5af4:	cf 93       	push	r28
    5af6:	cd b7       	in	r28, 0x3d	; 61
    5af8:	de b7       	in	r29, 0x3e	; 62
    5afa:	2e 97       	sbiw	r28, 0x0e	; 14
    5afc:	0f b6       	in	r0, 0x3f	; 63
    5afe:	f8 94       	cli
    5b00:	de bf       	out	0x3e, r29	; 62
    5b02:	0f be       	out	0x3f, r0	; 63
    5b04:	cd bf       	out	0x3d, r28	; 61
	/********************************LED*********************************/

	MDIO_voidSetPinDir(DIO_PORTB,DIO_PIN4,DIO_OUTPUT_PIN);
    5b06:	82 e0       	ldi	r24, 0x02	; 2
    5b08:	64 e0       	ldi	r22, 0x04	; 4
    5b0a:	41 e0       	ldi	r20, 0x01	; 1
    5b0c:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTB,DIO_PIN5,DIO_OUTPUT_PIN);
    5b10:	82 e0       	ldi	r24, 0x02	; 2
    5b12:	65 e0       	ldi	r22, 0x05	; 5
    5b14:	41 e0       	ldi	r20, 0x01	; 1
    5b16:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTB,DIO_PIN6,DIO_OUTPUT_PIN);
    5b1a:	82 e0       	ldi	r24, 0x02	; 2
    5b1c:	66 e0       	ldi	r22, 0x06	; 6
    5b1e:	41 e0       	ldi	r20, 0x01	; 1
    5b20:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>

	/********************************************************************/

	/********************************BUZZER*********************************/

		MDIO_voidSetPinDir(DIO_PORTB,DIO_PIN0,DIO_OUTPUT_PIN);
    5b24:	82 e0       	ldi	r24, 0x02	; 2
    5b26:	60 e0       	ldi	r22, 0x00	; 0
    5b28:	41 e0       	ldi	r20, 0x01	; 1
    5b2a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>

	/********************************************************************/

	/*******************************INTERPUT*****************************/

	MEXTI_voidInit();
    5b2e:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <MEXTI_voidInit>
	MINT0_voidSetCallback(Select_GearBox);
    5b32:	80 ef       	ldi	r24, 0xF0	; 240
    5b34:	9e e2       	ldi	r25, 0x2E	; 46
    5b36:	0e 94 11 16 	call	0x2c22	; 0x2c22 <MINT0_voidSetCallback>
	MINT1_voidSetCallback(SL);
    5b3a:	89 ee       	ldi	r24, 0xE9	; 233
    5b3c:	90 e3       	ldi	r25, 0x30	; 48
    5b3e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <MINT1_voidSetCallback>
	MINT2_voidSetCallback(CCS);
    5b42:	89 e4       	ldi	r24, 0x49	; 73
    5b44:	91 e3       	ldi	r25, 0x31	; 49
    5b46:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <MINT2_voidSetCallback>
	MDIO_voidSetPinDir(DIO_PORTD,DIO_PIN2,DIO_INPUT_PIN);
    5b4a:	84 e0       	ldi	r24, 0x04	; 4
    5b4c:	62 e0       	ldi	r22, 0x02	; 2
    5b4e:	40 e0       	ldi	r20, 0x00	; 0
    5b50:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTD,DIO_PIN3,DIO_INPUT_PIN);
    5b54:	84 e0       	ldi	r24, 0x04	; 4
    5b56:	63 e0       	ldi	r22, 0x03	; 3
    5b58:	40 e0       	ldi	r20, 0x00	; 0
    5b5a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>
	MDIO_voidSetPinDir(DIO_PORTB,DIO_PIN2,DIO_INPUT_PIN);
    5b5e:	82 e0       	ldi	r24, 0x02	; 2
    5b60:	62 e0       	ldi	r22, 0x02	; 2
    5b62:	40 e0       	ldi	r20, 0x00	; 0
    5b64:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MDIO_voidSetPinDir>

	/********************************************************************/

	/***************************INIT PHERIPHERAL*************************/

	HLCD_voidInit();
    5b68:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <HLCD_voidInit>
	HUltrasonic_voidInt();
    5b6c:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <HUltrasonic_voidInt>

	/********************************************************************/

	/********************************** TIMER ***************************/

	TMR0_VoidInit();
    5b70:	0e 94 47 07 	call	0xe8e	; 0xe8e <TMR0_VoidInit>
	TMR0_VoidOCMInterruptEnable();
    5b74:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TMR0_VoidOCMInterruptEnable>
	TMR0_VoidSetOCMValue(200);
    5b78:	88 ec       	ldi	r24, 0xC8	; 200
    5b7a:	0e 94 b0 07 	call	0xf60	; 0xf60 <TMR0_VoidSetOCMValue>

	/********************************************************************/

	/********************************* ADC ******************************/

	MADC_voidInt();
    5b7e:	0e 94 24 1c 	call	0x3848	; 0x3848 <MADC_voidInt>
	MADC_voidSetCallback(Print_Kilometer);
    5b82:	88 e2       	ldi	r24, 0x28	; 40
    5b84:	91 e3       	ldi	r25, 0x31	; 49
    5b86:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <MADC_voidSetCallback>
	//MADC_voidStartConversion(CHANNEL_0);
	HLCD_voidClrScreen();
    5b8a:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <HLCD_voidClrScreen>

	/********************************************************************/
	Reseive_Uart();
    5b8e:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <Reseive_Uart>
	DesplayLCD();
    5b92:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <DesplayLCD>
	TMR0_OCM_SetCallBack(BAZZER);
    5b96:	88 e8       	ldi	r24, 0x88	; 136
    5b98:	91 e3       	ldi	r25, 0x31	; 49
    5b9a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <TMR0_OCM_SetCallBack>
	MADC_voidStartConversion(CHANNEL_0);
    5b9e:	80 e0       	ldi	r24, 0x00	; 0
    5ba0:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <MADC_voidStartConversion>
	MADC_voidSetCallback(Print_Kilometer);
    5ba4:	88 e2       	ldi	r24, 0x28	; 40
    5ba6:	91 e3       	ldi	r25, 0x31	; 49
    5ba8:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <MADC_voidSetCallback>
	//DesplayLCD();
	while(1)
	{
		BAS_System();
    5bac:	0e 94 76 2f 	call	0x5eec	; 0x5eec <BAS_System>
    5bb0:	80 e0       	ldi	r24, 0x00	; 0
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	aa ef       	ldi	r26, 0xFA	; 250
    5bb6:	b3 e4       	ldi	r27, 0x43	; 67
    5bb8:	8b 87       	std	Y+11, r24	; 0x0b
    5bba:	9c 87       	std	Y+12, r25	; 0x0c
    5bbc:	ad 87       	std	Y+13, r26	; 0x0d
    5bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bc8:	20 e0       	ldi	r18, 0x00	; 0
    5bca:	30 e0       	ldi	r19, 0x00	; 0
    5bcc:	4a ef       	ldi	r20, 0xFA	; 250
    5bce:	54 e4       	ldi	r21, 0x44	; 68
    5bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bd4:	dc 01       	movw	r26, r24
    5bd6:	cb 01       	movw	r24, r22
    5bd8:	8f 83       	std	Y+7, r24	; 0x07
    5bda:	98 87       	std	Y+8, r25	; 0x08
    5bdc:	a9 87       	std	Y+9, r26	; 0x09
    5bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5be0:	6f 81       	ldd	r22, Y+7	; 0x07
    5be2:	78 85       	ldd	r23, Y+8	; 0x08
    5be4:	89 85       	ldd	r24, Y+9	; 0x09
    5be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5be8:	20 e0       	ldi	r18, 0x00	; 0
    5bea:	30 e0       	ldi	r19, 0x00	; 0
    5bec:	40 e8       	ldi	r20, 0x80	; 128
    5bee:	5f e3       	ldi	r21, 0x3F	; 63
    5bf0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5bf4:	88 23       	and	r24, r24
    5bf6:	2c f4       	brge	.+10     	; 0x5c02 <main+0x110>
		__ticks = 1;
    5bf8:	81 e0       	ldi	r24, 0x01	; 1
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	9e 83       	std	Y+6, r25	; 0x06
    5bfe:	8d 83       	std	Y+5, r24	; 0x05
    5c00:	3f c0       	rjmp	.+126    	; 0x5c80 <main+0x18e>
	else if (__tmp > 65535)
    5c02:	6f 81       	ldd	r22, Y+7	; 0x07
    5c04:	78 85       	ldd	r23, Y+8	; 0x08
    5c06:	89 85       	ldd	r24, Y+9	; 0x09
    5c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c0a:	20 e0       	ldi	r18, 0x00	; 0
    5c0c:	3f ef       	ldi	r19, 0xFF	; 255
    5c0e:	4f e7       	ldi	r20, 0x7F	; 127
    5c10:	57 e4       	ldi	r21, 0x47	; 71
    5c12:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5c16:	18 16       	cp	r1, r24
    5c18:	4c f5       	brge	.+82     	; 0x5c6c <main+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c22:	20 e0       	ldi	r18, 0x00	; 0
    5c24:	30 e0       	ldi	r19, 0x00	; 0
    5c26:	40 e2       	ldi	r20, 0x20	; 32
    5c28:	51 e4       	ldi	r21, 0x41	; 65
    5c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c2e:	dc 01       	movw	r26, r24
    5c30:	cb 01       	movw	r24, r22
    5c32:	bc 01       	movw	r22, r24
    5c34:	cd 01       	movw	r24, r26
    5c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c3a:	dc 01       	movw	r26, r24
    5c3c:	cb 01       	movw	r24, r22
    5c3e:	9e 83       	std	Y+6, r25	; 0x06
    5c40:	8d 83       	std	Y+5, r24	; 0x05
    5c42:	0f c0       	rjmp	.+30     	; 0x5c62 <main+0x170>
    5c44:	88 ec       	ldi	r24, 0xC8	; 200
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	9c 83       	std	Y+4, r25	; 0x04
    5c4a:	8b 83       	std	Y+3, r24	; 0x03
    5c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c50:	01 97       	sbiw	r24, 0x01	; 1
    5c52:	f1 f7       	brne	.-4      	; 0x5c50 <main+0x15e>
    5c54:	9c 83       	std	Y+4, r25	; 0x04
    5c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c58:	8d 81       	ldd	r24, Y+5	; 0x05
    5c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    5c5c:	01 97       	sbiw	r24, 0x01	; 1
    5c5e:	9e 83       	std	Y+6, r25	; 0x06
    5c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c62:	8d 81       	ldd	r24, Y+5	; 0x05
    5c64:	9e 81       	ldd	r25, Y+6	; 0x06
    5c66:	00 97       	sbiw	r24, 0x00	; 0
    5c68:	69 f7       	brne	.-38     	; 0x5c44 <main+0x152>
    5c6a:	14 c0       	rjmp	.+40     	; 0x5c94 <main+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    5c6e:	78 85       	ldd	r23, Y+8	; 0x08
    5c70:	89 85       	ldd	r24, Y+9	; 0x09
    5c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c78:	dc 01       	movw	r26, r24
    5c7a:	cb 01       	movw	r24, r22
    5c7c:	9e 83       	std	Y+6, r25	; 0x06
    5c7e:	8d 83       	std	Y+5, r24	; 0x05
    5c80:	8d 81       	ldd	r24, Y+5	; 0x05
    5c82:	9e 81       	ldd	r25, Y+6	; 0x06
    5c84:	9a 83       	std	Y+2, r25	; 0x02
    5c86:	89 83       	std	Y+1, r24	; 0x01
    5c88:	89 81       	ldd	r24, Y+1	; 0x01
    5c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c8c:	01 97       	sbiw	r24, 0x01	; 1
    5c8e:	f1 f7       	brne	.-4      	; 0x5c8c <main+0x19a>
    5c90:	9a 83       	std	Y+2, r25	; 0x02
    5c92:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		MADC_voidStartConversion(CHANNEL_0);
    5c94:	80 e0       	ldi	r24, 0x00	; 0
    5c96:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <MADC_voidStartConversion>
    5c9a:	88 cf       	rjmp	.-240    	; 0x5bac <main+0xba>

00005c9c <Reseive_Uart>:
u8 WelcomeMass[]="WELCOME";
static u8 Select=0;
static u8 flag=0;
static u16 Counts=0;
void Reseive_Uart(void)
{
    5c9c:	df 93       	push	r29
    5c9e:	cf 93       	push	r28
    5ca0:	cd b7       	in	r28, 0x3d	; 61
    5ca2:	de b7       	in	r29, 0x3e	; 62
    5ca4:	60 97       	sbiw	r28, 0x10	; 16
    5ca6:	0f b6       	in	r0, 0x3f	; 63
    5ca8:	f8 94       	cli
    5caa:	de bf       	out	0x3e, r29	; 62
    5cac:	0f be       	out	0x3f, r0	; 63
    5cae:	cd bf       	out	0x3d, r28	; 61
	u8 Flag=1,Data;
    5cb0:	81 e0       	ldi	r24, 0x01	; 1
    5cb2:	88 8b       	std	Y+16, r24	; 0x10
	MUART_voidInit();
    5cb4:	0e 94 01 0c 	call	0x1802	; 0x1802 <MUART_voidInit>
	HLCD_voidClrScreen();
    5cb8:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <HLCD_voidClrScreen>
    5cbc:	84 c0       	rjmp	.+264    	; 0x5dc6 <Reseive_Uart+0x12a>
	while (Flag==1)
	{
		Data=MUART_u8ReceiveData();
    5cbe:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <MUART_u8ReceiveData>
    5cc2:	8f 87       	std	Y+15, r24	; 0x0f
		if (Data=='A')
    5cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cc6:	81 34       	cpi	r24, 0x41	; 65
    5cc8:	09 f0       	breq	.+2      	; 0x5ccc <Reseive_Uart+0x30>
    5cca:	7d c0       	rjmp	.+250    	; 0x5dc6 <Reseive_Uart+0x12a>
		{
			Flag=0;
    5ccc:	18 8a       	std	Y+16, r1	; 0x10
			HLCD_voidMovCursor(1,5);
    5cce:	81 e0       	ldi	r24, 0x01	; 1
    5cd0:	65 e0       	ldi	r22, 0x05	; 5
    5cd2:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
			HLCD_voidDispStr( WelcomeMass);
    5cd6:	8c e9       	ldi	r24, 0x9C	; 156
    5cd8:	91 e0       	ldi	r25, 0x01	; 1
    5cda:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
    5cde:	80 e0       	ldi	r24, 0x00	; 0
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	aa e7       	ldi	r26, 0x7A	; 122
    5ce4:	b4 e4       	ldi	r27, 0x44	; 68
    5ce6:	8b 87       	std	Y+11, r24	; 0x0b
    5ce8:	9c 87       	std	Y+12, r25	; 0x0c
    5cea:	ad 87       	std	Y+13, r26	; 0x0d
    5cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cf6:	20 e0       	ldi	r18, 0x00	; 0
    5cf8:	30 e0       	ldi	r19, 0x00	; 0
    5cfa:	4a ef       	ldi	r20, 0xFA	; 250
    5cfc:	54 e4       	ldi	r21, 0x44	; 68
    5cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d02:	dc 01       	movw	r26, r24
    5d04:	cb 01       	movw	r24, r22
    5d06:	8f 83       	std	Y+7, r24	; 0x07
    5d08:	98 87       	std	Y+8, r25	; 0x08
    5d0a:	a9 87       	std	Y+9, r26	; 0x09
    5d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    5d10:	78 85       	ldd	r23, Y+8	; 0x08
    5d12:	89 85       	ldd	r24, Y+9	; 0x09
    5d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d16:	20 e0       	ldi	r18, 0x00	; 0
    5d18:	30 e0       	ldi	r19, 0x00	; 0
    5d1a:	40 e8       	ldi	r20, 0x80	; 128
    5d1c:	5f e3       	ldi	r21, 0x3F	; 63
    5d1e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5d22:	88 23       	and	r24, r24
    5d24:	2c f4       	brge	.+10     	; 0x5d30 <Reseive_Uart+0x94>
		__ticks = 1;
    5d26:	81 e0       	ldi	r24, 0x01	; 1
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	9e 83       	std	Y+6, r25	; 0x06
    5d2c:	8d 83       	std	Y+5, r24	; 0x05
    5d2e:	3f c0       	rjmp	.+126    	; 0x5dae <Reseive_Uart+0x112>
	else if (__tmp > 65535)
    5d30:	6f 81       	ldd	r22, Y+7	; 0x07
    5d32:	78 85       	ldd	r23, Y+8	; 0x08
    5d34:	89 85       	ldd	r24, Y+9	; 0x09
    5d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d38:	20 e0       	ldi	r18, 0x00	; 0
    5d3a:	3f ef       	ldi	r19, 0xFF	; 255
    5d3c:	4f e7       	ldi	r20, 0x7F	; 127
    5d3e:	57 e4       	ldi	r21, 0x47	; 71
    5d40:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5d44:	18 16       	cp	r1, r24
    5d46:	4c f5       	brge	.+82     	; 0x5d9a <Reseive_Uart+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d50:	20 e0       	ldi	r18, 0x00	; 0
    5d52:	30 e0       	ldi	r19, 0x00	; 0
    5d54:	40 e2       	ldi	r20, 0x20	; 32
    5d56:	51 e4       	ldi	r21, 0x41	; 65
    5d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d5c:	dc 01       	movw	r26, r24
    5d5e:	cb 01       	movw	r24, r22
    5d60:	bc 01       	movw	r22, r24
    5d62:	cd 01       	movw	r24, r26
    5d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d68:	dc 01       	movw	r26, r24
    5d6a:	cb 01       	movw	r24, r22
    5d6c:	9e 83       	std	Y+6, r25	; 0x06
    5d6e:	8d 83       	std	Y+5, r24	; 0x05
    5d70:	0f c0       	rjmp	.+30     	; 0x5d90 <Reseive_Uart+0xf4>
    5d72:	88 ec       	ldi	r24, 0xC8	; 200
    5d74:	90 e0       	ldi	r25, 0x00	; 0
    5d76:	9c 83       	std	Y+4, r25	; 0x04
    5d78:	8b 83       	std	Y+3, r24	; 0x03
    5d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    5d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    5d7e:	01 97       	sbiw	r24, 0x01	; 1
    5d80:	f1 f7       	brne	.-4      	; 0x5d7e <Reseive_Uart+0xe2>
    5d82:	9c 83       	std	Y+4, r25	; 0x04
    5d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d86:	8d 81       	ldd	r24, Y+5	; 0x05
    5d88:	9e 81       	ldd	r25, Y+6	; 0x06
    5d8a:	01 97       	sbiw	r24, 0x01	; 1
    5d8c:	9e 83       	std	Y+6, r25	; 0x06
    5d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d90:	8d 81       	ldd	r24, Y+5	; 0x05
    5d92:	9e 81       	ldd	r25, Y+6	; 0x06
    5d94:	00 97       	sbiw	r24, 0x00	; 0
    5d96:	69 f7       	brne	.-38     	; 0x5d72 <Reseive_Uart+0xd6>
    5d98:	14 c0       	rjmp	.+40     	; 0x5dc2 <Reseive_Uart+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    5d9c:	78 85       	ldd	r23, Y+8	; 0x08
    5d9e:	89 85       	ldd	r24, Y+9	; 0x09
    5da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5da6:	dc 01       	movw	r26, r24
    5da8:	cb 01       	movw	r24, r22
    5daa:	9e 83       	std	Y+6, r25	; 0x06
    5dac:	8d 83       	std	Y+5, r24	; 0x05
    5dae:	8d 81       	ldd	r24, Y+5	; 0x05
    5db0:	9e 81       	ldd	r25, Y+6	; 0x06
    5db2:	9a 83       	std	Y+2, r25	; 0x02
    5db4:	89 83       	std	Y+1, r24	; 0x01
    5db6:	89 81       	ldd	r24, Y+1	; 0x01
    5db8:	9a 81       	ldd	r25, Y+2	; 0x02
    5dba:	01 97       	sbiw	r24, 0x01	; 1
    5dbc:	f1 f7       	brne	.-4      	; 0x5dba <Reseive_Uart+0x11e>
    5dbe:	9a 83       	std	Y+2, r25	; 0x02
    5dc0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			HLCD_voidClrScreen();
    5dc2:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <HLCD_voidClrScreen>
void Reseive_Uart(void)
{
	u8 Flag=1,Data;
	MUART_voidInit();
	HLCD_voidClrScreen();
	while (Flag==1)
    5dc6:	88 89       	ldd	r24, Y+16	; 0x10
    5dc8:	81 30       	cpi	r24, 0x01	; 1
    5dca:	09 f4       	brne	.+2      	; 0x5dce <Reseive_Uart+0x132>
    5dcc:	78 cf       	rjmp	.-272    	; 0x5cbe <Reseive_Uart+0x22>
			HLCD_voidDispStr( WelcomeMass);
			_delay_ms(1000);
			HLCD_voidClrScreen();
		}
	}
}
    5dce:	60 96       	adiw	r28, 0x10	; 16
    5dd0:	0f b6       	in	r0, 0x3f	; 63
    5dd2:	f8 94       	cli
    5dd4:	de bf       	out	0x3e, r29	; 62
    5dd6:	0f be       	out	0x3f, r0	; 63
    5dd8:	cd bf       	out	0x3d, r28	; 61
    5dda:	cf 91       	pop	r28
    5ddc:	df 91       	pop	r29
    5dde:	08 95       	ret

00005de0 <Select_GearBox>:

void Select_GearBox(void)
{
    5de0:	df 93       	push	r29
    5de2:	cf 93       	push	r28
    5de4:	00 d0       	rcall	.+0      	; 0x5de6 <Select_GearBox+0x6>
    5de6:	cd b7       	in	r28, 0x3d	; 61
    5de8:	de b7       	in	r29, 0x3e	; 62
	Select=(Select+1)%4;
    5dea:	80 91 f6 01 	lds	r24, 0x01F6
    5dee:	88 2f       	mov	r24, r24
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	01 96       	adiw	r24, 0x01	; 1
    5df4:	24 e0       	ldi	r18, 0x04	; 4
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	b9 01       	movw	r22, r18
    5dfa:	0e 94 db 32 	call	0x65b6	; 0x65b6 <__divmodhi4>
    5dfe:	80 93 f6 01 	sts	0x01F6, r24
	switch (Select)
    5e02:	80 91 f6 01 	lds	r24, 0x01F6
    5e06:	28 2f       	mov	r18, r24
    5e08:	30 e0       	ldi	r19, 0x00	; 0
    5e0a:	3a 83       	std	Y+2, r19	; 0x02
    5e0c:	29 83       	std	Y+1, r18	; 0x01
    5e0e:	89 81       	ldd	r24, Y+1	; 0x01
    5e10:	9a 81       	ldd	r25, Y+2	; 0x02
    5e12:	81 30       	cpi	r24, 0x01	; 1
    5e14:	91 05       	cpc	r25, r1
    5e16:	e9 f0       	breq	.+58     	; 0x5e52 <Select_GearBox+0x72>
    5e18:	29 81       	ldd	r18, Y+1	; 0x01
    5e1a:	3a 81       	ldd	r19, Y+2	; 0x02
    5e1c:	22 30       	cpi	r18, 0x02	; 2
    5e1e:	31 05       	cpc	r19, r1
    5e20:	2c f4       	brge	.+10     	; 0x5e2c <Select_GearBox+0x4c>
    5e22:	89 81       	ldd	r24, Y+1	; 0x01
    5e24:	9a 81       	ldd	r25, Y+2	; 0x02
    5e26:	00 97       	sbiw	r24, 0x00	; 0
    5e28:	61 f0       	breq	.+24     	; 0x5e42 <Select_GearBox+0x62>
    5e2a:	2a c0       	rjmp	.+84     	; 0x5e80 <Select_GearBox+0xa0>
    5e2c:	29 81       	ldd	r18, Y+1	; 0x01
    5e2e:	3a 81       	ldd	r19, Y+2	; 0x02
    5e30:	22 30       	cpi	r18, 0x02	; 2
    5e32:	31 05       	cpc	r19, r1
    5e34:	b1 f0       	breq	.+44     	; 0x5e62 <Select_GearBox+0x82>
    5e36:	89 81       	ldd	r24, Y+1	; 0x01
    5e38:	9a 81       	ldd	r25, Y+2	; 0x02
    5e3a:	83 30       	cpi	r24, 0x03	; 3
    5e3c:	91 05       	cpc	r25, r1
    5e3e:	c9 f0       	breq	.+50     	; 0x5e72 <Select_GearBox+0x92>
    5e40:	1f c0       	rjmp	.+62     	; 0x5e80 <Select_GearBox+0xa0>
	{
	case 0: HLCD_voidMovCursor(2,11); HLCD_voidSendData('N'); break;
    5e42:	82 e0       	ldi	r24, 0x02	; 2
    5e44:	6b e0       	ldi	r22, 0x0B	; 11
    5e46:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5e4a:	8e e4       	ldi	r24, 0x4E	; 78
    5e4c:	0e 94 36 29 	call	0x526c	; 0x526c <HLCD_voidSendData>
    5e50:	17 c0       	rjmp	.+46     	; 0x5e80 <Select_GearBox+0xa0>
	case 1: HLCD_voidMovCursor(2,11); HLCD_voidSendData('D'); break;
    5e52:	82 e0       	ldi	r24, 0x02	; 2
    5e54:	6b e0       	ldi	r22, 0x0B	; 11
    5e56:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5e5a:	84 e4       	ldi	r24, 0x44	; 68
    5e5c:	0e 94 36 29 	call	0x526c	; 0x526c <HLCD_voidSendData>
    5e60:	0f c0       	rjmp	.+30     	; 0x5e80 <Select_GearBox+0xa0>
	case 2: HLCD_voidMovCursor(2,11); HLCD_voidSendData('P'); break;
    5e62:	82 e0       	ldi	r24, 0x02	; 2
    5e64:	6b e0       	ldi	r22, 0x0B	; 11
    5e66:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5e6a:	80 e5       	ldi	r24, 0x50	; 80
    5e6c:	0e 94 36 29 	call	0x526c	; 0x526c <HLCD_voidSendData>
    5e70:	07 c0       	rjmp	.+14     	; 0x5e80 <Select_GearBox+0xa0>
	case 3: HLCD_voidMovCursor(2,11); HLCD_voidSendData('R'); break;
    5e72:	82 e0       	ldi	r24, 0x02	; 2
    5e74:	6b e0       	ldi	r22, 0x0B	; 11
    5e76:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5e7a:	82 e5       	ldi	r24, 0x52	; 82
    5e7c:	0e 94 36 29 	call	0x526c	; 0x526c <HLCD_voidSendData>
	}
	clearCount();
    5e80:	0e 94 9d 32 	call	0x653a	; 0x653a <clearCount>
}
    5e84:	0f 90       	pop	r0
    5e86:	0f 90       	pop	r0
    5e88:	cf 91       	pop	r28
    5e8a:	df 91       	pop	r29
    5e8c:	08 95       	ret

00005e8e <DesplayLCD>:

void DesplayLCD(void)
{
    5e8e:	df 93       	push	r29
    5e90:	cf 93       	push	r28
    5e92:	cd b7       	in	r28, 0x3d	; 61
    5e94:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidMovCursor(1,1); HLCD_voidDispStr("BAS:OFF");
    5e96:	81 e0       	ldi	r24, 0x01	; 1
    5e98:	61 e0       	ldi	r22, 0x01	; 1
    5e9a:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5e9e:	8e e6       	ldi	r24, 0x6E	; 110
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
	HLCD_voidMovCursor(2,1); HLCD_voidDispStr("CCS:OFF");
    5ea6:	82 e0       	ldi	r24, 0x02	; 2
    5ea8:	61 e0       	ldi	r22, 0x01	; 1
    5eaa:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5eae:	86 e7       	ldi	r24, 0x76	; 118
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
	HLCD_voidMovCursor(1,9); HLCD_voidDispStr("SL:OFF");
    5eb6:	81 e0       	ldi	r24, 0x01	; 1
    5eb8:	69 e0       	ldi	r22, 0x09	; 9
    5eba:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5ebe:	8e e7       	ldi	r24, 0x7E	; 126
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
	HLCD_voidMovCursor(2,9); HLCD_voidDispStr("G:N");
    5ec6:	82 e0       	ldi	r24, 0x02	; 2
    5ec8:	69 e0       	ldi	r22, 0x09	; 9
    5eca:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5ece:	85 e8       	ldi	r24, 0x85	; 133
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
	HLCD_voidMovCursor(2,15); HLCD_voidDispStr("KM");
    5ed6:	82 e0       	ldi	r24, 0x02	; 2
    5ed8:	6f e0       	ldi	r22, 0x0F	; 15
    5eda:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5ede:	89 e8       	ldi	r24, 0x89	; 137
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
}
    5ee6:	cf 91       	pop	r28
    5ee8:	df 91       	pop	r29
    5eea:	08 95       	ret

00005eec <BAS_System>:

void BAS_System(void)
{
    5eec:	df 93       	push	r29
    5eee:	cf 93       	push	r28
    5ef0:	cd b7       	in	r28, 0x3d	; 61
    5ef2:	de b7       	in	r29, 0x3e	; 62


	static u8 change =0;
	if((Select==1)&&(change==0))
    5ef4:	80 91 f6 01 	lds	r24, 0x01F6
    5ef8:	81 30       	cpi	r24, 0x01	; 1
    5efa:	a1 f4       	brne	.+40     	; 0x5f24 <BAS_System+0x38>
    5efc:	80 91 fa 01 	lds	r24, 0x01FA
    5f00:	88 23       	and	r24, r24
    5f02:	81 f4       	brne	.+32     	; 0x5f24 <BAS_System+0x38>
	{
		HLCD_voidMovCursor(1,5); HLCD_voidDispStr("ON ");
    5f04:	81 e0       	ldi	r24, 0x01	; 1
    5f06:	65 e0       	ldi	r22, 0x05	; 5
    5f08:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5f0c:	8c e8       	ldi	r24, 0x8C	; 140
    5f0e:	90 e0       	ldi	r25, 0x00	; 0
    5f10:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
		change=1;
    5f14:	81 e0       	ldi	r24, 0x01	; 1
    5f16:	80 93 fa 01 	sts	0x01FA, r24
		MDIO_voidSetPinVal(DIO_PORTB,DIO_PIN4);
    5f1a:	82 e0       	ldi	r24, 0x02	; 2
    5f1c:	64 e0       	ldi	r22, 0x04	; 4
    5f1e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    5f22:	1e c0       	rjmp	.+60     	; 0x5f60 <BAS_System+0x74>
		//Ultrasonic_Action();
	}
	else if ((Select!=1)&&(change==1))
    5f24:	80 91 f6 01 	lds	r24, 0x01F6
    5f28:	81 30       	cpi	r24, 0x01	; 1
    5f2a:	a1 f0       	breq	.+40     	; 0x5f54 <BAS_System+0x68>
    5f2c:	80 91 fa 01 	lds	r24, 0x01FA
    5f30:	81 30       	cpi	r24, 0x01	; 1
    5f32:	81 f4       	brne	.+32     	; 0x5f54 <BAS_System+0x68>
	{
		HLCD_voidMovCursor(1,5); HLCD_voidDispStr("OFF");
    5f34:	81 e0       	ldi	r24, 0x01	; 1
    5f36:	65 e0       	ldi	r22, 0x05	; 5
    5f38:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    5f3c:	80 e9       	ldi	r24, 0x90	; 144
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
		change=2;
    5f44:	82 e0       	ldi	r24, 0x02	; 2
    5f46:	80 93 fa 01 	sts	0x01FA, r24
		MDIO_voidClrPinVal(DIO_PORTB,DIO_PIN4);
    5f4a:	82 e0       	ldi	r24, 0x02	; 2
    5f4c:	64 e0       	ldi	r22, 0x04	; 4
    5f4e:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    5f52:	06 c0       	rjmp	.+12     	; 0x5f60 <BAS_System+0x74>
	}
	else if ((Select==3))
    5f54:	80 91 f6 01 	lds	r24, 0x01F6
    5f58:	83 30       	cpi	r24, 0x03	; 3
    5f5a:	11 f4       	brne	.+4      	; 0x5f60 <BAS_System+0x74>
	{
		change =0;
    5f5c:	10 92 fa 01 	sts	0x01FA, r1
	}




}
    5f60:	cf 91       	pop	r28
    5f62:	df 91       	pop	r29
    5f64:	08 95       	ret

00005f66 <Ultrasonic_Action>:

void Ultrasonic_Action(void)
{
    5f66:	df 93       	push	r29
    5f68:	cf 93       	push	r28
    5f6a:	cd b7       	in	r28, 0x3d	; 61
    5f6c:	de b7       	in	r29, 0x3e	; 62
    5f6e:	6e 97       	sbiw	r28, 0x1e	; 30
    5f70:	0f b6       	in	r0, 0x3f	; 63
    5f72:	f8 94       	cli
    5f74:	de bf       	out	0x3e, r29	; 62
    5f76:	0f be       	out	0x3f, r0	; 63
    5f78:	cd bf       	out	0x3d, r28	; 61

	u16 distance=0;
    5f7a:	1e 8e       	std	Y+30, r1	; 0x1e
    5f7c:	1d 8e       	std	Y+29, r1	; 0x1d
	if (Select==1)
    5f7e:	80 91 f6 01 	lds	r24, 0x01F6
    5f82:	81 30       	cpi	r24, 0x01	; 1
    5f84:	09 f0       	breq	.+2      	; 0x5f88 <Ultrasonic_Action+0x22>
    5f86:	18 c1       	rjmp	.+560    	; 0x61b8 <Ultrasonic_Action+0x252>
	{
	distance=HUltrasonic_u16CalcDistance();
    5f88:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <HUltrasonic_u16CalcDistance>
    5f8c:	9e 8f       	std	Y+30, r25	; 0x1e
    5f8e:	8d 8f       	std	Y+29, r24	; 0x1d
	if(distance > 10 )
    5f90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5f94:	8b 30       	cpi	r24, 0x0B	; 11
    5f96:	91 05       	cpc	r25, r1
    5f98:	38 f0       	brcs	.+14     	; 0x5fa8 <Ultrasonic_Action+0x42>
	{
		flag=0;
    5f9a:	10 92 f7 01 	sts	0x01F7, r1
		MDIO_voidClrPinVal(DIO_PORTB,DIO_PIN4);
    5f9e:	82 e0       	ldi	r24, 0x02	; 2
    5fa0:	64 e0       	ldi	r22, 0x04	; 4
    5fa2:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    5fa6:	0c c1       	rjmp	.+536    	; 0x61c0 <Ultrasonic_Action+0x25a>
	}
	else if ((distance <= 10 ) && (distance >= 5))
    5fa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5faa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5fac:	8b 30       	cpi	r24, 0x0B	; 11
    5fae:	91 05       	cpc	r25, r1
    5fb0:	08 f0       	brcs	.+2      	; 0x5fb4 <Ultrasonic_Action+0x4e>
    5fb2:	f6 c0       	rjmp	.+492    	; 0x61a0 <Ultrasonic_Action+0x23a>
    5fb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5fb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5fb8:	85 30       	cpi	r24, 0x05	; 5
    5fba:	91 05       	cpc	r25, r1
    5fbc:	08 f4       	brcc	.+2      	; 0x5fc0 <Ultrasonic_Action+0x5a>
    5fbe:	f0 c0       	rjmp	.+480    	; 0x61a0 <Ultrasonic_Action+0x23a>
	{

		flag=1;
    5fc0:	81 e0       	ldi	r24, 0x01	; 1
    5fc2:	80 93 f7 01 	sts	0x01F7, r24
		MDIO_voidSetPinVal(DIO_PORTB,DIO_PIN4);
    5fc6:	82 e0       	ldi	r24, 0x02	; 2
    5fc8:	64 e0       	ldi	r22, 0x04	; 4
    5fca:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    5fce:	80 e0       	ldi	r24, 0x00	; 0
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	a6 e9       	ldi	r26, 0x96	; 150
    5fd4:	b3 e4       	ldi	r27, 0x43	; 67
    5fd6:	89 8f       	std	Y+25, r24	; 0x19
    5fd8:	9a 8f       	std	Y+26, r25	; 0x1a
    5fda:	ab 8f       	std	Y+27, r26	; 0x1b
    5fdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fde:	69 8d       	ldd	r22, Y+25	; 0x19
    5fe0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5fe6:	20 e0       	ldi	r18, 0x00	; 0
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	4a ef       	ldi	r20, 0xFA	; 250
    5fec:	54 e4       	ldi	r21, 0x44	; 68
    5fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ff2:	dc 01       	movw	r26, r24
    5ff4:	cb 01       	movw	r24, r22
    5ff6:	8d 8b       	std	Y+21, r24	; 0x15
    5ff8:	9e 8b       	std	Y+22, r25	; 0x16
    5ffa:	af 8b       	std	Y+23, r26	; 0x17
    5ffc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    6000:	7e 89       	ldd	r23, Y+22	; 0x16
    6002:	8f 89       	ldd	r24, Y+23	; 0x17
    6004:	98 8d       	ldd	r25, Y+24	; 0x18
    6006:	20 e0       	ldi	r18, 0x00	; 0
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	40 e8       	ldi	r20, 0x80	; 128
    600c:	5f e3       	ldi	r21, 0x3F	; 63
    600e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6012:	88 23       	and	r24, r24
    6014:	2c f4       	brge	.+10     	; 0x6020 <Ultrasonic_Action+0xba>
		__ticks = 1;
    6016:	81 e0       	ldi	r24, 0x01	; 1
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	9c 8b       	std	Y+20, r25	; 0x14
    601c:	8b 8b       	std	Y+19, r24	; 0x13
    601e:	3f c0       	rjmp	.+126    	; 0x609e <Ultrasonic_Action+0x138>
	else if (__tmp > 65535)
    6020:	6d 89       	ldd	r22, Y+21	; 0x15
    6022:	7e 89       	ldd	r23, Y+22	; 0x16
    6024:	8f 89       	ldd	r24, Y+23	; 0x17
    6026:	98 8d       	ldd	r25, Y+24	; 0x18
    6028:	20 e0       	ldi	r18, 0x00	; 0
    602a:	3f ef       	ldi	r19, 0xFF	; 255
    602c:	4f e7       	ldi	r20, 0x7F	; 127
    602e:	57 e4       	ldi	r21, 0x47	; 71
    6030:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6034:	18 16       	cp	r1, r24
    6036:	4c f5       	brge	.+82     	; 0x608a <Ultrasonic_Action+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6038:	69 8d       	ldd	r22, Y+25	; 0x19
    603a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    603c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    603e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6040:	20 e0       	ldi	r18, 0x00	; 0
    6042:	30 e0       	ldi	r19, 0x00	; 0
    6044:	40 e2       	ldi	r20, 0x20	; 32
    6046:	51 e4       	ldi	r21, 0x41	; 65
    6048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    604c:	dc 01       	movw	r26, r24
    604e:	cb 01       	movw	r24, r22
    6050:	bc 01       	movw	r22, r24
    6052:	cd 01       	movw	r24, r26
    6054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6058:	dc 01       	movw	r26, r24
    605a:	cb 01       	movw	r24, r22
    605c:	9c 8b       	std	Y+20, r25	; 0x14
    605e:	8b 8b       	std	Y+19, r24	; 0x13
    6060:	0f c0       	rjmp	.+30     	; 0x6080 <Ultrasonic_Action+0x11a>
    6062:	88 ec       	ldi	r24, 0xC8	; 200
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	9a 8b       	std	Y+18, r25	; 0x12
    6068:	89 8b       	std	Y+17, r24	; 0x11
    606a:	89 89       	ldd	r24, Y+17	; 0x11
    606c:	9a 89       	ldd	r25, Y+18	; 0x12
    606e:	01 97       	sbiw	r24, 0x01	; 1
    6070:	f1 f7       	brne	.-4      	; 0x606e <Ultrasonic_Action+0x108>
    6072:	9a 8b       	std	Y+18, r25	; 0x12
    6074:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6076:	8b 89       	ldd	r24, Y+19	; 0x13
    6078:	9c 89       	ldd	r25, Y+20	; 0x14
    607a:	01 97       	sbiw	r24, 0x01	; 1
    607c:	9c 8b       	std	Y+20, r25	; 0x14
    607e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6080:	8b 89       	ldd	r24, Y+19	; 0x13
    6082:	9c 89       	ldd	r25, Y+20	; 0x14
    6084:	00 97       	sbiw	r24, 0x00	; 0
    6086:	69 f7       	brne	.-38     	; 0x6062 <Ultrasonic_Action+0xfc>
    6088:	14 c0       	rjmp	.+40     	; 0x60b2 <Ultrasonic_Action+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    608a:	6d 89       	ldd	r22, Y+21	; 0x15
    608c:	7e 89       	ldd	r23, Y+22	; 0x16
    608e:	8f 89       	ldd	r24, Y+23	; 0x17
    6090:	98 8d       	ldd	r25, Y+24	; 0x18
    6092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6096:	dc 01       	movw	r26, r24
    6098:	cb 01       	movw	r24, r22
    609a:	9c 8b       	std	Y+20, r25	; 0x14
    609c:	8b 8b       	std	Y+19, r24	; 0x13
    609e:	8b 89       	ldd	r24, Y+19	; 0x13
    60a0:	9c 89       	ldd	r25, Y+20	; 0x14
    60a2:	98 8b       	std	Y+16, r25	; 0x10
    60a4:	8f 87       	std	Y+15, r24	; 0x0f
    60a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    60a8:	98 89       	ldd	r25, Y+16	; 0x10
    60aa:	01 97       	sbiw	r24, 0x01	; 1
    60ac:	f1 f7       	brne	.-4      	; 0x60aa <Ultrasonic_Action+0x144>
    60ae:	98 8b       	std	Y+16, r25	; 0x10
    60b0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		MDIO_voidClrPinVal(DIO_PORTB,DIO_PIN4);
    60b2:	82 e0       	ldi	r24, 0x02	; 2
    60b4:	64 e0       	ldi	r22, 0x04	; 4
    60b6:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    60ba:	80 e0       	ldi	r24, 0x00	; 0
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	a6 e9       	ldi	r26, 0x96	; 150
    60c0:	b3 e4       	ldi	r27, 0x43	; 67
    60c2:	8b 87       	std	Y+11, r24	; 0x0b
    60c4:	9c 87       	std	Y+12, r25	; 0x0c
    60c6:	ad 87       	std	Y+13, r26	; 0x0d
    60c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    60cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    60ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    60d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	4a ef       	ldi	r20, 0xFA	; 250
    60d8:	54 e4       	ldi	r21, 0x44	; 68
    60da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60de:	dc 01       	movw	r26, r24
    60e0:	cb 01       	movw	r24, r22
    60e2:	8f 83       	std	Y+7, r24	; 0x07
    60e4:	98 87       	std	Y+8, r25	; 0x08
    60e6:	a9 87       	std	Y+9, r26	; 0x09
    60e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    60ea:	6f 81       	ldd	r22, Y+7	; 0x07
    60ec:	78 85       	ldd	r23, Y+8	; 0x08
    60ee:	89 85       	ldd	r24, Y+9	; 0x09
    60f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    60f2:	20 e0       	ldi	r18, 0x00	; 0
    60f4:	30 e0       	ldi	r19, 0x00	; 0
    60f6:	40 e8       	ldi	r20, 0x80	; 128
    60f8:	5f e3       	ldi	r21, 0x3F	; 63
    60fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    60fe:	88 23       	and	r24, r24
    6100:	2c f4       	brge	.+10     	; 0x610c <Ultrasonic_Action+0x1a6>
		__ticks = 1;
    6102:	81 e0       	ldi	r24, 0x01	; 1
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	9e 83       	std	Y+6, r25	; 0x06
    6108:	8d 83       	std	Y+5, r24	; 0x05
    610a:	3f c0       	rjmp	.+126    	; 0x618a <Ultrasonic_Action+0x224>
	else if (__tmp > 65535)
    610c:	6f 81       	ldd	r22, Y+7	; 0x07
    610e:	78 85       	ldd	r23, Y+8	; 0x08
    6110:	89 85       	ldd	r24, Y+9	; 0x09
    6112:	9a 85       	ldd	r25, Y+10	; 0x0a
    6114:	20 e0       	ldi	r18, 0x00	; 0
    6116:	3f ef       	ldi	r19, 0xFF	; 255
    6118:	4f e7       	ldi	r20, 0x7F	; 127
    611a:	57 e4       	ldi	r21, 0x47	; 71
    611c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6120:	18 16       	cp	r1, r24
    6122:	4c f5       	brge	.+82     	; 0x6176 <Ultrasonic_Action+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6124:	6b 85       	ldd	r22, Y+11	; 0x0b
    6126:	7c 85       	ldd	r23, Y+12	; 0x0c
    6128:	8d 85       	ldd	r24, Y+13	; 0x0d
    612a:	9e 85       	ldd	r25, Y+14	; 0x0e
    612c:	20 e0       	ldi	r18, 0x00	; 0
    612e:	30 e0       	ldi	r19, 0x00	; 0
    6130:	40 e2       	ldi	r20, 0x20	; 32
    6132:	51 e4       	ldi	r21, 0x41	; 65
    6134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6138:	dc 01       	movw	r26, r24
    613a:	cb 01       	movw	r24, r22
    613c:	bc 01       	movw	r22, r24
    613e:	cd 01       	movw	r24, r26
    6140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6144:	dc 01       	movw	r26, r24
    6146:	cb 01       	movw	r24, r22
    6148:	9e 83       	std	Y+6, r25	; 0x06
    614a:	8d 83       	std	Y+5, r24	; 0x05
    614c:	0f c0       	rjmp	.+30     	; 0x616c <Ultrasonic_Action+0x206>
    614e:	88 ec       	ldi	r24, 0xC8	; 200
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	9c 83       	std	Y+4, r25	; 0x04
    6154:	8b 83       	std	Y+3, r24	; 0x03
    6156:	8b 81       	ldd	r24, Y+3	; 0x03
    6158:	9c 81       	ldd	r25, Y+4	; 0x04
    615a:	01 97       	sbiw	r24, 0x01	; 1
    615c:	f1 f7       	brne	.-4      	; 0x615a <Ultrasonic_Action+0x1f4>
    615e:	9c 83       	std	Y+4, r25	; 0x04
    6160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6162:	8d 81       	ldd	r24, Y+5	; 0x05
    6164:	9e 81       	ldd	r25, Y+6	; 0x06
    6166:	01 97       	sbiw	r24, 0x01	; 1
    6168:	9e 83       	std	Y+6, r25	; 0x06
    616a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    616c:	8d 81       	ldd	r24, Y+5	; 0x05
    616e:	9e 81       	ldd	r25, Y+6	; 0x06
    6170:	00 97       	sbiw	r24, 0x00	; 0
    6172:	69 f7       	brne	.-38     	; 0x614e <Ultrasonic_Action+0x1e8>
    6174:	25 c0       	rjmp	.+74     	; 0x61c0 <Ultrasonic_Action+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6176:	6f 81       	ldd	r22, Y+7	; 0x07
    6178:	78 85       	ldd	r23, Y+8	; 0x08
    617a:	89 85       	ldd	r24, Y+9	; 0x09
    617c:	9a 85       	ldd	r25, Y+10	; 0x0a
    617e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6182:	dc 01       	movw	r26, r24
    6184:	cb 01       	movw	r24, r22
    6186:	9e 83       	std	Y+6, r25	; 0x06
    6188:	8d 83       	std	Y+5, r24	; 0x05
    618a:	8d 81       	ldd	r24, Y+5	; 0x05
    618c:	9e 81       	ldd	r25, Y+6	; 0x06
    618e:	9a 83       	std	Y+2, r25	; 0x02
    6190:	89 83       	std	Y+1, r24	; 0x01
    6192:	89 81       	ldd	r24, Y+1	; 0x01
    6194:	9a 81       	ldd	r25, Y+2	; 0x02
    6196:	01 97       	sbiw	r24, 0x01	; 1
    6198:	f1 f7       	brne	.-4      	; 0x6196 <Ultrasonic_Action+0x230>
    619a:	9a 83       	std	Y+2, r25	; 0x02
    619c:	89 83       	std	Y+1, r24	; 0x01
    619e:	10 c0       	rjmp	.+32     	; 0x61c0 <Ultrasonic_Action+0x25a>
		_delay_ms(300);

	}
	else if (distance < 5)
    61a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    61a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    61a4:	85 30       	cpi	r24, 0x05	; 5
    61a6:	91 05       	cpc	r25, r1
    61a8:	58 f4       	brcc	.+22     	; 0x61c0 <Ultrasonic_Action+0x25a>
	{
		flag=0;
    61aa:	10 92 f7 01 	sts	0x01F7, r1
		MDIO_voidSetPinVal(DIO_PORTB,DIO_PIN4);
    61ae:	82 e0       	ldi	r24, 0x02	; 2
    61b0:	64 e0       	ldi	r22, 0x04	; 4
    61b2:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    61b6:	04 c0       	rjmp	.+8      	; 0x61c0 <Ultrasonic_Action+0x25a>
	}
	}
	else
	{
	MDIO_voidClrPinVal(DIO_PORTB,DIO_PIN4);
    61b8:	82 e0       	ldi	r24, 0x02	; 2
    61ba:	64 e0       	ldi	r22, 0x04	; 4
    61bc:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
	}



}
    61c0:	6e 96       	adiw	r28, 0x1e	; 30
    61c2:	0f b6       	in	r0, 0x3f	; 63
    61c4:	f8 94       	cli
    61c6:	de bf       	out	0x3e, r29	; 62
    61c8:	0f be       	out	0x3f, r0	; 63
    61ca:	cd bf       	out	0x3d, r28	; 61
    61cc:	cf 91       	pop	r28
    61ce:	df 91       	pop	r29
    61d0:	08 95       	ret

000061d2 <SL>:

void SL(void)
{
    61d2:	df 93       	push	r29
    61d4:	cf 93       	push	r28
    61d6:	cd b7       	in	r28, 0x3d	; 61
    61d8:	de b7       	in	r29, 0x3e	; 62
	static u8 Change=0;

	if((Select==1)&&(Change==0))
    61da:	80 91 f6 01 	lds	r24, 0x01F6
    61de:	81 30       	cpi	r24, 0x01	; 1
    61e0:	a1 f4       	brne	.+40     	; 0x620a <SL+0x38>
    61e2:	80 91 fb 01 	lds	r24, 0x01FB
    61e6:	88 23       	and	r24, r24
    61e8:	81 f4       	brne	.+32     	; 0x620a <SL+0x38>
		{
			HLCD_voidMovCursor(1,12); HLCD_voidDispStr("ON ");
    61ea:	81 e0       	ldi	r24, 0x01	; 1
    61ec:	6c e0       	ldi	r22, 0x0C	; 12
    61ee:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    61f2:	8c e8       	ldi	r24, 0x8C	; 140
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
			Change=1;
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	80 93 fb 01 	sts	0x01FB, r24
			MDIO_voidSetPinVal(DIO_PORTB,DIO_PIN5);
    6200:	82 e0       	ldi	r24, 0x02	; 2
    6202:	65 e0       	ldi	r22, 0x05	; 5
    6204:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    6208:	1e c0       	rjmp	.+60     	; 0x6246 <SL+0x74>
		}
		else if ((Select!=1)&&(Change==1))
    620a:	80 91 f6 01 	lds	r24, 0x01F6
    620e:	81 30       	cpi	r24, 0x01	; 1
    6210:	a1 f0       	breq	.+40     	; 0x623a <SL+0x68>
    6212:	80 91 fb 01 	lds	r24, 0x01FB
    6216:	81 30       	cpi	r24, 0x01	; 1
    6218:	81 f4       	brne	.+32     	; 0x623a <SL+0x68>
		{
			HLCD_voidMovCursor(1,12); HLCD_voidDispStr("OFF");
    621a:	81 e0       	ldi	r24, 0x01	; 1
    621c:	6c e0       	ldi	r22, 0x0C	; 12
    621e:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    6222:	80 e9       	ldi	r24, 0x90	; 144
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
			MDIO_voidClrPinVal(DIO_PORTB,DIO_PIN5);
    622a:	82 e0       	ldi	r24, 0x02	; 2
    622c:	65 e0       	ldi	r22, 0x05	; 5
    622e:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
			Change=2;
    6232:	82 e0       	ldi	r24, 0x02	; 2
    6234:	80 93 fb 01 	sts	0x01FB, r24
    6238:	06 c0       	rjmp	.+12     	; 0x6246 <SL+0x74>
		}
		else if ((Select==3))
    623a:	80 91 f6 01 	lds	r24, 0x01F6
    623e:	83 30       	cpi	r24, 0x03	; 3
    6240:	11 f4       	brne	.+4      	; 0x6246 <SL+0x74>
		{
			Change =0;
    6242:	10 92 fb 01 	sts	0x01FB, r1
		}
	clearCount();
    6246:	0e 94 9d 32 	call	0x653a	; 0x653a <clearCount>


}
    624a:	cf 91       	pop	r28
    624c:	df 91       	pop	r29
    624e:	08 95       	ret

00006250 <Print_Kilometer>:

void Print_Kilometer(void)
{
    6250:	df 93       	push	r29
    6252:	cf 93       	push	r28
    6254:	00 d0       	rcall	.+0      	; 0x6256 <Print_Kilometer+0x6>
    6256:	cd b7       	in	r28, 0x3d	; 61
    6258:	de b7       	in	r29, 0x3e	; 62
	u16 Gas_Potentiometer_Value;
	Gas_Potentiometer_Value = MADC_u16GetADCData();
    625a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <MADC_u16GetADCData>
    625e:	9a 83       	std	Y+2, r25	; 0x02
    6260:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidMovCursor(2,12);
    6262:	82 e0       	ldi	r24, 0x02	; 2
    6264:	6c e0       	ldi	r22, 0x0C	; 12
    6266:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
	HLCD_voidDispIntNum(Gas_Potentiometer_Value/10);
    626a:	89 81       	ldd	r24, Y+1	; 0x01
    626c:	9a 81       	ldd	r25, Y+2	; 0x02
    626e:	2a e0       	ldi	r18, 0x0A	; 10
    6270:	30 e0       	ldi	r19, 0x00	; 0
    6272:	b9 01       	movw	r22, r18
    6274:	0e 94 c7 32 	call	0x658e	; 0x658e <__udivmodhi4>
    6278:	cb 01       	movw	r24, r22
    627a:	cc 01       	movw	r24, r24
    627c:	a0 e0       	ldi	r26, 0x00	; 0
    627e:	b0 e0       	ldi	r27, 0x00	; 0
    6280:	bc 01       	movw	r22, r24
    6282:	cd 01       	movw	r24, r26
    6284:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <HLCD_voidDispIntNum>
}
    6288:	0f 90       	pop	r0
    628a:	0f 90       	pop	r0
    628c:	cf 91       	pop	r28
    628e:	df 91       	pop	r29
    6290:	08 95       	ret

00006292 <CCS>:

void CCS (void)
{
    6292:	df 93       	push	r29
    6294:	cf 93       	push	r28
    6296:	cd b7       	in	r28, 0x3d	; 61
    6298:	de b7       	in	r29, 0x3e	; 62
	static u8 CHange=0;

		if((Select==1)&&(CHange==0))
    629a:	80 91 f6 01 	lds	r24, 0x01F6
    629e:	81 30       	cpi	r24, 0x01	; 1
    62a0:	a1 f4       	brne	.+40     	; 0x62ca <CCS+0x38>
    62a2:	80 91 fc 01 	lds	r24, 0x01FC
    62a6:	88 23       	and	r24, r24
    62a8:	81 f4       	brne	.+32     	; 0x62ca <CCS+0x38>
			{
				HLCD_voidMovCursor(2,5); HLCD_voidDispStr("ON ");
    62aa:	82 e0       	ldi	r24, 0x02	; 2
    62ac:	65 e0       	ldi	r22, 0x05	; 5
    62ae:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    62b2:	8c e8       	ldi	r24, 0x8C	; 140
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
				CHange=1;
    62ba:	81 e0       	ldi	r24, 0x01	; 1
    62bc:	80 93 fc 01 	sts	0x01FC, r24
				MDIO_voidSetPinVal(DIO_PORTB,DIO_PIN6);
    62c0:	82 e0       	ldi	r24, 0x02	; 2
    62c2:	66 e0       	ldi	r22, 0x06	; 6
    62c4:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    62c8:	1e c0       	rjmp	.+60     	; 0x6306 <CCS+0x74>
			}
			else if ((Select!=1)&&(CHange==1))
    62ca:	80 91 f6 01 	lds	r24, 0x01F6
    62ce:	81 30       	cpi	r24, 0x01	; 1
    62d0:	a1 f0       	breq	.+40     	; 0x62fa <CCS+0x68>
    62d2:	80 91 fc 01 	lds	r24, 0x01FC
    62d6:	81 30       	cpi	r24, 0x01	; 1
    62d8:	81 f4       	brne	.+32     	; 0x62fa <CCS+0x68>
			{
				HLCD_voidMovCursor(2,5); HLCD_voidDispStr("OFF");
    62da:	82 e0       	ldi	r24, 0x02	; 2
    62dc:	65 e0       	ldi	r22, 0x05	; 5
    62de:	0e 94 c9 2c 	call	0x5992	; 0x5992 <HLCD_voidMovCursor>
    62e2:	80 e9       	ldi	r24, 0x90	; 144
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <HLCD_voidDispStr>
				MDIO_voidClrPinVal(DIO_PORTB,DIO_PIN6);
    62ea:	82 e0       	ldi	r24, 0x02	; 2
    62ec:	66 e0       	ldi	r22, 0x06	; 6
    62ee:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
				CHange=2;
    62f2:	82 e0       	ldi	r24, 0x02	; 2
    62f4:	80 93 fc 01 	sts	0x01FC, r24
    62f8:	06 c0       	rjmp	.+12     	; 0x6306 <CCS+0x74>
			}
			else if ((Select==3))
    62fa:	80 91 f6 01 	lds	r24, 0x01F6
    62fe:	83 30       	cpi	r24, 0x03	; 3
    6300:	11 f4       	brne	.+4      	; 0x6306 <CCS+0x74>
			{
				CHange =0;
    6302:	10 92 fc 01 	sts	0x01FC, r1
			}
		clearCount();
    6306:	0e 94 9d 32 	call	0x653a	; 0x653a <clearCount>

}
    630a:	cf 91       	pop	r28
    630c:	df 91       	pop	r29
    630e:	08 95       	ret

00006310 <BAZZER>:

void BAZZER (void)
{
    6310:	df 93       	push	r29
    6312:	cf 93       	push	r28
    6314:	cd b7       	in	r28, 0x3d	; 61
    6316:	de b7       	in	r29, 0x3e	; 62
    6318:	6c 97       	sbiw	r28, 0x1c	; 28
    631a:	0f b6       	in	r0, 0x3f	; 63
    631c:	f8 94       	cli
    631e:	de bf       	out	0x3e, r29	; 62
    6320:	0f be       	out	0x3f, r0	; 63
    6322:	cd bf       	out	0x3d, r28	; 61
	if (Counts==195)
    6324:	80 91 f8 01 	lds	r24, 0x01F8
    6328:	90 91 f9 01 	lds	r25, 0x01F9
    632c:	83 3c       	cpi	r24, 0xC3	; 195
    632e:	91 05       	cpc	r25, r1
    6330:	09 f0       	breq	.+2      	; 0x6334 <BAZZER+0x24>
    6332:	f1 c0       	rjmp	.+482    	; 0x6516 <BAZZER+0x206>
	{
	MDIO_voidSetPinVal(DIO_PORTB,DIO_PIN0);
    6334:	82 e0       	ldi	r24, 0x02	; 2
    6336:	60 e0       	ldi	r22, 0x00	; 0
    6338:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_voidSetPinVal>
    633c:	80 e0       	ldi	r24, 0x00	; 0
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	a6 e9       	ldi	r26, 0x96	; 150
    6342:	b3 e4       	ldi	r27, 0x43	; 67
    6344:	89 8f       	std	Y+25, r24	; 0x19
    6346:	9a 8f       	std	Y+26, r25	; 0x1a
    6348:	ab 8f       	std	Y+27, r26	; 0x1b
    634a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    634c:	69 8d       	ldd	r22, Y+25	; 0x19
    634e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6350:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6352:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6354:	20 e0       	ldi	r18, 0x00	; 0
    6356:	30 e0       	ldi	r19, 0x00	; 0
    6358:	4a ef       	ldi	r20, 0xFA	; 250
    635a:	54 e4       	ldi	r21, 0x44	; 68
    635c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6360:	dc 01       	movw	r26, r24
    6362:	cb 01       	movw	r24, r22
    6364:	8d 8b       	std	Y+21, r24	; 0x15
    6366:	9e 8b       	std	Y+22, r25	; 0x16
    6368:	af 8b       	std	Y+23, r26	; 0x17
    636a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    636c:	6d 89       	ldd	r22, Y+21	; 0x15
    636e:	7e 89       	ldd	r23, Y+22	; 0x16
    6370:	8f 89       	ldd	r24, Y+23	; 0x17
    6372:	98 8d       	ldd	r25, Y+24	; 0x18
    6374:	20 e0       	ldi	r18, 0x00	; 0
    6376:	30 e0       	ldi	r19, 0x00	; 0
    6378:	40 e8       	ldi	r20, 0x80	; 128
    637a:	5f e3       	ldi	r21, 0x3F	; 63
    637c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6380:	88 23       	and	r24, r24
    6382:	2c f4       	brge	.+10     	; 0x638e <BAZZER+0x7e>
		__ticks = 1;
    6384:	81 e0       	ldi	r24, 0x01	; 1
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	9c 8b       	std	Y+20, r25	; 0x14
    638a:	8b 8b       	std	Y+19, r24	; 0x13
    638c:	3f c0       	rjmp	.+126    	; 0x640c <BAZZER+0xfc>
	else if (__tmp > 65535)
    638e:	6d 89       	ldd	r22, Y+21	; 0x15
    6390:	7e 89       	ldd	r23, Y+22	; 0x16
    6392:	8f 89       	ldd	r24, Y+23	; 0x17
    6394:	98 8d       	ldd	r25, Y+24	; 0x18
    6396:	20 e0       	ldi	r18, 0x00	; 0
    6398:	3f ef       	ldi	r19, 0xFF	; 255
    639a:	4f e7       	ldi	r20, 0x7F	; 127
    639c:	57 e4       	ldi	r21, 0x47	; 71
    639e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    63a2:	18 16       	cp	r1, r24
    63a4:	4c f5       	brge	.+82     	; 0x63f8 <BAZZER+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63a6:	69 8d       	ldd	r22, Y+25	; 0x19
    63a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    63aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    63ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    63ae:	20 e0       	ldi	r18, 0x00	; 0
    63b0:	30 e0       	ldi	r19, 0x00	; 0
    63b2:	40 e2       	ldi	r20, 0x20	; 32
    63b4:	51 e4       	ldi	r21, 0x41	; 65
    63b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63ba:	dc 01       	movw	r26, r24
    63bc:	cb 01       	movw	r24, r22
    63be:	bc 01       	movw	r22, r24
    63c0:	cd 01       	movw	r24, r26
    63c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63c6:	dc 01       	movw	r26, r24
    63c8:	cb 01       	movw	r24, r22
    63ca:	9c 8b       	std	Y+20, r25	; 0x14
    63cc:	8b 8b       	std	Y+19, r24	; 0x13
    63ce:	0f c0       	rjmp	.+30     	; 0x63ee <BAZZER+0xde>
    63d0:	88 ec       	ldi	r24, 0xC8	; 200
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	9a 8b       	std	Y+18, r25	; 0x12
    63d6:	89 8b       	std	Y+17, r24	; 0x11
    63d8:	89 89       	ldd	r24, Y+17	; 0x11
    63da:	9a 89       	ldd	r25, Y+18	; 0x12
    63dc:	01 97       	sbiw	r24, 0x01	; 1
    63de:	f1 f7       	brne	.-4      	; 0x63dc <BAZZER+0xcc>
    63e0:	9a 8b       	std	Y+18, r25	; 0x12
    63e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63e4:	8b 89       	ldd	r24, Y+19	; 0x13
    63e6:	9c 89       	ldd	r25, Y+20	; 0x14
    63e8:	01 97       	sbiw	r24, 0x01	; 1
    63ea:	9c 8b       	std	Y+20, r25	; 0x14
    63ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63ee:	8b 89       	ldd	r24, Y+19	; 0x13
    63f0:	9c 89       	ldd	r25, Y+20	; 0x14
    63f2:	00 97       	sbiw	r24, 0x00	; 0
    63f4:	69 f7       	brne	.-38     	; 0x63d0 <BAZZER+0xc0>
    63f6:	14 c0       	rjmp	.+40     	; 0x6420 <BAZZER+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63f8:	6d 89       	ldd	r22, Y+21	; 0x15
    63fa:	7e 89       	ldd	r23, Y+22	; 0x16
    63fc:	8f 89       	ldd	r24, Y+23	; 0x17
    63fe:	98 8d       	ldd	r25, Y+24	; 0x18
    6400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6404:	dc 01       	movw	r26, r24
    6406:	cb 01       	movw	r24, r22
    6408:	9c 8b       	std	Y+20, r25	; 0x14
    640a:	8b 8b       	std	Y+19, r24	; 0x13
    640c:	8b 89       	ldd	r24, Y+19	; 0x13
    640e:	9c 89       	ldd	r25, Y+20	; 0x14
    6410:	98 8b       	std	Y+16, r25	; 0x10
    6412:	8f 87       	std	Y+15, r24	; 0x0f
    6414:	8f 85       	ldd	r24, Y+15	; 0x0f
    6416:	98 89       	ldd	r25, Y+16	; 0x10
    6418:	01 97       	sbiw	r24, 0x01	; 1
    641a:	f1 f7       	brne	.-4      	; 0x6418 <BAZZER+0x108>
    641c:	98 8b       	std	Y+16, r25	; 0x10
    641e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	MDIO_voidClrPinVal(DIO_PORTB,DIO_PIN0);
    6420:	82 e0       	ldi	r24, 0x02	; 2
    6422:	60 e0       	ldi	r22, 0x00	; 0
    6424:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_voidClrPinVal>
    6428:	80 e0       	ldi	r24, 0x00	; 0
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	a6 e9       	ldi	r26, 0x96	; 150
    642e:	b3 e4       	ldi	r27, 0x43	; 67
    6430:	8b 87       	std	Y+11, r24	; 0x0b
    6432:	9c 87       	std	Y+12, r25	; 0x0c
    6434:	ad 87       	std	Y+13, r26	; 0x0d
    6436:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6438:	6b 85       	ldd	r22, Y+11	; 0x0b
    643a:	7c 85       	ldd	r23, Y+12	; 0x0c
    643c:	8d 85       	ldd	r24, Y+13	; 0x0d
    643e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6440:	20 e0       	ldi	r18, 0x00	; 0
    6442:	30 e0       	ldi	r19, 0x00	; 0
    6444:	4a ef       	ldi	r20, 0xFA	; 250
    6446:	54 e4       	ldi	r21, 0x44	; 68
    6448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    644c:	dc 01       	movw	r26, r24
    644e:	cb 01       	movw	r24, r22
    6450:	8f 83       	std	Y+7, r24	; 0x07
    6452:	98 87       	std	Y+8, r25	; 0x08
    6454:	a9 87       	std	Y+9, r26	; 0x09
    6456:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6458:	6f 81       	ldd	r22, Y+7	; 0x07
    645a:	78 85       	ldd	r23, Y+8	; 0x08
    645c:	89 85       	ldd	r24, Y+9	; 0x09
    645e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6460:	20 e0       	ldi	r18, 0x00	; 0
    6462:	30 e0       	ldi	r19, 0x00	; 0
    6464:	40 e8       	ldi	r20, 0x80	; 128
    6466:	5f e3       	ldi	r21, 0x3F	; 63
    6468:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    646c:	88 23       	and	r24, r24
    646e:	2c f4       	brge	.+10     	; 0x647a <BAZZER+0x16a>
		__ticks = 1;
    6470:	81 e0       	ldi	r24, 0x01	; 1
    6472:	90 e0       	ldi	r25, 0x00	; 0
    6474:	9e 83       	std	Y+6, r25	; 0x06
    6476:	8d 83       	std	Y+5, r24	; 0x05
    6478:	3f c0       	rjmp	.+126    	; 0x64f8 <BAZZER+0x1e8>
	else if (__tmp > 65535)
    647a:	6f 81       	ldd	r22, Y+7	; 0x07
    647c:	78 85       	ldd	r23, Y+8	; 0x08
    647e:	89 85       	ldd	r24, Y+9	; 0x09
    6480:	9a 85       	ldd	r25, Y+10	; 0x0a
    6482:	20 e0       	ldi	r18, 0x00	; 0
    6484:	3f ef       	ldi	r19, 0xFF	; 255
    6486:	4f e7       	ldi	r20, 0x7F	; 127
    6488:	57 e4       	ldi	r21, 0x47	; 71
    648a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    648e:	18 16       	cp	r1, r24
    6490:	4c f5       	brge	.+82     	; 0x64e4 <BAZZER+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6492:	6b 85       	ldd	r22, Y+11	; 0x0b
    6494:	7c 85       	ldd	r23, Y+12	; 0x0c
    6496:	8d 85       	ldd	r24, Y+13	; 0x0d
    6498:	9e 85       	ldd	r25, Y+14	; 0x0e
    649a:	20 e0       	ldi	r18, 0x00	; 0
    649c:	30 e0       	ldi	r19, 0x00	; 0
    649e:	40 e2       	ldi	r20, 0x20	; 32
    64a0:	51 e4       	ldi	r21, 0x41	; 65
    64a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64a6:	dc 01       	movw	r26, r24
    64a8:	cb 01       	movw	r24, r22
    64aa:	bc 01       	movw	r22, r24
    64ac:	cd 01       	movw	r24, r26
    64ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64b2:	dc 01       	movw	r26, r24
    64b4:	cb 01       	movw	r24, r22
    64b6:	9e 83       	std	Y+6, r25	; 0x06
    64b8:	8d 83       	std	Y+5, r24	; 0x05
    64ba:	0f c0       	rjmp	.+30     	; 0x64da <BAZZER+0x1ca>
    64bc:	88 ec       	ldi	r24, 0xC8	; 200
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	9c 83       	std	Y+4, r25	; 0x04
    64c2:	8b 83       	std	Y+3, r24	; 0x03
    64c4:	8b 81       	ldd	r24, Y+3	; 0x03
    64c6:	9c 81       	ldd	r25, Y+4	; 0x04
    64c8:	01 97       	sbiw	r24, 0x01	; 1
    64ca:	f1 f7       	brne	.-4      	; 0x64c8 <BAZZER+0x1b8>
    64cc:	9c 83       	std	Y+4, r25	; 0x04
    64ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64d0:	8d 81       	ldd	r24, Y+5	; 0x05
    64d2:	9e 81       	ldd	r25, Y+6	; 0x06
    64d4:	01 97       	sbiw	r24, 0x01	; 1
    64d6:	9e 83       	std	Y+6, r25	; 0x06
    64d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64da:	8d 81       	ldd	r24, Y+5	; 0x05
    64dc:	9e 81       	ldd	r25, Y+6	; 0x06
    64de:	00 97       	sbiw	r24, 0x00	; 0
    64e0:	69 f7       	brne	.-38     	; 0x64bc <BAZZER+0x1ac>
    64e2:	14 c0       	rjmp	.+40     	; 0x650c <BAZZER+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64e4:	6f 81       	ldd	r22, Y+7	; 0x07
    64e6:	78 85       	ldd	r23, Y+8	; 0x08
    64e8:	89 85       	ldd	r24, Y+9	; 0x09
    64ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    64ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64f0:	dc 01       	movw	r26, r24
    64f2:	cb 01       	movw	r24, r22
    64f4:	9e 83       	std	Y+6, r25	; 0x06
    64f6:	8d 83       	std	Y+5, r24	; 0x05
    64f8:	8d 81       	ldd	r24, Y+5	; 0x05
    64fa:	9e 81       	ldd	r25, Y+6	; 0x06
    64fc:	9a 83       	std	Y+2, r25	; 0x02
    64fe:	89 83       	std	Y+1, r24	; 0x01
    6500:	89 81       	ldd	r24, Y+1	; 0x01
    6502:	9a 81       	ldd	r25, Y+2	; 0x02
    6504:	01 97       	sbiw	r24, 0x01	; 1
    6506:	f1 f7       	brne	.-4      	; 0x6504 <BAZZER+0x1f4>
    6508:	9a 83       	std	Y+2, r25	; 0x02
    650a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	Counts=0;
    650c:	10 92 f9 01 	sts	0x01F9, r1
    6510:	10 92 f8 01 	sts	0x01F8, r1
    6514:	09 c0       	rjmp	.+18     	; 0x6528 <BAZZER+0x218>
	}
	else
	{
		Counts++;
    6516:	80 91 f8 01 	lds	r24, 0x01F8
    651a:	90 91 f9 01 	lds	r25, 0x01F9
    651e:	01 96       	adiw	r24, 0x01	; 1
    6520:	90 93 f9 01 	sts	0x01F9, r25
    6524:	80 93 f8 01 	sts	0x01F8, r24
	}


}
    6528:	6c 96       	adiw	r28, 0x1c	; 28
    652a:	0f b6       	in	r0, 0x3f	; 63
    652c:	f8 94       	cli
    652e:	de bf       	out	0x3e, r29	; 62
    6530:	0f be       	out	0x3f, r0	; 63
    6532:	cd bf       	out	0x3d, r28	; 61
    6534:	cf 91       	pop	r28
    6536:	df 91       	pop	r29
    6538:	08 95       	ret

0000653a <clearCount>:

void clearCount (void)
{
    653a:	df 93       	push	r29
    653c:	cf 93       	push	r28
    653e:	cd b7       	in	r28, 0x3d	; 61
    6540:	de b7       	in	r29, 0x3e	; 62
	Counts=0;
    6542:	10 92 f9 01 	sts	0x01F9, r1
    6546:	10 92 f8 01 	sts	0x01F8, r1
}
    654a:	cf 91       	pop	r28
    654c:	df 91       	pop	r29
    654e:	08 95       	ret

00006550 <__mulsi3>:
    6550:	62 9f       	mul	r22, r18
    6552:	d0 01       	movw	r26, r0
    6554:	73 9f       	mul	r23, r19
    6556:	f0 01       	movw	r30, r0
    6558:	82 9f       	mul	r24, r18
    655a:	e0 0d       	add	r30, r0
    655c:	f1 1d       	adc	r31, r1
    655e:	64 9f       	mul	r22, r20
    6560:	e0 0d       	add	r30, r0
    6562:	f1 1d       	adc	r31, r1
    6564:	92 9f       	mul	r25, r18
    6566:	f0 0d       	add	r31, r0
    6568:	83 9f       	mul	r24, r19
    656a:	f0 0d       	add	r31, r0
    656c:	74 9f       	mul	r23, r20
    656e:	f0 0d       	add	r31, r0
    6570:	65 9f       	mul	r22, r21
    6572:	f0 0d       	add	r31, r0
    6574:	99 27       	eor	r25, r25
    6576:	72 9f       	mul	r23, r18
    6578:	b0 0d       	add	r27, r0
    657a:	e1 1d       	adc	r30, r1
    657c:	f9 1f       	adc	r31, r25
    657e:	63 9f       	mul	r22, r19
    6580:	b0 0d       	add	r27, r0
    6582:	e1 1d       	adc	r30, r1
    6584:	f9 1f       	adc	r31, r25
    6586:	bd 01       	movw	r22, r26
    6588:	cf 01       	movw	r24, r30
    658a:	11 24       	eor	r1, r1
    658c:	08 95       	ret

0000658e <__udivmodhi4>:
    658e:	aa 1b       	sub	r26, r26
    6590:	bb 1b       	sub	r27, r27
    6592:	51 e1       	ldi	r21, 0x11	; 17
    6594:	07 c0       	rjmp	.+14     	; 0x65a4 <__udivmodhi4_ep>

00006596 <__udivmodhi4_loop>:
    6596:	aa 1f       	adc	r26, r26
    6598:	bb 1f       	adc	r27, r27
    659a:	a6 17       	cp	r26, r22
    659c:	b7 07       	cpc	r27, r23
    659e:	10 f0       	brcs	.+4      	; 0x65a4 <__udivmodhi4_ep>
    65a0:	a6 1b       	sub	r26, r22
    65a2:	b7 0b       	sbc	r27, r23

000065a4 <__udivmodhi4_ep>:
    65a4:	88 1f       	adc	r24, r24
    65a6:	99 1f       	adc	r25, r25
    65a8:	5a 95       	dec	r21
    65aa:	a9 f7       	brne	.-22     	; 0x6596 <__udivmodhi4_loop>
    65ac:	80 95       	com	r24
    65ae:	90 95       	com	r25
    65b0:	bc 01       	movw	r22, r24
    65b2:	cd 01       	movw	r24, r26
    65b4:	08 95       	ret

000065b6 <__divmodhi4>:
    65b6:	97 fb       	bst	r25, 7
    65b8:	09 2e       	mov	r0, r25
    65ba:	07 26       	eor	r0, r23
    65bc:	0a d0       	rcall	.+20     	; 0x65d2 <__divmodhi4_neg1>
    65be:	77 fd       	sbrc	r23, 7
    65c0:	04 d0       	rcall	.+8      	; 0x65ca <__divmodhi4_neg2>
    65c2:	e5 df       	rcall	.-54     	; 0x658e <__udivmodhi4>
    65c4:	06 d0       	rcall	.+12     	; 0x65d2 <__divmodhi4_neg1>
    65c6:	00 20       	and	r0, r0
    65c8:	1a f4       	brpl	.+6      	; 0x65d0 <__divmodhi4_exit>

000065ca <__divmodhi4_neg2>:
    65ca:	70 95       	com	r23
    65cc:	61 95       	neg	r22
    65ce:	7f 4f       	sbci	r23, 0xFF	; 255

000065d0 <__divmodhi4_exit>:
    65d0:	08 95       	ret

000065d2 <__divmodhi4_neg1>:
    65d2:	f6 f7       	brtc	.-4      	; 0x65d0 <__divmodhi4_exit>
    65d4:	90 95       	com	r25
    65d6:	81 95       	neg	r24
    65d8:	9f 4f       	sbci	r25, 0xFF	; 255
    65da:	08 95       	ret

000065dc <__udivmodsi4>:
    65dc:	a1 e2       	ldi	r26, 0x21	; 33
    65de:	1a 2e       	mov	r1, r26
    65e0:	aa 1b       	sub	r26, r26
    65e2:	bb 1b       	sub	r27, r27
    65e4:	fd 01       	movw	r30, r26
    65e6:	0d c0       	rjmp	.+26     	; 0x6602 <__udivmodsi4_ep>

000065e8 <__udivmodsi4_loop>:
    65e8:	aa 1f       	adc	r26, r26
    65ea:	bb 1f       	adc	r27, r27
    65ec:	ee 1f       	adc	r30, r30
    65ee:	ff 1f       	adc	r31, r31
    65f0:	a2 17       	cp	r26, r18
    65f2:	b3 07       	cpc	r27, r19
    65f4:	e4 07       	cpc	r30, r20
    65f6:	f5 07       	cpc	r31, r21
    65f8:	20 f0       	brcs	.+8      	; 0x6602 <__udivmodsi4_ep>
    65fa:	a2 1b       	sub	r26, r18
    65fc:	b3 0b       	sbc	r27, r19
    65fe:	e4 0b       	sbc	r30, r20
    6600:	f5 0b       	sbc	r31, r21

00006602 <__udivmodsi4_ep>:
    6602:	66 1f       	adc	r22, r22
    6604:	77 1f       	adc	r23, r23
    6606:	88 1f       	adc	r24, r24
    6608:	99 1f       	adc	r25, r25
    660a:	1a 94       	dec	r1
    660c:	69 f7       	brne	.-38     	; 0x65e8 <__udivmodsi4_loop>
    660e:	60 95       	com	r22
    6610:	70 95       	com	r23
    6612:	80 95       	com	r24
    6614:	90 95       	com	r25
    6616:	9b 01       	movw	r18, r22
    6618:	ac 01       	movw	r20, r24
    661a:	bd 01       	movw	r22, r26
    661c:	cf 01       	movw	r24, r30
    661e:	08 95       	ret

00006620 <__prologue_saves__>:
    6620:	2f 92       	push	r2
    6622:	3f 92       	push	r3
    6624:	4f 92       	push	r4
    6626:	5f 92       	push	r5
    6628:	6f 92       	push	r6
    662a:	7f 92       	push	r7
    662c:	8f 92       	push	r8
    662e:	9f 92       	push	r9
    6630:	af 92       	push	r10
    6632:	bf 92       	push	r11
    6634:	cf 92       	push	r12
    6636:	df 92       	push	r13
    6638:	ef 92       	push	r14
    663a:	ff 92       	push	r15
    663c:	0f 93       	push	r16
    663e:	1f 93       	push	r17
    6640:	cf 93       	push	r28
    6642:	df 93       	push	r29
    6644:	cd b7       	in	r28, 0x3d	; 61
    6646:	de b7       	in	r29, 0x3e	; 62
    6648:	ca 1b       	sub	r28, r26
    664a:	db 0b       	sbc	r29, r27
    664c:	0f b6       	in	r0, 0x3f	; 63
    664e:	f8 94       	cli
    6650:	de bf       	out	0x3e, r29	; 62
    6652:	0f be       	out	0x3f, r0	; 63
    6654:	cd bf       	out	0x3d, r28	; 61
    6656:	09 94       	ijmp

00006658 <__epilogue_restores__>:
    6658:	2a 88       	ldd	r2, Y+18	; 0x12
    665a:	39 88       	ldd	r3, Y+17	; 0x11
    665c:	48 88       	ldd	r4, Y+16	; 0x10
    665e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6660:	6e 84       	ldd	r6, Y+14	; 0x0e
    6662:	7d 84       	ldd	r7, Y+13	; 0x0d
    6664:	8c 84       	ldd	r8, Y+12	; 0x0c
    6666:	9b 84       	ldd	r9, Y+11	; 0x0b
    6668:	aa 84       	ldd	r10, Y+10	; 0x0a
    666a:	b9 84       	ldd	r11, Y+9	; 0x09
    666c:	c8 84       	ldd	r12, Y+8	; 0x08
    666e:	df 80       	ldd	r13, Y+7	; 0x07
    6670:	ee 80       	ldd	r14, Y+6	; 0x06
    6672:	fd 80       	ldd	r15, Y+5	; 0x05
    6674:	0c 81       	ldd	r16, Y+4	; 0x04
    6676:	1b 81       	ldd	r17, Y+3	; 0x03
    6678:	aa 81       	ldd	r26, Y+2	; 0x02
    667a:	b9 81       	ldd	r27, Y+1	; 0x01
    667c:	ce 0f       	add	r28, r30
    667e:	d1 1d       	adc	r29, r1
    6680:	0f b6       	in	r0, 0x3f	; 63
    6682:	f8 94       	cli
    6684:	de bf       	out	0x3e, r29	; 62
    6686:	0f be       	out	0x3f, r0	; 63
    6688:	cd bf       	out	0x3d, r28	; 61
    668a:	ed 01       	movw	r28, r26
    668c:	08 95       	ret

0000668e <atol>:
    668e:	1f 93       	push	r17
    6690:	fc 01       	movw	r30, r24
    6692:	99 27       	eor	r25, r25
    6694:	88 27       	eor	r24, r24
    6696:	bc 01       	movw	r22, r24
    6698:	e8 94       	clt
    669a:	11 91       	ld	r17, Z+
    669c:	10 32       	cpi	r17, 0x20	; 32
    669e:	e9 f3       	breq	.-6      	; 0x669a <atol+0xc>
    66a0:	19 30       	cpi	r17, 0x09	; 9
    66a2:	10 f0       	brcs	.+4      	; 0x66a8 <atol+0x1a>
    66a4:	1e 30       	cpi	r17, 0x0E	; 14
    66a6:	c8 f3       	brcs	.-14     	; 0x669a <atol+0xc>
    66a8:	1b 32       	cpi	r17, 0x2B	; 43
    66aa:	51 f0       	breq	.+20     	; 0x66c0 <atol+0x32>
    66ac:	1d 32       	cpi	r17, 0x2D	; 45
    66ae:	49 f4       	brne	.+18     	; 0x66c2 <atol+0x34>
    66b0:	68 94       	set
    66b2:	06 c0       	rjmp	.+12     	; 0x66c0 <atol+0x32>
    66b4:	0e 94 a2 33 	call	0x6744	; 0x6744 <__mulsi_const_10>
    66b8:	61 0f       	add	r22, r17
    66ba:	71 1d       	adc	r23, r1
    66bc:	81 1d       	adc	r24, r1
    66be:	91 1d       	adc	r25, r1
    66c0:	11 91       	ld	r17, Z+
    66c2:	10 53       	subi	r17, 0x30	; 48
    66c4:	1a 30       	cpi	r17, 0x0A	; 10
    66c6:	b0 f3       	brcs	.-20     	; 0x66b4 <atol+0x26>
    66c8:	3e f4       	brtc	.+14     	; 0x66d8 <atol+0x4a>
    66ca:	90 95       	com	r25
    66cc:	80 95       	com	r24
    66ce:	70 95       	com	r23
    66d0:	61 95       	neg	r22
    66d2:	7f 4f       	sbci	r23, 0xFF	; 255
    66d4:	8f 4f       	sbci	r24, 0xFF	; 255
    66d6:	9f 4f       	sbci	r25, 0xFF	; 255
    66d8:	1f 91       	pop	r17
    66da:	08 95       	ret

000066dc <ltoa>:
    66dc:	fa 01       	movw	r30, r20
    66de:	cf 93       	push	r28
    66e0:	ff 93       	push	r31
    66e2:	ef 93       	push	r30
    66e4:	22 30       	cpi	r18, 0x02	; 2
    66e6:	44 f1       	brlt	.+80     	; 0x6738 <ltoa+0x5c>
    66e8:	25 32       	cpi	r18, 0x25	; 37
    66ea:	34 f5       	brge	.+76     	; 0x6738 <ltoa+0x5c>
    66ec:	c2 2f       	mov	r28, r18
    66ee:	e8 94       	clt
    66f0:	ca 30       	cpi	r28, 0x0A	; 10
    66f2:	49 f4       	brne	.+18     	; 0x6706 <ltoa+0x2a>
    66f4:	97 fb       	bst	r25, 7
    66f6:	3e f4       	brtc	.+14     	; 0x6706 <ltoa+0x2a>
    66f8:	90 95       	com	r25
    66fa:	80 95       	com	r24
    66fc:	70 95       	com	r23
    66fe:	61 95       	neg	r22
    6700:	7f 4f       	sbci	r23, 0xFF	; 255
    6702:	8f 4f       	sbci	r24, 0xFF	; 255
    6704:	9f 4f       	sbci	r25, 0xFF	; 255
    6706:	2c 2f       	mov	r18, r28
    6708:	33 27       	eor	r19, r19
    670a:	44 27       	eor	r20, r20
    670c:	55 27       	eor	r21, r21
    670e:	ff 93       	push	r31
    6710:	ef 93       	push	r30
    6712:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__udivmodsi4>
    6716:	ef 91       	pop	r30
    6718:	ff 91       	pop	r31
    671a:	60 5d       	subi	r22, 0xD0	; 208
    671c:	6a 33       	cpi	r22, 0x3A	; 58
    671e:	0c f0       	brlt	.+2      	; 0x6722 <ltoa+0x46>
    6720:	69 5d       	subi	r22, 0xD9	; 217
    6722:	61 93       	st	Z+, r22
    6724:	b9 01       	movw	r22, r18
    6726:	ca 01       	movw	r24, r20
    6728:	60 50       	subi	r22, 0x00	; 0
    672a:	70 40       	sbci	r23, 0x00	; 0
    672c:	80 40       	sbci	r24, 0x00	; 0
    672e:	90 40       	sbci	r25, 0x00	; 0
    6730:	51 f7       	brne	.-44     	; 0x6706 <ltoa+0x2a>
    6732:	16 f4       	brtc	.+4      	; 0x6738 <ltoa+0x5c>
    6734:	cd e2       	ldi	r28, 0x2D	; 45
    6736:	c1 93       	st	Z+, r28
    6738:	10 82       	st	Z, r1
    673a:	8f 91       	pop	r24
    673c:	9f 91       	pop	r25
    673e:	cf 91       	pop	r28
    6740:	0c 94 b7 33 	jmp	0x676e	; 0x676e <strrev>

00006744 <__mulsi_const_10>:
    6744:	59 2f       	mov	r21, r25
    6746:	48 2f       	mov	r20, r24
    6748:	37 2f       	mov	r19, r23
    674a:	26 2f       	mov	r18, r22
    674c:	66 0f       	add	r22, r22
    674e:	77 1f       	adc	r23, r23
    6750:	88 1f       	adc	r24, r24
    6752:	99 1f       	adc	r25, r25
    6754:	66 0f       	add	r22, r22
    6756:	77 1f       	adc	r23, r23
    6758:	88 1f       	adc	r24, r24
    675a:	99 1f       	adc	r25, r25
    675c:	62 0f       	add	r22, r18
    675e:	73 1f       	adc	r23, r19
    6760:	84 1f       	adc	r24, r20
    6762:	95 1f       	adc	r25, r21
    6764:	66 0f       	add	r22, r22
    6766:	77 1f       	adc	r23, r23
    6768:	88 1f       	adc	r24, r24
    676a:	99 1f       	adc	r25, r25
    676c:	08 95       	ret

0000676e <strrev>:
    676e:	dc 01       	movw	r26, r24
    6770:	fc 01       	movw	r30, r24
    6772:	67 2f       	mov	r22, r23
    6774:	71 91       	ld	r23, Z+
    6776:	77 23       	and	r23, r23
    6778:	e1 f7       	brne	.-8      	; 0x6772 <strrev+0x4>
    677a:	32 97       	sbiw	r30, 0x02	; 2
    677c:	04 c0       	rjmp	.+8      	; 0x6786 <strrev+0x18>
    677e:	7c 91       	ld	r23, X
    6780:	6d 93       	st	X+, r22
    6782:	70 83       	st	Z, r23
    6784:	62 91       	ld	r22, -Z
    6786:	ae 17       	cp	r26, r30
    6788:	bf 07       	cpc	r27, r31
    678a:	c8 f3       	brcs	.-14     	; 0x677e <strrev+0x10>
    678c:	08 95       	ret

0000678e <_exit>:
    678e:	f8 94       	cli

00006790 <__stop_program>:
    6790:	ff cf       	rjmp	.-2      	; 0x6790 <__stop_program>
